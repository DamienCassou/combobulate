;; START Production rules for yaml
(defconst combobulate-rules-yaml
 '(("alias" (:*unnamed* ("alias_name")))
 ("anchor" (:*unnamed* ("anchor_name")))
 ("block_mapping" (:*unnamed* ("block_mapping_pair")))
 ("block_mapping_pair" (:key ("block_node" "flow_node") :value ("block_node" "flow_node")))
 ("block_node" (:*unnamed* ("block_sequence" "block_mapping" "tag" "block_scalar" "anchor")))
 ("block_sequence" (:*unnamed* ("block_sequence_item")))
 ("block_sequence_item" (:*unnamed* ("block_node" "flow_node")))
 ("document" (:*unnamed* ("block_node" "reserved_directive" "flow_node" "yaml_directive" "tag_directive")))
 ("double_quote_scalar" (:*unnamed* ("escape_sequence")))
 ("flow_mapping" (:*unnamed* ("flow_pair" "flow_node")))
 ("flow_node" (:*unnamed* ("tag" "flow_mapping" "flow_sequence" "plain_scalar" "double_quote_scalar" "single_quote_scalar" "alias" "anchor")))
 ("flow_pair" (:key ("flow_node") :value ("flow_node")))
 ("flow_sequence" (:*unnamed* ("flow_pair" "flow_node")))
 ("plain_scalar" (:*unnamed* ("boolean_scalar" "string_scalar" "null_scalar" "float_scalar" "integer_scalar")))
 ("reserved_directive" (:*unnamed* ("directive_name" "directive_parameter")))
 ("single_quote_scalar" (:*unnamed* ("escape_sequence")))
 ("stream" (:*unnamed* ("document")))
 ("tag_directive" (:*unnamed* ("tag_handle" "tag_prefix")))
 ("yaml_directive" (:*unnamed* ("yaml_version")))
))
;; END Production rules for yaml
;; START Inverse production rules for yaml
(defconst combobulate-rules-yaml-inverted
 '(("alias_name" ("alias"))
   ("anchor_name" ("anchor"))
   ("block_mapping_pair" ("block_mapping"))
   ("block_node" ("document" "block_sequence_item" "block_mapping_pair"))
   ("flow_node" ("document" "block_sequence_item" "flow_pair" "flow_mapping" "flow_sequence" "block_mapping_pair"))
   ("block_sequence" ("block_node"))
   ("block_mapping" ("block_node"))
   ("tag" ("block_node" "flow_node"))
   ("block_scalar" ("block_node"))
   ("anchor" ("block_node" "flow_node"))
   ("block_sequence_item" ("block_sequence"))
   ("reserved_directive" ("document"))
   ("yaml_directive" ("document"))
   ("tag_directive" ("document"))
   ("escape_sequence" ("single_quote_scalar" "double_quote_scalar"))
   ("flow_pair" ("flow_sequence" "flow_mapping"))
   ("flow_mapping" ("flow_node"))
   ("flow_sequence" ("flow_node"))
   ("plain_scalar" ("flow_node"))
   ("double_quote_scalar" ("flow_node"))
   ("single_quote_scalar" ("flow_node"))
   ("alias" ("flow_node"))
   ("boolean_scalar" ("plain_scalar"))
   ("string_scalar" ("plain_scalar"))
   ("null_scalar" ("plain_scalar"))
   ("float_scalar" ("plain_scalar"))
   ("integer_scalar" ("plain_scalar"))
   ("directive_name" ("reserved_directive"))
   ("directive_parameter" ("reserved_directive"))
   ("document" ("stream"))
   ("tag_handle" ("tag_directive"))
   ("tag_prefix" ("tag_directive"))
   ("yaml_version" ("yaml_directive"))
  )
)
;; END Inverse production rules for yaml

;; START Production rules for tsx
(defconst combobulate-rules-tsx
 '(("_primary_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "type_query" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "intersection_type" "object_type")))
 ("declaration" (:*unnamed* ("ambient_declaration" "generator_function_declaration" "type_alias_declaration" "import_alias" "variable_declaration" "class_declaration" "internal_module" "function_declaration" "abstract_class_declaration" "function_signature" "enum_declaration" "interface_declaration" "module" "lexical_declaration")))
 ("expression" (:*unnamed* ("internal_module" "await_expression" "satisfies_expression" "update_expression" "as_expression" "yield_expression" "binary_expression" "unary_expression" "jsx_element" "augmented_assignment_expression" "ternary_expression" "jsx_fragment" "assignment_expression" "primary_expression" "glimmer_template" "new_expression" "jsx_self_closing_element")))
 ("pattern" (:*unnamed* ("subscript_expression" "identifier" "non_null_expression" "array_pattern" "member_expression" "rest_pattern" "undefined" "object_pattern")))
 ("primary_expression" (:*unnamed* ("arrow_function" "meta_property" "function" "false" "array" "call_expression" "member_expression" "undefined" "generator_function" "regex" "super" "object" "null" "identifier" "non_null_expression" "subscript_expression" "template_string" "true" "parenthesized_expression" "string" "import" "class" "this" "number")))
 ("statement" (:*unnamed* ("import_statement" "expression_statement" "declaration" "for_statement" "throw_statement" "if_statement" "export_statement" "try_statement" "with_statement" "for_in_statement" "return_statement" "empty_statement" "labeled_statement" "break_statement" "debugger_statement" "do_statement" "while_statement" "statement_block" "switch_statement" "continue_statement")))
 ("abstract_class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("abstract_method_signature" (:*unnamed* ("accessibility_modifier") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("ambient_declaration" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "declaration" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type" "property_identifier" "statement_block")))
 ("arguments" (:*unnamed* ("expression" "spread_element")))
 ("array" (:*unnamed* ("expression" "spread_element")))
 ("array_pattern" (:*unnamed* ("assignment_pattern" "pattern")))
 ("array_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "type_query" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "intersection_type" "object_type")))
 ("arrow_function" (:body ("statement_block" "expression") :parameter ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("as_expression" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "expression" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("asserts" (:*unnamed* ("identifier" "type_predicate" "this")))
 ("assignment_expression" (:left ("subscript_expression" "identifier" "non_null_expression" "array_pattern" "member_expression" "undefined" "object_pattern" "parenthesized_expression") :right ("expression")))
 ("assignment_pattern" (:left ("pattern") :right ("expression")))
 ("augmented_assignment_expression" (:left ("subscript_expression" "identifier" "non_null_expression" "parenthesized_expression" "member_expression") :operator nil :right ("expression")))
 ("await_expression" (:*unnamed* ("expression")))
 ("binary_expression" (:left ("expression") :operator nil :right ("expression")))
 ("break_statement" (:label ("statement_identifier")))
 ("call_expression" (:arguments ("arguments" "template_string") :function ("expression") :type_arguments ("type_arguments")))
 ("call_signature" (:parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("catch_clause" (:body ("statement_block") :parameter ("identifier" "array_pattern" "object_pattern") :type ("type_annotation")))
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("class_body" (:*unnamed* ("method_definition" "method_signature" "abstract_method_signature" "decorator" "class_static_block" "public_field_definition" "index_signature")))
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("class_heritage" (:*unnamed* ("extends_clause" "implements_clause")))
 ("class_static_block" (:body ("statement_block")))
 ("computed_property_name" (:*unnamed* ("expression")))
 ("conditional_type" (:alternative ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :consequence ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :left ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :right ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("constraint" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("construct_signature" (:parameters ("formal_parameters") :type ("type_annotation") :type_parameters ("type_parameters")))
 ("constructor_type" (:parameters ("formal_parameters") :type ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :type_parameters ("type_parameters")))
 ("continue_statement" (:label ("statement_identifier")))
 ("decorator" (:*unnamed* ("identifier" "call_expression" "member_expression")))
 ("default_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("do_statement" (:body ("statement") :condition ("parenthesized_expression")))
 ("else_clause" (:*unnamed* ("statement")))
 ("enum_assignment" (:name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :value ("expression")))
 ("enum_body" (:*unnamed* ("enum_assignment") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier")))
 ("enum_declaration" (:body ("enum_body") :name ("identifier")))
 ("export_clause" (:*unnamed* ("export_specifier")))
 ("export_specifier" (:alias ("identifier" "string") :name ("identifier" "string")))
 ("export_statement" (:*unnamed* ("identifier" "expression" "export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression")))
 ("expression_statement" (:*unnamed* ("sequence_expression" "expression")))
 ("extends_clause" (:type_arguments ("type_arguments") :value ("expression")))
 ("extends_type_clause" (:type ("type_identifier" "nested_type_identifier" "generic_type")))
 ("finally_clause" (:body ("statement_block")))
 ("flow_maybe_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "type_query" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "intersection_type" "object_type")))
 ("for_in_statement" (:body ("statement") :kind nil :left ("subscript_expression" "identifier" "non_null_expression" "array_pattern" "member_expression" "undefined" "object_pattern" "parenthesized_expression") :operator nil :right ("sequence_expression" "expression") :value ("expression")))
 ("for_statement" (:body ("statement") :condition ("empty_statement" "expression_statement") :increment ("sequence_expression" "expression") :initializer ("variable_declaration" "empty_statement" "expression_statement" "lexical_declaration")))
 ("formal_parameters" (:*unnamed* ("optional_parameter" "required_parameter")))
 ("function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("function_signature" (:name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("function_type" (:parameters ("formal_parameters") :return_type ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "type_predicate" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :type_parameters ("type_parameters")))
 ("generator_function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("generator_function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("generic_type" (:name ("nested_type_identifier" "type_identifier") :type_arguments ("type_arguments")))
 ("glimmer_template" (:close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag")))
 ("if_statement" (:alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement")))
 ("implements_clause" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("import_alias" (:*unnamed* ("nested_identifier" "identifier")))
 ("import_clause" (:*unnamed* ("identifier" "named_imports" "namespace_import")))
 ("import_require_clause" (:*unnamed* ("identifier") :source ("string")))
 ("import_specifier" (:alias ("identifier") :name ("identifier" "string")))
 ("import_statement" (:*unnamed* ("import_require_clause" "import_clause") :source ("string")))
 ("index_signature" (:*unnamed* ("mapped_type_clause") :index_type ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :name ("identifier") :sign nil :type ("omitting_type_annotation" "type_annotation" "opting_type_annotation")))
 ("index_type_query" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "type_query" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "intersection_type" "object_type")))
 ("infer_type" (:*unnamed* ("type_identifier")))
 ("interface_declaration" (:*unnamed* ("extends_type_clause") :body ("object_type") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("internal_module" (:body ("statement_block") :name ("nested_identifier" "identifier" "string")))
 ("intersection_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("jsx_attribute" (:*unnamed* ("jsx_element" "jsx_self_closing_element" "jsx_fragment" "property_identifier" "jsx_namespace_name" "jsx_expression" "string")))
 ("jsx_closing_element" (:name ("nested_identifier" "identifier" "jsx_namespace_name")))
 ("jsx_element" (:*unnamed* ("jsx_element" "jsx_text" "jsx_self_closing_element" "jsx_fragment" "jsx_expression") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element")))
 ("jsx_expression" (:*unnamed* ("sequence_expression" "expression" "spread_element")))
 ("jsx_fragment" (:*unnamed* ("jsx_element" "jsx_text" "jsx_self_closing_element" "jsx_fragment" "jsx_expression")))
 ("jsx_namespace_name" (:*unnamed* ("identifier")))
 ("jsx_opening_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("nested_identifier" "identifier" "jsx_namespace_name") :type_arguments ("type_arguments")))
 ("jsx_self_closing_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("nested_identifier" "identifier" "jsx_namespace_name") :type_arguments ("type_arguments")))
 ("labeled_statement" (:body ("statement") :label ("statement_identifier")))
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil))
 ("literal_type" (:*unnamed* ("null" "string" "number" "undefined" "true" "false" "unary_expression")))
 ("lookup_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("mapped_type_clause" (:alias ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :name ("type_identifier") :type ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("member_expression" (:object ("expression") :optional_chain ("optional_chain") :property ("property_identifier" "private_property_identifier")))
 ("method_definition" (:*unnamed* ("override_modifier" "accessibility_modifier") :body ("statement_block") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("method_signature" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("module" (:body ("statement_block") :name ("nested_identifier" "identifier" "string")))
 ("named_imports" (:*unnamed* ("import_specifier")))
 ("namespace_export" (:*unnamed* ("identifier" "string")))
 ("namespace_import" (:*unnamed* ("identifier")))
 ("nested_identifier" (:*unnamed* ("nested_identifier" "identifier")))
 ("nested_type_identifier" (:module ("nested_identifier" "identifier") :name ("type_identifier")))
 ("new_expression" (:arguments ("arguments") :constructor ("primary_expression") :type_arguments ("type_arguments")))
 ("non_null_expression" (:*unnamed* ("expression")))
 ("object" (:*unnamed* ("method_definition" "pair" "shorthand_property_identifier" "spread_element")))
 ("object_assignment_pattern" (:left ("array_pattern" "shorthand_property_identifier_pattern" "object_pattern") :right ("expression")))
 ("object_pattern" (:*unnamed* ("rest_pattern" "shorthand_property_identifier_pattern" "object_assignment_pattern" "pair_pattern")))
 ("object_type" (:*unnamed* ("method_signature" "export_statement" "index_signature" "call_signature" "construct_signature" "property_signature")))
 ("omitting_type_annotation" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("opting_type_annotation" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("optional_parameter" (:*unnamed* ("override_modifier" "accessibility_modifier") :decorator ("decorator") :name ("identifier") :pattern ("this" "pattern") :type ("type_annotation") :value ("expression")))
 ("optional_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("pair" (:key ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :value ("expression")))
 ("pair_pattern" (:key ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :value ("assignment_pattern" "pattern")))
 ("parenthesized_expression" (:*unnamed* ("sequence_expression" "expression") :type ("type_annotation")))
 ("parenthesized_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("program" (:*unnamed* ("hash_bang_line" "statement")))
 ("property_signature" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :type ("type_annotation")))
 ("public_field_definition" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :type ("type_annotation") :value ("expression")))
 ("readonly_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("regex" (:flags ("regex_flags") :pattern ("regex_pattern")))
 ("required_parameter" (:*unnamed* ("override_modifier" "accessibility_modifier") :decorator ("decorator") :name ("rest_pattern" "identifier") :pattern ("this" "pattern") :type ("type_annotation") :value ("expression")))
 ("rest_pattern" (:*unnamed* ("subscript_expression" "identifier" "non_null_expression" "array_pattern" "undefined" "object_pattern" "member_expression")))
 ("rest_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("return_statement" (:*unnamed* ("sequence_expression" "expression")))
 ("satisfies_expression" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "expression" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("sequence_expression" (:left ("expression") :right ("sequence_expression" "expression")))
 ("spread_element" (:*unnamed* ("expression")))
 ("statement_block" (:*unnamed* ("statement")))
 ("string" (:*unnamed* ("escape_sequence" "string_fragment")))
 ("subscript_expression" (:index ("sequence_expression" "number" "expression" "predefined_type" "string") :object ("expression") :optional_chain ("optional_chain")))
 ("switch_body" (:*unnamed* ("switch_case" "switch_default")))
 ("switch_case" (:body ("statement") :value ("sequence_expression" "expression")))
 ("switch_default" (:body ("statement")))
 ("switch_statement" (:body ("switch_body") :value ("parenthesized_expression")))
 ("template_literal_type" (:*unnamed* ("template_type")))
 ("template_string" (:*unnamed* ("escape_sequence" "template_substitution")))
 ("template_substitution" (:*unnamed* ("sequence_expression" "expression")))
 ("template_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "type_query" "infer_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "intersection_type" "object_type")))
 ("ternary_expression" (:alternative ("expression") :condition ("expression") :consequence ("expression")))
 ("throw_statement" (:*unnamed* ("sequence_expression" "expression")))
 ("try_statement" (:body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause")))
 ("tuple_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "optional_parameter" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "rest_type" "object_type" "optional_type" "required_parameter")))
 ("type_alias_declaration" (:name ("type_identifier") :type_parameters ("type_parameters") :value ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("type_annotation" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("type_arguments" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("type_parameter" (:constraint ("constraint") :name ("type_identifier") :value ("default_type")))
 ("type_parameters" (:*unnamed* ("type_parameter")))
 ("type_predicate" (:name ("identifier" "this") :type ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("type_predicate_annotation" (:*unnamed* ("type_predicate")))
 ("type_query" (:*unnamed* ("subscript_expression" "identifier" "call_expression" "member_expression")))
 ("unary_expression" (:argument ("expression" "number") :operator nil))
 ("union_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("update_expression" (:argument ("expression") :operator nil))
 ("variable_declaration" (:*unnamed* ("variable_declarator")))
 ("variable_declarator" (:name ("identifier" "array_pattern" "object_pattern") :type ("type_annotation") :value ("expression")))
 ("while_statement" (:body ("statement") :condition ("parenthesized_expression")))
 ("with_statement" (:body ("statement") :object ("parenthesized_expression")))
 ("yield_expression" (:*unnamed* ("expression")))
))
;; END Production rules for tsx
;; START Inverse production rules for tsx
(defconst combobulate-rules-tsx-inverted
 '(("flow_maybe_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("index_type_query" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("parenthesized_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("lookup_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("tuple_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("conditional_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("literal_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("array_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("generic_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "extends_type_clause" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("union_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("predefined_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "subscript_expression" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("type_query" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("this_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("nested_type_identifier" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "generic_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "extends_type_clause" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("existential_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("type_identifier" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "class_declaration" "_primary_type" "array_type" "generic_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "type_parameter" "extends_type_clause" "constructor_type" "nested_type_identifier" "optional_type" "abstract_class_declaration" "type_arguments" "mapped_type_clause" "class" "interface_declaration" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "infer_type" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("template_literal_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("intersection_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("object_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "interface_declaration" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("ambient_declaration" ("declaration"))
   ("generator_function_declaration" ("declaration"))
   ("type_alias_declaration" ("declaration"))
   ("import_alias" ("declaration"))
   ("variable_declaration" ("declaration" "for_statement"))
   ("class_declaration" ("declaration"))
   ("internal_module" ("declaration" "expression"))
   ("function_declaration" ("declaration"))
   ("abstract_class_declaration" ("declaration"))
   ("function_signature" ("declaration"))
   ("enum_declaration" ("declaration"))
   ("interface_declaration" ("declaration"))
   ("module" ("declaration"))
   ("lexical_declaration" ("declaration" "for_statement"))
   ("await_expression" ("expression"))
   ("satisfies_expression" ("expression"))
   ("update_expression" ("expression"))
   ("as_expression" ("expression"))
   ("yield_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("unary_expression" ("expression" "literal_type"))
   ("jsx_element" ("jsx_element" "expression" "jsx_fragment" "jsx_attribute"))
   ("augmented_assignment_expression" ("expression"))
   ("ternary_expression" ("expression"))
   ("jsx_fragment" ("jsx_element" "expression" "jsx_fragment" "jsx_attribute"))
   ("assignment_expression" ("expression"))
   ("primary_expression" ("expression" "new_expression"))
   ("glimmer_template" ("expression"))
   ("new_expression" ("expression"))
   ("jsx_self_closing_element" ("jsx_element" "expression" "jsx_fragment" "jsx_attribute"))
   ("subscript_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "rest_pattern" "pattern" "type_query"))
   ("identifier" ("jsx_namespace_name" "pattern" "jsx_closing_element" "decorator" "optional_parameter" "type_predicate" "catch_clause" "nested_type_identifier" "namespace_import" "import_require_clause" "function_declaration" "function_signature" "asserts" "import_specifier" "arrow_function" "import_clause" "import_alias" "internal_module" "rest_pattern" "export_statement" "generator_function" "index_signature" "generator_function_declaration" "type_query" "module" "for_in_statement" "augmented_assignment_expression" "jsx_self_closing_element" "nested_identifier" "export_specifier" "variable_declarator" "assignment_expression" "primary_expression" "jsx_opening_element" "namespace_export" "enum_declaration" "function" "required_parameter"))
   ("non_null_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "rest_pattern" "pattern"))
   ("array_pattern" ("catch_clause" "for_in_statement" "variable_declarator" "assignment_expression" "rest_pattern" "pattern" "object_assignment_pattern"))
   ("member_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "rest_pattern" "pattern" "decorator" "type_query"))
   ("rest_pattern" ("required_parameter" "object_pattern" "pattern"))
   ("undefined" ("for_in_statement" "assignment_expression" "primary_expression" "literal_type" "rest_pattern" "pattern"))
   ("object_pattern" ("catch_clause" "for_in_statement" "variable_declarator" "assignment_expression" "rest_pattern" "pattern" "object_assignment_pattern"))
   ("arrow_function" ("primary_expression"))
   ("meta_property" ("primary_expression"))
   ("function" ("primary_expression"))
   ("false" ("literal_type" "primary_expression"))
   ("array" ("primary_expression"))
   ("call_expression" ("decorator" "type_query" "primary_expression"))
   ("generator_function" ("primary_expression"))
   ("regex" ("primary_expression"))
   ("super" ("primary_expression"))
   ("object" ("primary_expression"))
   ("null" ("literal_type" "primary_expression"))
   ("template_string" ("call_expression" "primary_expression"))
   ("true" ("literal_type" "primary_expression"))
   ("parenthesized_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "if_statement" "with_statement" "do_statement" "while_statement" "switch_statement"))
   ("string" ("method_signature" "pair_pattern" "literal_type" "pair" "enum_assignment" "import_require_clause" "jsx_attribute" "abstract_method_signature" "import_specifier" "enum_body" "import_statement" "internal_module" "export_statement" "property_signature" "module" "method_definition" "subscript_expression" "export_specifier" "primary_expression" "namespace_export" "public_field_definition"))
   ("import" ("primary_expression"))
   ("class" ("primary_expression"))
   ("this" ("primary_expression" "type_predicate" "asserts" "optional_parameter" "required_parameter"))
   ("number" ("method_definition" "method_signature" "subscript_expression" "enum_body" "pair_pattern" "primary_expression" "literal_type" "pair" "abstract_method_signature" "public_field_definition" "property_signature" "unary_expression" "enum_assignment"))
   ("import_statement" ("statement"))
   ("expression_statement" ("for_statement" "statement"))
   ("declaration" ("ambient_declaration" "export_statement" "statement"))
   ("for_statement" ("statement"))
   ("throw_statement" ("statement"))
   ("if_statement" ("statement"))
   ("export_statement" ("object_type" "statement"))
   ("try_statement" ("statement"))
   ("with_statement" ("statement"))
   ("for_in_statement" ("statement"))
   ("return_statement" ("statement"))
   ("empty_statement" ("for_statement" "statement"))
   ("labeled_statement" ("statement"))
   ("break_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("do_statement" ("statement"))
   ("while_statement" ("statement"))
   ("statement_block" ("ambient_declaration" "arrow_function" "catch_clause" "method_definition" "class_static_block" "internal_module" "statement" "function_declaration" "generator_function" "finally_clause" "generator_function_declaration" "function" "try_statement" "module"))
   ("switch_statement" ("statement"))
   ("continue_statement" ("statement"))
   ("class_heritage" ("class" "class_declaration" "abstract_class_declaration"))
   ("class_body" ("class" "class_declaration" "abstract_class_declaration"))
   ("decorator" ("class_body" "class_declaration" "optional_parameter" "export_statement" "abstract_class_declaration" "class" "required_parameter"))
   ("type_parameters" ("method_definition" "arrow_function" "method_signature" "type_alias_declaration" "interface_declaration" "constructor_type" "function" "construct_signature" "class_declaration" "abstract_method_signature" "function_declaration" "abstract_class_declaration" "function_signature" "generator_function" "generator_function_declaration" "class" "call_signature" "function_type"))
   ("accessibility_modifier" ("method_definition" "method_signature" "abstract_method_signature" "public_field_definition" "optional_parameter" "property_signature" "required_parameter"))
   ("property_identifier" ("ambient_declaration" "method_definition" "method_signature" "enum_body" "pair_pattern" "jsx_attribute" "member_expression" "pair" "abstract_method_signature" "public_field_definition" "property_signature" "enum_assignment"))
   ("computed_property_name" ("method_definition" "method_signature" "enum_body" "pair_pattern" "pair" "abstract_method_signature" "public_field_definition" "property_signature" "enum_assignment"))
   ("private_property_identifier" ("method_definition" "method_signature" "enum_body" "pair_pattern" "member_expression" "pair" "abstract_method_signature" "public_field_definition" "property_signature" "enum_assignment"))
   ("formal_parameters" ("method_definition" "arrow_function" "method_signature" "constructor_type" "construct_signature" "abstract_method_signature" "function_declaration" "generator_function" "function_signature" "generator_function_declaration" "function" "call_signature" "function_type"))
   ("type_predicate_annotation" ("method_definition" "arrow_function" "method_signature" "function_declaration" "abstract_method_signature" "generator_function" "function_signature" "generator_function_declaration" "function" "call_signature"))
   ("asserts" ("method_definition" "arrow_function" "method_signature" "function_declaration" "abstract_method_signature" "generator_function" "function_signature" "generator_function_declaration" "function" "call_signature"))
   ("type_annotation" ("method_signature" "construct_signature" "optional_parameter" "catch_clause" "abstract_method_signature" "function_declaration" "function_signature" "call_signature" "arrow_function" "generator_function" "index_signature" "generator_function_declaration" "property_signature" "method_definition" "variable_declarator" "public_field_definition" "function" "parenthesized_expression" "required_parameter"))
   ("function_type" ("parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "omitting_type_annotation" "satisfies_expression" "union_type" "readonly_type" "function_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("infer_type" ("parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "omitting_type_annotation" "satisfies_expression" "union_type" "readonly_type" "function_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("readonly_type" ("parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "omitting_type_annotation" "satisfies_expression" "union_type" "readonly_type" "function_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("constructor_type" ("parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "omitting_type_annotation" "satisfies_expression" "union_type" "readonly_type" "function_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("expression" ("sequence_expression" "array" "pair" "satisfies_expression" "binary_expression" "optional_parameter" "enum_assignment" "non_null_expression" "ternary_expression" "return_statement" "jsx_expression" "arguments" "spread_element" "object_assignment_pattern" "arrow_function" "expression_statement" "computed_property_name" "throw_statement" "for_statement" "call_expression" "member_expression" "await_expression" "export_statement" "switch_case" "update_expression" "as_expression" "yield_expression" "extends_clause" "unary_expression" "for_in_statement" "augmented_assignment_expression" "subscript_expression" "variable_declarator" "assignment_expression" "template_substitution" "assignment_pattern" "public_field_definition" "parenthesized_expression" "required_parameter"))
   ("spread_element" ("arguments" "jsx_expression" "object" "array"))
   ("assignment_pattern" ("array_pattern" "pair_pattern"))
   ("pattern" ("array_pattern" "pair_pattern" "assignment_pattern" "optional_parameter" "required_parameter"))
   ("type_predicate" ("type_predicate_annotation" "asserts" "function_type"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("arguments" ("call_expression" "new_expression"))
   ("type_arguments" ("call_expression" "new_expression" "generic_type" "jsx_opening_element" "jsx_self_closing_element" "extends_clause"))
   ("method_definition" ("class_body" "object"))
   ("method_signature" ("class_body" "object_type"))
   ("abstract_method_signature" ("class_body"))
   ("class_static_block" ("class_body"))
   ("public_field_definition" ("class_body"))
   ("index_signature" ("class_body" "object_type"))
   ("extends_clause" ("class_heritage"))
   ("implements_clause" ("class_heritage"))
   ("statement" ("for_in_statement" "for_statement" "labeled_statement" "if_statement" "program" "switch_case" "do_statement" "switch_default" "while_statement" "statement_block" "with_statement" "else_clause"))
   ("enum_assignment" ("enum_body"))
   ("enum_body" ("enum_declaration"))
   ("export_specifier" ("export_clause"))
   ("export_clause" ("export_statement"))
   ("namespace_export" ("export_statement"))
   ("sequence_expression" ("for_in_statement" "sequence_expression" "subscript_expression" "expression_statement" "return_statement" "throw_statement" "for_statement" "jsx_expression" "template_substitution" "switch_case" "parenthesized_expression"))
   ("optional_parameter" ("formal_parameters" "tuple_type"))
   ("required_parameter" ("formal_parameters" "tuple_type"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("else_clause" ("if_statement"))
   ("nested_identifier" ("nested_identifier" "import_alias" "nested_type_identifier" "internal_module" "jsx_opening_element" "jsx_closing_element" "jsx_self_closing_element" "module"))
   ("named_imports" ("import_clause"))
   ("namespace_import" ("import_clause"))
   ("import_require_clause" ("import_statement"))
   ("import_clause" ("import_statement"))
   ("mapped_type_clause" ("index_signature"))
   ("omitting_type_annotation" ("index_signature"))
   ("opting_type_annotation" ("index_signature"))
   ("extends_type_clause" ("interface_declaration"))
   ("jsx_namespace_name" ("jsx_self_closing_element" "jsx_opening_element" "jsx_attribute" "jsx_closing_element"))
   ("jsx_expression" ("jsx_element" "jsx_fragment" "jsx_attribute" "jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_text" ("jsx_element" "jsx_fragment"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_attribute" ("jsx_self_closing_element" "jsx_opening_element"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("optional_chain" ("subscript_expression" "member_expression"))
   ("override_modifier" ("method_definition" "method_signature" "public_field_definition" "optional_parameter" "property_signature" "required_parameter"))
   ("import_specifier" ("named_imports"))
   ("pair" ("object"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_assignment_pattern" "object_pattern"))
   ("object_assignment_pattern" ("object_pattern"))
   ("pair_pattern" ("object_pattern"))
   ("call_signature" ("object_type"))
   ("construct_signature" ("object_type"))
   ("property_signature" ("object_type"))
   ("hash_bang_line" ("program"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("escape_sequence" ("template_string" "string"))
   ("string_fragment" ("string"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_body" ("switch_statement"))
   ("template_type" ("template_literal_type"))
   ("template_substitution" ("template_string"))
   ("finally_clause" ("try_statement"))
   ("catch_clause" ("try_statement"))
   ("rest_type" ("tuple_type"))
   ("optional_type" ("tuple_type"))
   ("constraint" ("type_parameter"))
   ("default_type" ("type_parameter"))
   ("type_parameter" ("type_parameters"))
  )
)
;; END Inverse production rules for tsx

;; START Production rules for css
(defconst combobulate-rules-css
 '(("adjacent_sibling_selector" (:*unnamed* ("sibling_selector" "child_selector" "descendant_selector" "nesting_selector" "pseudo_class_selector" "id_selector" "attribute_selector" "class_selector" "tag_name" "pseudo_element_selector" "adjacent_sibling_selector" "universal_selector" "string_value")))
 ("arguments" (:*unnamed* ("child_selector" "pseudo_class_selector" "id_selector" "attribute_selector" "tag_name" "call_expression" "class_selector" "universal_selector" "plain_value" "adjacent_sibling_selector" "string_value" "binary_expression" "color_value" "sibling_selector" "descendant_selector" "nesting_selector" "parenthesized_value" "integer_value" "pseudo_element_selector" "float_value")))
 ("at_rule" (:*unnamed* ("unary_query" "keyword_query" "block" "at_keyword" "parenthesized_query" "selector_query" "feature_query" "binary_query")))
 ("attribute_selector" (:*unnamed* ("child_selector" "pseudo_class_selector" "id_selector" "attribute_selector" "tag_name" "call_expression" "class_selector" "universal_selector" "plain_value" "adjacent_sibling_selector" "string_value" "binary_expression" "color_value" "sibling_selector" "descendant_selector" "nesting_selector" "parenthesized_value" "attribute_name" "integer_value" "pseudo_element_selector" "float_value")))
 ("binary_expression" (:*unnamed* ("parenthesized_value" "call_expression" "integer_value" "float_value" "plain_value" "string_value" "binary_expression" "color_value")))
 ("binary_query" (:*unnamed* ("parenthesized_query" "unary_query" "selector_query" "feature_query" "binary_query" "keyword_query")))
 ("block" (:*unnamed* ("media_statement" "import_statement" "keyframes_statement" "namespace_statement" "declaration" "supports_statement" "rule_set" "charset_statement" "at_rule")))
 ("call_expression" (:*unnamed* ("arguments" "function_name")))
 ("charset_statement" (:*unnamed* ("parenthesized_value" "call_expression" "integer_value" "float_value" "plain_value" "string_value" "binary_expression" "color_value")))
 ("child_selector" (:*unnamed* ("sibling_selector" "child_selector" "descendant_selector" "nesting_selector" "pseudo_class_selector" "id_selector" "attribute_selector" "class_selector" "tag_name" "pseudo_element_selector" "adjacent_sibling_selector" "universal_selector" "string_value")))
 ("class_selector" (:*unnamed* ("sibling_selector" "child_selector" "descendant_selector" "nesting_selector" "pseudo_class_selector" "id_selector" "attribute_selector" "class_selector" "tag_name" "pseudo_element_selector" "adjacent_sibling_selector" "universal_selector" "string_value" "class_name")))
 ("declaration" (:*unnamed* ("important" "parenthesized_value" "call_expression" "integer_value" "float_value" "plain_value" "string_value" "property_name" "binary_expression" "color_value")))
 ("descendant_selector" (:*unnamed* ("sibling_selector" "child_selector" "descendant_selector" "nesting_selector" "pseudo_class_selector" "id_selector" "attribute_selector" "class_selector" "tag_name" "pseudo_element_selector" "adjacent_sibling_selector" "universal_selector" "string_value")))
 ("feature_query" (:*unnamed* ("parenthesized_value" "call_expression" "feature_name" "integer_value" "float_value" "plain_value" "string_value" "binary_expression" "color_value")))
 ("float_value" (:*unnamed* ("unit")))
 ("id_selector" (:*unnamed* ("sibling_selector" "child_selector" "descendant_selector" "nesting_selector" "pseudo_class_selector" "id_selector" "attribute_selector" "class_selector" "tag_name" "pseudo_element_selector" "adjacent_sibling_selector" "universal_selector" "string_value" "id_name")))
 ("import_statement" (:*unnamed* ("string_value" "unary_query" "parenthesized_value" "keyword_query" "call_expression" "integer_value" "parenthesized_query" "float_value" "plain_value" "selector_query" "feature_query" "binary_expression" "binary_query" "color_value")))
 ("integer_value" (:*unnamed* ("unit")))
 ("keyframe_block" (:*unnamed* ("integer_value" "from" "block" "to")))
 ("keyframe_block_list" (:*unnamed* ("keyframe_block")))
 ("keyframes_statement" (:*unnamed* ("keyframes_name" "keyframe_block_list" "at_keyword")))
 ("media_statement" (:*unnamed* ("parenthesized_query" "unary_query" "selector_query" "feature_query" "binary_query" "keyword_query" "block")))
 ("namespace_statement" (:*unnamed* ("namespace_name" "call_expression" "string_value")))
 ("parenthesized_query" (:*unnamed* ("parenthesized_query" "unary_query" "selector_query" "feature_query" "binary_query" "keyword_query")))
 ("parenthesized_value" (:*unnamed* ("parenthesized_value" "call_expression" "integer_value" "float_value" "plain_value" "string_value" "binary_expression" "color_value")))
 ("pseudo_class_selector" (:*unnamed* ("sibling_selector" "child_selector" "descendant_selector" "nesting_selector" "pseudo_class_selector" "id_selector" "attribute_selector" "class_selector" "tag_name" "arguments" "pseudo_element_selector" "adjacent_sibling_selector" "universal_selector" "string_value" "class_name")))
 ("pseudo_element_selector" (:*unnamed* ("sibling_selector" "child_selector" "descendant_selector" "nesting_selector" "pseudo_class_selector" "id_selector" "attribute_selector" "class_selector" "tag_name" "pseudo_element_selector" "adjacent_sibling_selector" "universal_selector" "string_value")))
 ("rule_set" (:*unnamed* ("block" "selectors")))
 ("selector_query" (:*unnamed* ("sibling_selector" "child_selector" "descendant_selector" "nesting_selector" "pseudo_class_selector" "id_selector" "attribute_selector" "class_selector" "tag_name" "pseudo_element_selector" "adjacent_sibling_selector" "universal_selector" "string_value")))
 ("selectors" (:*unnamed* ("sibling_selector" "child_selector" "descendant_selector" "nesting_selector" "pseudo_class_selector" "id_selector" "attribute_selector" "class_selector" "tag_name" "pseudo_element_selector" "adjacent_sibling_selector" "universal_selector" "string_value")))
 ("sibling_selector" (:*unnamed* ("sibling_selector" "child_selector" "descendant_selector" "nesting_selector" "pseudo_class_selector" "id_selector" "attribute_selector" "class_selector" "tag_name" "pseudo_element_selector" "adjacent_sibling_selector" "universal_selector" "string_value")))
 ("stylesheet" (:*unnamed* ("media_statement" "import_statement" "keyframes_statement" "namespace_statement" "declaration" "supports_statement" "rule_set" "charset_statement" "at_rule")))
 ("supports_statement" (:*unnamed* ("parenthesized_query" "unary_query" "selector_query" "feature_query" "binary_query" "keyword_query" "block")))
 ("unary_query" (:*unnamed* ("parenthesized_query" "unary_query" "selector_query" "feature_query" "binary_query" "keyword_query")))
))
;; END Production rules for css
;; START Inverse production rules for css
(defconst combobulate-rules-css-inverted
 '(("sibling_selector" ("sibling_selector" "child_selector" "descendant_selector" "pseudo_class_selector" "selectors" "id_selector" "attribute_selector" "class_selector" "arguments" "pseudo_element_selector" "adjacent_sibling_selector" "selector_query"))
   ("child_selector" ("sibling_selector" "child_selector" "descendant_selector" "pseudo_class_selector" "selectors" "id_selector" "attribute_selector" "class_selector" "arguments" "pseudo_element_selector" "adjacent_sibling_selector" "selector_query"))
   ("descendant_selector" ("sibling_selector" "child_selector" "descendant_selector" "pseudo_class_selector" "selectors" "id_selector" "attribute_selector" "class_selector" "arguments" "pseudo_element_selector" "adjacent_sibling_selector" "selector_query"))
   ("nesting_selector" ("sibling_selector" "child_selector" "descendant_selector" "pseudo_class_selector" "selectors" "id_selector" "attribute_selector" "class_selector" "arguments" "pseudo_element_selector" "adjacent_sibling_selector" "selector_query"))
   ("pseudo_class_selector" ("sibling_selector" "child_selector" "descendant_selector" "pseudo_class_selector" "selectors" "id_selector" "attribute_selector" "class_selector" "arguments" "pseudo_element_selector" "adjacent_sibling_selector" "selector_query"))
   ("id_selector" ("sibling_selector" "child_selector" "descendant_selector" "pseudo_class_selector" "selectors" "id_selector" "attribute_selector" "class_selector" "arguments" "pseudo_element_selector" "adjacent_sibling_selector" "selector_query"))
   ("attribute_selector" ("sibling_selector" "child_selector" "descendant_selector" "pseudo_class_selector" "selectors" "id_selector" "attribute_selector" "class_selector" "arguments" "pseudo_element_selector" "adjacent_sibling_selector" "selector_query"))
   ("class_selector" ("sibling_selector" "child_selector" "descendant_selector" "pseudo_class_selector" "selectors" "id_selector" "attribute_selector" "class_selector" "arguments" "pseudo_element_selector" "adjacent_sibling_selector" "selector_query"))
   ("tag_name" ("sibling_selector" "child_selector" "descendant_selector" "pseudo_class_selector" "selectors" "id_selector" "attribute_selector" "class_selector" "arguments" "pseudo_element_selector" "adjacent_sibling_selector" "selector_query"))
   ("pseudo_element_selector" ("sibling_selector" "child_selector" "descendant_selector" "pseudo_class_selector" "selectors" "id_selector" "attribute_selector" "class_selector" "arguments" "pseudo_element_selector" "adjacent_sibling_selector" "selector_query"))
   ("adjacent_sibling_selector" ("sibling_selector" "child_selector" "descendant_selector" "pseudo_class_selector" "selectors" "id_selector" "attribute_selector" "class_selector" "arguments" "pseudo_element_selector" "adjacent_sibling_selector" "selector_query"))
   ("universal_selector" ("sibling_selector" "child_selector" "descendant_selector" "pseudo_class_selector" "selectors" "id_selector" "attribute_selector" "class_selector" "arguments" "pseudo_element_selector" "adjacent_sibling_selector" "selector_query"))
   ("string_value" ("child_selector" "selectors" "pseudo_class_selector" "attribute_selector" "feature_query" "binary_expression" "arguments" "pseudo_element_selector" "import_statement" "declaration" "id_selector" "class_selector" "adjacent_sibling_selector" "selector_query" "sibling_selector" "descendant_selector" "namespace_statement" "parenthesized_value" "charset_statement"))
   ("call_expression" ("import_statement" "namespace_statement" "declaration" "parenthesized_value" "attribute_selector" "arguments" "charset_statement" "feature_query" "binary_expression"))
   ("plain_value" ("import_statement" "declaration" "parenthesized_value" "attribute_selector" "arguments" "charset_statement" "feature_query" "binary_expression"))
   ("binary_expression" ("import_statement" "declaration" "parenthesized_value" "attribute_selector" "arguments" "charset_statement" "feature_query" "binary_expression"))
   ("color_value" ("import_statement" "declaration" "parenthesized_value" "attribute_selector" "arguments" "charset_statement" "feature_query" "binary_expression"))
   ("parenthesized_value" ("import_statement" "declaration" "parenthesized_value" "attribute_selector" "arguments" "charset_statement" "feature_query" "binary_expression"))
   ("integer_value" ("import_statement" "declaration" "parenthesized_value" "attribute_selector" "arguments" "charset_statement" "feature_query" "binary_expression" "keyframe_block"))
   ("float_value" ("import_statement" "declaration" "parenthesized_value" "attribute_selector" "arguments" "charset_statement" "feature_query" "binary_expression"))
   ("unary_query" ("media_statement" "import_statement" "unary_query" "supports_statement" "parenthesized_query" "binary_query" "at_rule"))
   ("keyword_query" ("media_statement" "import_statement" "unary_query" "supports_statement" "parenthesized_query" "binary_query" "at_rule"))
   ("block" ("media_statement" "supports_statement" "rule_set" "keyframe_block" "at_rule"))
   ("at_keyword" ("keyframes_statement" "at_rule"))
   ("parenthesized_query" ("media_statement" "import_statement" "unary_query" "supports_statement" "parenthesized_query" "binary_query" "at_rule"))
   ("selector_query" ("media_statement" "import_statement" "unary_query" "supports_statement" "parenthesized_query" "binary_query" "at_rule"))
   ("feature_query" ("media_statement" "import_statement" "unary_query" "supports_statement" "parenthesized_query" "binary_query" "at_rule"))
   ("binary_query" ("media_statement" "import_statement" "unary_query" "supports_statement" "parenthesized_query" "binary_query" "at_rule"))
   ("attribute_name" ("attribute_selector"))
   ("media_statement" ("stylesheet" "block"))
   ("import_statement" ("stylesheet" "block"))
   ("keyframes_statement" ("stylesheet" "block"))
   ("namespace_statement" ("stylesheet" "block"))
   ("declaration" ("stylesheet" "block"))
   ("supports_statement" ("stylesheet" "block"))
   ("rule_set" ("stylesheet" "block"))
   ("charset_statement" ("stylesheet" "block"))
   ("at_rule" ("stylesheet" "block"))
   ("arguments" ("call_expression" "pseudo_class_selector"))
   ("function_name" ("call_expression"))
   ("class_name" ("class_selector" "pseudo_class_selector"))
   ("important" ("declaration"))
   ("property_name" ("declaration"))
   ("feature_name" ("feature_query"))
   ("unit" ("integer_value" "float_value"))
   ("id_name" ("id_selector"))
   ("from" ("keyframe_block"))
   ("to" ("keyframe_block"))
   ("keyframe_block" ("keyframe_block_list"))
   ("keyframes_name" ("keyframes_statement"))
   ("keyframe_block_list" ("keyframes_statement"))
   ("namespace_name" ("namespace_statement"))
   ("selectors" ("rule_set"))
  )
)
;; END Inverse production rules for css

;; START Production rules for typescript
(defconst combobulate-rules-typescript
 '(("_primary_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "type_query" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "intersection_type" "object_type")))
 ("declaration" (:*unnamed* ("ambient_declaration" "generator_function_declaration" "type_alias_declaration" "import_alias" "variable_declaration" "class_declaration" "internal_module" "function_declaration" "abstract_class_declaration" "function_signature" "enum_declaration" "interface_declaration" "module" "lexical_declaration")))
 ("expression" (:*unnamed* ("augmented_assignment_expression" "ternary_expression" "assignment_expression" "primary_expression" "glimmer_template" "internal_module" "new_expression" "await_expression" "satisfies_expression" "update_expression" "as_expression" "yield_expression" "binary_expression" "type_assertion" "unary_expression")))
 ("pattern" (:*unnamed* ("subscript_expression" "identifier" "non_null_expression" "array_pattern" "member_expression" "rest_pattern" "undefined" "object_pattern")))
 ("primary_expression" (:*unnamed* ("arrow_function" "meta_property" "function" "false" "array" "call_expression" "member_expression" "undefined" "generator_function" "regex" "super" "object" "null" "identifier" "non_null_expression" "subscript_expression" "template_string" "true" "parenthesized_expression" "string" "import" "class" "this" "number")))
 ("statement" (:*unnamed* ("import_statement" "expression_statement" "declaration" "for_statement" "throw_statement" "if_statement" "export_statement" "try_statement" "with_statement" "for_in_statement" "return_statement" "empty_statement" "labeled_statement" "break_statement" "debugger_statement" "do_statement" "while_statement" "statement_block" "switch_statement" "continue_statement")))
 ("abstract_class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("abstract_method_signature" (:*unnamed* ("accessibility_modifier") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("ambient_declaration" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "declaration" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type" "property_identifier" "statement_block")))
 ("arguments" (:*unnamed* ("expression" "spread_element")))
 ("array" (:*unnamed* ("expression" "spread_element")))
 ("array_pattern" (:*unnamed* ("assignment_pattern" "pattern")))
 ("array_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "type_query" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "intersection_type" "object_type")))
 ("arrow_function" (:body ("statement_block" "expression") :parameter ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("as_expression" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "expression" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("asserts" (:*unnamed* ("identifier" "type_predicate" "this")))
 ("assignment_expression" (:left ("subscript_expression" "identifier" "non_null_expression" "array_pattern" "member_expression" "undefined" "object_pattern" "parenthesized_expression") :right ("expression")))
 ("assignment_pattern" (:left ("pattern") :right ("expression")))
 ("augmented_assignment_expression" (:left ("subscript_expression" "identifier" "non_null_expression" "parenthesized_expression" "member_expression") :operator nil :right ("expression")))
 ("await_expression" (:*unnamed* ("expression")))
 ("binary_expression" (:left ("expression") :operator nil :right ("expression")))
 ("break_statement" (:label ("statement_identifier")))
 ("call_expression" (:arguments ("arguments" "template_string") :function ("expression") :type_arguments ("type_arguments")))
 ("call_signature" (:parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("catch_clause" (:body ("statement_block") :parameter ("identifier" "array_pattern" "object_pattern") :type ("type_annotation")))
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("class_body" (:*unnamed* ("method_definition" "method_signature" "abstract_method_signature" "decorator" "class_static_block" "public_field_definition" "index_signature")))
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("class_heritage" (:*unnamed* ("extends_clause" "implements_clause")))
 ("class_static_block" (:body ("statement_block")))
 ("computed_property_name" (:*unnamed* ("expression")))
 ("conditional_type" (:alternative ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :consequence ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :left ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :right ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("constraint" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("construct_signature" (:parameters ("formal_parameters") :type ("type_annotation") :type_parameters ("type_parameters")))
 ("constructor_type" (:parameters ("formal_parameters") :type ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :type_parameters ("type_parameters")))
 ("continue_statement" (:label ("statement_identifier")))
 ("decorator" (:*unnamed* ("identifier" "call_expression" "member_expression")))
 ("default_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("do_statement" (:body ("statement") :condition ("parenthesized_expression")))
 ("else_clause" (:*unnamed* ("statement")))
 ("enum_assignment" (:name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :value ("expression")))
 ("enum_body" (:*unnamed* ("enum_assignment") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier")))
 ("enum_declaration" (:body ("enum_body") :name ("identifier")))
 ("export_clause" (:*unnamed* ("export_specifier")))
 ("export_specifier" (:alias ("identifier" "string") :name ("identifier" "string")))
 ("export_statement" (:*unnamed* ("identifier" "expression" "export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression")))
 ("expression_statement" (:*unnamed* ("sequence_expression" "expression")))
 ("extends_clause" (:type_arguments ("type_arguments") :value ("expression")))
 ("extends_type_clause" (:type ("type_identifier" "nested_type_identifier" "generic_type")))
 ("finally_clause" (:body ("statement_block")))
 ("flow_maybe_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "type_query" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "intersection_type" "object_type")))
 ("for_in_statement" (:body ("statement") :kind nil :left ("subscript_expression" "identifier" "non_null_expression" "array_pattern" "member_expression" "undefined" "object_pattern" "parenthesized_expression") :operator nil :right ("sequence_expression" "expression") :value ("expression")))
 ("for_statement" (:body ("statement") :condition ("empty_statement" "expression_statement") :increment ("sequence_expression" "expression") :initializer ("variable_declaration" "empty_statement" "expression_statement" "lexical_declaration")))
 ("formal_parameters" (:*unnamed* ("optional_parameter" "required_parameter")))
 ("function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("function_signature" (:name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("function_type" (:parameters ("formal_parameters") :return_type ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "type_predicate" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :type_parameters ("type_parameters")))
 ("generator_function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("generator_function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("generic_type" (:name ("nested_type_identifier" "type_identifier") :type_arguments ("type_arguments")))
 ("glimmer_template" (:close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag")))
 ("if_statement" (:alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement")))
 ("implements_clause" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("import_alias" (:*unnamed* ("nested_identifier" "identifier")))
 ("import_clause" (:*unnamed* ("identifier" "named_imports" "namespace_import")))
 ("import_require_clause" (:*unnamed* ("identifier") :source ("string")))
 ("import_specifier" (:alias ("identifier") :name ("identifier" "string")))
 ("import_statement" (:*unnamed* ("import_require_clause" "import_clause") :source ("string")))
 ("index_signature" (:*unnamed* ("mapped_type_clause") :index_type ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :name ("identifier") :sign nil :type ("omitting_type_annotation" "type_annotation" "opting_type_annotation")))
 ("index_type_query" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "type_query" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "intersection_type" "object_type")))
 ("infer_type" (:*unnamed* ("type_identifier")))
 ("interface_declaration" (:*unnamed* ("extends_type_clause") :body ("object_type") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("internal_module" (:body ("statement_block") :name ("nested_identifier" "identifier" "string")))
 ("intersection_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("jsx_attribute" (:*unnamed* ("jsx_element" "jsx_self_closing_element" "jsx_fragment" "property_identifier" "jsx_namespace_name" "jsx_expression" "string")))
 ("jsx_closing_element" (:name ("nested_identifier" "identifier" "jsx_namespace_name")))
 ("jsx_element" (:*unnamed* ("jsx_element" "jsx_text" "jsx_self_closing_element" "jsx_fragment" "jsx_expression") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element")))
 ("jsx_expression" (:*unnamed* ("sequence_expression" "expression" "spread_element")))
 ("jsx_fragment" (:*unnamed* ("jsx_element" "jsx_text" "jsx_self_closing_element" "jsx_fragment" "jsx_expression")))
 ("jsx_namespace_name" (:*unnamed* ("identifier")))
 ("jsx_opening_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("nested_identifier" "identifier" "jsx_namespace_name") :type_arguments ("type_arguments")))
 ("jsx_self_closing_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("nested_identifier" "identifier" "jsx_namespace_name") :type_arguments ("type_arguments")))
 ("labeled_statement" (:body ("statement") :label ("statement_identifier")))
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil))
 ("literal_type" (:*unnamed* ("null" "string" "number" "undefined" "true" "false" "unary_expression")))
 ("lookup_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("mapped_type_clause" (:alias ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type") :name ("type_identifier") :type ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("member_expression" (:object ("expression") :optional_chain ("optional_chain") :property ("property_identifier" "private_property_identifier")))
 ("method_definition" (:*unnamed* ("override_modifier" "accessibility_modifier") :body ("statement_block") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("method_signature" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "asserts" "type_annotation") :type_parameters ("type_parameters")))
 ("module" (:body ("statement_block") :name ("nested_identifier" "identifier" "string")))
 ("named_imports" (:*unnamed* ("import_specifier")))
 ("namespace_export" (:*unnamed* ("identifier" "string")))
 ("namespace_import" (:*unnamed* ("identifier")))
 ("nested_identifier" (:*unnamed* ("nested_identifier" "identifier")))
 ("nested_type_identifier" (:module ("nested_identifier" "identifier") :name ("type_identifier")))
 ("new_expression" (:arguments ("arguments") :constructor ("primary_expression") :type_arguments ("type_arguments")))
 ("non_null_expression" (:*unnamed* ("expression")))
 ("object" (:*unnamed* ("method_definition" "pair" "shorthand_property_identifier" "spread_element")))
 ("object_assignment_pattern" (:left ("array_pattern" "shorthand_property_identifier_pattern" "object_pattern") :right ("expression")))
 ("object_pattern" (:*unnamed* ("rest_pattern" "shorthand_property_identifier_pattern" "object_assignment_pattern" "pair_pattern")))
 ("object_type" (:*unnamed* ("method_signature" "export_statement" "index_signature" "call_signature" "construct_signature" "property_signature")))
 ("omitting_type_annotation" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("opting_type_annotation" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("optional_parameter" (:*unnamed* ("override_modifier" "accessibility_modifier") :decorator ("decorator") :name ("identifier") :pattern ("this" "pattern") :type ("type_annotation") :value ("expression")))
 ("optional_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("pair" (:key ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :value ("expression")))
 ("pair_pattern" (:key ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :value ("assignment_pattern" "pattern")))
 ("parenthesized_expression" (:*unnamed* ("sequence_expression" "expression") :type ("type_annotation")))
 ("parenthesized_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("program" (:*unnamed* ("hash_bang_line" "statement")))
 ("property_signature" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :type ("type_annotation")))
 ("public_field_definition" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :type ("type_annotation") :value ("expression")))
 ("readonly_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("regex" (:flags ("regex_flags") :pattern ("regex_pattern")))
 ("required_parameter" (:*unnamed* ("override_modifier" "accessibility_modifier") :decorator ("decorator") :name ("rest_pattern" "identifier") :pattern ("this" "pattern") :type ("type_annotation") :value ("expression")))
 ("rest_pattern" (:*unnamed* ("subscript_expression" "identifier" "non_null_expression" "array_pattern" "undefined" "object_pattern" "member_expression")))
 ("rest_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("return_statement" (:*unnamed* ("sequence_expression" "expression")))
 ("satisfies_expression" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "expression" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("sequence_expression" (:left ("expression") :right ("sequence_expression" "expression")))
 ("spread_element" (:*unnamed* ("expression")))
 ("statement_block" (:*unnamed* ("statement")))
 ("string" (:*unnamed* ("escape_sequence" "string_fragment")))
 ("subscript_expression" (:index ("sequence_expression" "number" "expression" "predefined_type" "string") :object ("expression") :optional_chain ("optional_chain")))
 ("switch_body" (:*unnamed* ("switch_case" "switch_default")))
 ("switch_case" (:body ("statement") :value ("sequence_expression" "expression")))
 ("switch_default" (:body ("statement")))
 ("switch_statement" (:body ("switch_body") :value ("parenthesized_expression")))
 ("template_literal_type" (:*unnamed* ("template_type")))
 ("template_string" (:*unnamed* ("escape_sequence" "template_substitution")))
 ("template_substitution" (:*unnamed* ("sequence_expression" "expression")))
 ("template_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "type_query" "infer_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "intersection_type" "object_type")))
 ("ternary_expression" (:alternative ("expression") :condition ("expression") :consequence ("expression")))
 ("throw_statement" (:*unnamed* ("sequence_expression" "expression")))
 ("try_statement" (:body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause")))
 ("tuple_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "optional_parameter" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "rest_type" "object_type" "optional_type" "required_parameter")))
 ("type_alias_declaration" (:name ("type_identifier") :type_parameters ("type_parameters") :value ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("type_annotation" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("type_arguments" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("type_assertion" (:*unnamed* ("expression" "type_arguments")))
 ("type_parameter" (:constraint ("constraint") :name ("type_identifier") :value ("default_type")))
 ("type_parameters" (:*unnamed* ("type_parameter")))
 ("type_predicate" (:name ("identifier" "this") :type ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("type_predicate_annotation" (:*unnamed* ("type_predicate")))
 ("type_query" (:*unnamed* ("subscript_expression" "identifier" "call_expression" "member_expression")))
 ("unary_expression" (:argument ("expression" "number") :operator nil))
 ("union_type" (:*unnamed* ("flow_maybe_type" "index_type_query" "parenthesized_type" "lookup_type" "tuple_type" "conditional_type" "literal_type" "array_type" "generic_type" "union_type" "predefined_type" "function_type" "type_query" "infer_type" "readonly_type" "this_type" "nested_type_identifier" "existential_type" "type_identifier" "template_literal_type" "constructor_type" "intersection_type" "object_type")))
 ("update_expression" (:argument ("expression") :operator nil))
 ("variable_declaration" (:*unnamed* ("variable_declarator")))
 ("variable_declarator" (:name ("identifier" "array_pattern" "object_pattern") :type ("type_annotation") :value ("expression")))
 ("while_statement" (:body ("statement") :condition ("parenthesized_expression")))
 ("with_statement" (:body ("statement") :object ("parenthesized_expression")))
 ("yield_expression" (:*unnamed* ("expression")))
))
;; END Production rules for typescript
;; START Inverse production rules for typescript
(defconst combobulate-rules-typescript-inverted
 '(("flow_maybe_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("index_type_query" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("parenthesized_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("lookup_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("tuple_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("conditional_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("literal_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("array_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("generic_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "extends_type_clause" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("union_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("predefined_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "subscript_expression" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("type_query" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("this_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("nested_type_identifier" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "generic_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "extends_type_clause" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("existential_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("type_identifier" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "class_declaration" "_primary_type" "array_type" "generic_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "type_parameter" "extends_type_clause" "constructor_type" "nested_type_identifier" "optional_type" "abstract_class_declaration" "type_arguments" "mapped_type_clause" "class" "interface_declaration" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "infer_type" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("template_literal_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("intersection_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("object_type" ("index_type_query" "parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "_primary_type" "array_type" "omitting_type_annotation" "satisfies_expression" "union_type" "function_type" "readonly_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "interface_declaration" "template_type" "flow_maybe_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("ambient_declaration" ("declaration"))
   ("generator_function_declaration" ("declaration"))
   ("type_alias_declaration" ("declaration"))
   ("import_alias" ("declaration"))
   ("variable_declaration" ("declaration" "for_statement"))
   ("class_declaration" ("declaration"))
   ("internal_module" ("declaration" "expression"))
   ("function_declaration" ("declaration"))
   ("abstract_class_declaration" ("declaration"))
   ("function_signature" ("declaration"))
   ("enum_declaration" ("declaration"))
   ("interface_declaration" ("declaration"))
   ("module" ("declaration"))
   ("lexical_declaration" ("declaration" "for_statement"))
   ("augmented_assignment_expression" ("expression"))
   ("ternary_expression" ("expression"))
   ("assignment_expression" ("expression"))
   ("primary_expression" ("expression" "new_expression"))
   ("glimmer_template" ("expression"))
   ("new_expression" ("expression"))
   ("await_expression" ("expression"))
   ("satisfies_expression" ("expression"))
   ("update_expression" ("expression"))
   ("as_expression" ("expression"))
   ("yield_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("type_assertion" ("expression"))
   ("unary_expression" ("expression" "literal_type"))
   ("subscript_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "rest_pattern" "pattern" "type_query"))
   ("identifier" ("jsx_namespace_name" "pattern" "jsx_closing_element" "decorator" "optional_parameter" "type_predicate" "catch_clause" "nested_type_identifier" "namespace_import" "import_require_clause" "function_declaration" "function_signature" "asserts" "import_specifier" "arrow_function" "import_clause" "import_alias" "internal_module" "rest_pattern" "export_statement" "generator_function" "index_signature" "generator_function_declaration" "type_query" "module" "for_in_statement" "augmented_assignment_expression" "jsx_self_closing_element" "nested_identifier" "export_specifier" "variable_declarator" "assignment_expression" "primary_expression" "jsx_opening_element" "namespace_export" "enum_declaration" "function" "required_parameter"))
   ("non_null_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "rest_pattern" "pattern"))
   ("array_pattern" ("catch_clause" "for_in_statement" "variable_declarator" "assignment_expression" "rest_pattern" "pattern" "object_assignment_pattern"))
   ("member_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "rest_pattern" "pattern" "decorator" "type_query"))
   ("rest_pattern" ("required_parameter" "object_pattern" "pattern"))
   ("undefined" ("for_in_statement" "assignment_expression" "primary_expression" "literal_type" "rest_pattern" "pattern"))
   ("object_pattern" ("catch_clause" "for_in_statement" "variable_declarator" "assignment_expression" "rest_pattern" "pattern" "object_assignment_pattern"))
   ("arrow_function" ("primary_expression"))
   ("meta_property" ("primary_expression"))
   ("function" ("primary_expression"))
   ("false" ("literal_type" "primary_expression"))
   ("array" ("primary_expression"))
   ("call_expression" ("decorator" "type_query" "primary_expression"))
   ("generator_function" ("primary_expression"))
   ("regex" ("primary_expression"))
   ("super" ("primary_expression"))
   ("object" ("primary_expression"))
   ("null" ("literal_type" "primary_expression"))
   ("template_string" ("call_expression" "primary_expression"))
   ("true" ("literal_type" "primary_expression"))
   ("parenthesized_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "if_statement" "with_statement" "do_statement" "while_statement" "switch_statement"))
   ("string" ("method_signature" "pair_pattern" "literal_type" "pair" "enum_assignment" "import_require_clause" "jsx_attribute" "abstract_method_signature" "import_specifier" "enum_body" "import_statement" "internal_module" "export_statement" "property_signature" "module" "method_definition" "subscript_expression" "export_specifier" "primary_expression" "namespace_export" "public_field_definition"))
   ("import" ("primary_expression"))
   ("class" ("primary_expression"))
   ("this" ("primary_expression" "type_predicate" "asserts" "optional_parameter" "required_parameter"))
   ("number" ("method_definition" "method_signature" "subscript_expression" "enum_body" "pair_pattern" "primary_expression" "literal_type" "pair" "abstract_method_signature" "public_field_definition" "property_signature" "unary_expression" "enum_assignment"))
   ("import_statement" ("statement"))
   ("expression_statement" ("for_statement" "statement"))
   ("declaration" ("ambient_declaration" "export_statement" "statement"))
   ("for_statement" ("statement"))
   ("throw_statement" ("statement"))
   ("if_statement" ("statement"))
   ("export_statement" ("object_type" "statement"))
   ("try_statement" ("statement"))
   ("with_statement" ("statement"))
   ("for_in_statement" ("statement"))
   ("return_statement" ("statement"))
   ("empty_statement" ("for_statement" "statement"))
   ("labeled_statement" ("statement"))
   ("break_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("do_statement" ("statement"))
   ("while_statement" ("statement"))
   ("statement_block" ("ambient_declaration" "arrow_function" "catch_clause" "method_definition" "class_static_block" "internal_module" "statement" "function_declaration" "generator_function" "finally_clause" "generator_function_declaration" "function" "try_statement" "module"))
   ("switch_statement" ("statement"))
   ("continue_statement" ("statement"))
   ("class_heritage" ("class" "class_declaration" "abstract_class_declaration"))
   ("class_body" ("class" "class_declaration" "abstract_class_declaration"))
   ("decorator" ("class_body" "class_declaration" "optional_parameter" "export_statement" "abstract_class_declaration" "class" "required_parameter"))
   ("type_parameters" ("method_definition" "arrow_function" "method_signature" "type_alias_declaration" "interface_declaration" "constructor_type" "function" "construct_signature" "class_declaration" "abstract_method_signature" "function_declaration" "abstract_class_declaration" "function_signature" "generator_function" "generator_function_declaration" "class" "call_signature" "function_type"))
   ("accessibility_modifier" ("method_definition" "method_signature" "abstract_method_signature" "public_field_definition" "optional_parameter" "property_signature" "required_parameter"))
   ("property_identifier" ("ambient_declaration" "method_definition" "method_signature" "enum_body" "pair_pattern" "jsx_attribute" "member_expression" "pair" "abstract_method_signature" "public_field_definition" "property_signature" "enum_assignment"))
   ("computed_property_name" ("method_definition" "method_signature" "enum_body" "pair_pattern" "pair" "abstract_method_signature" "public_field_definition" "property_signature" "enum_assignment"))
   ("private_property_identifier" ("method_definition" "method_signature" "enum_body" "pair_pattern" "member_expression" "pair" "abstract_method_signature" "public_field_definition" "property_signature" "enum_assignment"))
   ("formal_parameters" ("method_definition" "arrow_function" "method_signature" "constructor_type" "construct_signature" "abstract_method_signature" "function_declaration" "generator_function" "function_signature" "generator_function_declaration" "function" "call_signature" "function_type"))
   ("type_predicate_annotation" ("method_definition" "arrow_function" "method_signature" "function_declaration" "abstract_method_signature" "generator_function" "function_signature" "generator_function_declaration" "function" "call_signature"))
   ("asserts" ("method_definition" "arrow_function" "method_signature" "function_declaration" "abstract_method_signature" "generator_function" "function_signature" "generator_function_declaration" "function" "call_signature"))
   ("type_annotation" ("method_signature" "construct_signature" "optional_parameter" "catch_clause" "abstract_method_signature" "function_declaration" "function_signature" "call_signature" "arrow_function" "generator_function" "index_signature" "generator_function_declaration" "property_signature" "method_definition" "variable_declarator" "public_field_definition" "function" "parenthesized_expression" "required_parameter"))
   ("function_type" ("parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "omitting_type_annotation" "satisfies_expression" "union_type" "readonly_type" "function_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("infer_type" ("parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "omitting_type_annotation" "satisfies_expression" "union_type" "readonly_type" "function_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "template_type" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("readonly_type" ("parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "omitting_type_annotation" "satisfies_expression" "union_type" "readonly_type" "function_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("constructor_type" ("parenthesized_type" "tuple_type" "conditional_type" "type_annotation" "omitting_type_annotation" "satisfies_expression" "union_type" "readonly_type" "function_type" "type_predicate" "constructor_type" "optional_type" "type_arguments" "mapped_type_clause" "lookup_type" "type_alias_declaration" "as_expression" "index_signature" "constraint" "ambient_declaration" "rest_type" "opting_type_annotation" "intersection_type" "default_type" "implements_clause"))
   ("expression" ("sequence_expression" "array" "pair" "satisfies_expression" "binary_expression" "optional_parameter" "enum_assignment" "non_null_expression" "ternary_expression" "return_statement" "jsx_expression" "arguments" "spread_element" "object_assignment_pattern" "type_assertion" "arrow_function" "expression_statement" "computed_property_name" "throw_statement" "for_statement" "call_expression" "member_expression" "await_expression" "export_statement" "switch_case" "update_expression" "as_expression" "yield_expression" "extends_clause" "unary_expression" "for_in_statement" "augmented_assignment_expression" "subscript_expression" "variable_declarator" "assignment_expression" "template_substitution" "assignment_pattern" "public_field_definition" "parenthesized_expression" "required_parameter"))
   ("spread_element" ("arguments" "jsx_expression" "object" "array"))
   ("assignment_pattern" ("array_pattern" "pair_pattern"))
   ("pattern" ("array_pattern" "pair_pattern" "assignment_pattern" "optional_parameter" "required_parameter"))
   ("type_predicate" ("type_predicate_annotation" "asserts" "function_type"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("arguments" ("call_expression" "new_expression"))
   ("type_arguments" ("call_expression" "new_expression" "generic_type" "type_assertion" "jsx_opening_element" "jsx_self_closing_element" "extends_clause"))
   ("method_definition" ("class_body" "object"))
   ("method_signature" ("class_body" "object_type"))
   ("abstract_method_signature" ("class_body"))
   ("class_static_block" ("class_body"))
   ("public_field_definition" ("class_body"))
   ("index_signature" ("class_body" "object_type"))
   ("extends_clause" ("class_heritage"))
   ("implements_clause" ("class_heritage"))
   ("statement" ("for_in_statement" "for_statement" "labeled_statement" "if_statement" "program" "switch_case" "do_statement" "switch_default" "while_statement" "statement_block" "with_statement" "else_clause"))
   ("enum_assignment" ("enum_body"))
   ("enum_body" ("enum_declaration"))
   ("export_specifier" ("export_clause"))
   ("export_clause" ("export_statement"))
   ("namespace_export" ("export_statement"))
   ("sequence_expression" ("for_in_statement" "sequence_expression" "subscript_expression" "expression_statement" "return_statement" "throw_statement" "for_statement" "jsx_expression" "template_substitution" "switch_case" "parenthesized_expression"))
   ("optional_parameter" ("formal_parameters" "tuple_type"))
   ("required_parameter" ("formal_parameters" "tuple_type"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("else_clause" ("if_statement"))
   ("nested_identifier" ("nested_identifier" "import_alias" "nested_type_identifier" "internal_module" "jsx_opening_element" "jsx_closing_element" "jsx_self_closing_element" "module"))
   ("named_imports" ("import_clause"))
   ("namespace_import" ("import_clause"))
   ("import_require_clause" ("import_statement"))
   ("import_clause" ("import_statement"))
   ("mapped_type_clause" ("index_signature"))
   ("omitting_type_annotation" ("index_signature"))
   ("opting_type_annotation" ("index_signature"))
   ("extends_type_clause" ("interface_declaration"))
   ("jsx_element" ("jsx_element" "jsx_fragment" "jsx_attribute"))
   ("jsx_self_closing_element" ("jsx_element" "jsx_fragment" "jsx_attribute"))
   ("jsx_fragment" ("jsx_element" "jsx_fragment" "jsx_attribute"))
   ("jsx_namespace_name" ("jsx_self_closing_element" "jsx_opening_element" "jsx_attribute" "jsx_closing_element"))
   ("jsx_expression" ("jsx_element" "jsx_fragment" "jsx_attribute" "jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_text" ("jsx_element" "jsx_fragment"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_attribute" ("jsx_self_closing_element" "jsx_opening_element"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("optional_chain" ("subscript_expression" "member_expression"))
   ("override_modifier" ("method_definition" "method_signature" "public_field_definition" "optional_parameter" "property_signature" "required_parameter"))
   ("import_specifier" ("named_imports"))
   ("pair" ("object"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_assignment_pattern" "object_pattern"))
   ("object_assignment_pattern" ("object_pattern"))
   ("pair_pattern" ("object_pattern"))
   ("call_signature" ("object_type"))
   ("construct_signature" ("object_type"))
   ("property_signature" ("object_type"))
   ("hash_bang_line" ("program"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("escape_sequence" ("template_string" "string"))
   ("string_fragment" ("string"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_body" ("switch_statement"))
   ("template_type" ("template_literal_type"))
   ("template_substitution" ("template_string"))
   ("finally_clause" ("try_statement"))
   ("catch_clause" ("try_statement"))
   ("rest_type" ("tuple_type"))
   ("optional_type" ("tuple_type"))
   ("constraint" ("type_parameter"))
   ("default_type" ("type_parameter"))
   ("type_parameter" ("type_parameters"))
  )
)
;; END Inverse production rules for typescript

;; START Production rules for javascript
(defconst combobulate-rules-javascript
 '(("declaration" (:*unnamed* ("generator_function_declaration" "function_declaration" "variable_declaration" "class_declaration" "lexical_declaration")))
 ("expression" (:*unnamed* ("jsx_element" "augmented_assignment_expression" "jsx_self_closing_element" "ternary_expression" "jsx_fragment" "assignment_expression" "primary_expression" "glimmer_template" "new_expression" "await_expression" "update_expression" "yield_expression" "binary_expression" "unary_expression")))
 ("pattern" (:*unnamed* ("subscript_expression" "identifier" "array_pattern" "rest_pattern" "undefined" "object_pattern" "member_expression")))
 ("primary_expression" (:*unnamed* ("arrow_function" "meta_property" "function" "false" "array" "call_expression" "member_expression" "undefined" "generator_function" "regex" "super" "object" "null" "identifier" "subscript_expression" "template_string" "true" "parenthesized_expression" "string" "import" "class" "this" "number")))
 ("statement" (:*unnamed* ("import_statement" "expression_statement" "declaration" "for_statement" "throw_statement" "if_statement" "export_statement" "try_statement" "with_statement" "for_in_statement" "return_statement" "empty_statement" "labeled_statement" "break_statement" "debugger_statement" "do_statement" "while_statement" "statement_block" "switch_statement" "continue_statement")))
 ("arguments" (:*unnamed* ("expression" "spread_element")))
 ("array" (:*unnamed* ("expression" "spread_element")))
 ("array_pattern" (:*unnamed* ("assignment_pattern" "pattern")))
 ("arrow_function" (:body ("statement_block" "expression") :parameter ("identifier") :parameters ("formal_parameters")))
 ("assignment_expression" (:left ("subscript_expression" "identifier" "array_pattern" "undefined" "object_pattern" "parenthesized_expression" "member_expression") :right ("expression")))
 ("assignment_pattern" (:left ("pattern") :right ("expression")))
 ("augmented_assignment_expression" (:left ("subscript_expression" "identifier" "parenthesized_expression" "member_expression") :operator nil :right ("expression")))
 ("await_expression" (:*unnamed* ("expression")))
 ("binary_expression" (:left ("expression") :operator nil :right ("expression")))
 ("break_statement" (:label ("statement_identifier")))
 ("call_expression" (:arguments ("arguments" "template_string") :function ("expression") :optional_chain ("optional_chain")))
 ("catch_clause" (:body ("statement_block") :parameter ("identifier" "array_pattern" "object_pattern")))
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier")))
 ("class_body" (:member ("method_definition" "field_definition" "class_static_block") :template ("glimmer_template")))
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier")))
 ("class_heritage" (:*unnamed* ("expression")))
 ("class_static_block" (:body ("statement_block")))
 ("computed_property_name" (:*unnamed* ("expression")))
 ("continue_statement" (:label ("statement_identifier")))
 ("decorator" (:*unnamed* ("identifier" "call_expression" "member_expression")))
 ("do_statement" (:body ("statement") :condition ("parenthesized_expression")))
 ("else_clause" (:*unnamed* ("statement")))
 ("export_clause" (:*unnamed* ("export_specifier")))
 ("export_specifier" (:alias ("identifier" "string") :name ("identifier" "string")))
 ("export_statement" (:*unnamed* ("export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression")))
 ("expression_statement" (:*unnamed* ("sequence_expression" "expression")))
 ("field_definition" (:decorator ("decorator") :property ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :value ("expression")))
 ("finally_clause" (:body ("statement_block")))
 ("for_in_statement" (:body ("statement") :kind nil :left ("subscript_expression" "identifier" "array_pattern" "undefined" "object_pattern" "parenthesized_expression" "member_expression") :operator nil :right ("sequence_expression" "expression") :value ("expression")))
 ("for_statement" (:body ("statement") :condition ("empty_statement" "expression_statement") :increment ("sequence_expression" "expression") :initializer ("variable_declaration" "empty_statement" "expression_statement" "lexical_declaration")))
 ("formal_parameters" (:*unnamed* ("assignment_pattern" "pattern")))
 ("function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters")))
 ("function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters")))
 ("generator_function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters")))
 ("generator_function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters")))
 ("glimmer_template" (:close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag")))
 ("if_statement" (:alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement")))
 ("import_clause" (:*unnamed* ("identifier" "named_imports" "namespace_import")))
 ("import_specifier" (:alias ("identifier") :name ("identifier" "string")))
 ("import_statement" (:*unnamed* ("import_clause") :source ("string")))
 ("jsx_attribute" (:*unnamed* ("jsx_element" "jsx_self_closing_element" "jsx_fragment" "property_identifier" "jsx_namespace_name" "jsx_expression" "string")))
 ("jsx_closing_element" (:name ("nested_identifier" "identifier" "jsx_namespace_name")))
 ("jsx_element" (:*unnamed* ("jsx_element" "jsx_text" "jsx_self_closing_element" "jsx_fragment" "jsx_expression") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element")))
 ("jsx_expression" (:*unnamed* ("sequence_expression" "expression" "spread_element")))
 ("jsx_fragment" (:*unnamed* ("jsx_element" "jsx_text" "jsx_self_closing_element" "jsx_fragment" "jsx_expression")))
 ("jsx_namespace_name" (:*unnamed* ("identifier")))
 ("jsx_opening_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("nested_identifier" "identifier" "jsx_namespace_name")))
 ("jsx_self_closing_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("nested_identifier" "identifier" "jsx_namespace_name")))
 ("labeled_statement" (:body ("statement") :label ("statement_identifier")))
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil))
 ("member_expression" (:object ("expression") :optional_chain ("optional_chain") :property ("property_identifier" "private_property_identifier")))
 ("method_definition" (:body ("statement_block") :decorator ("decorator") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :parameters ("formal_parameters")))
 ("named_imports" (:*unnamed* ("import_specifier")))
 ("namespace_export" (:*unnamed* ("identifier" "string")))
 ("namespace_import" (:*unnamed* ("identifier")))
 ("nested_identifier" (:*unnamed* ("nested_identifier" "identifier")))
 ("new_expression" (:arguments ("arguments") :constructor ("new_expression" "primary_expression")))
 ("object" (:*unnamed* ("method_definition" "pair" "shorthand_property_identifier" "spread_element")))
 ("object_assignment_pattern" (:left ("array_pattern" "shorthand_property_identifier_pattern" "object_pattern") :right ("expression")))
 ("object_pattern" (:*unnamed* ("rest_pattern" "shorthand_property_identifier_pattern" "object_assignment_pattern" "pair_pattern")))
 ("pair" (:key ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :value ("expression")))
 ("pair_pattern" (:key ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :value ("assignment_pattern" "pattern")))
 ("parenthesized_expression" (:*unnamed* ("sequence_expression" "expression")))
 ("program" (:*unnamed* ("hash_bang_line" "statement")))
 ("regex" (:flags ("regex_flags") :pattern ("regex_pattern")))
 ("rest_pattern" (:*unnamed* ("subscript_expression" "identifier" "array_pattern" "undefined" "object_pattern" "member_expression")))
 ("return_statement" (:*unnamed* ("sequence_expression" "expression")))
 ("sequence_expression" (:left ("expression") :right ("sequence_expression" "expression")))
 ("spread_element" (:*unnamed* ("expression")))
 ("statement_block" (:*unnamed* ("statement")))
 ("string" (:*unnamed* ("escape_sequence" "string_fragment")))
 ("subscript_expression" (:index ("sequence_expression" "expression") :object ("expression") :optional_chain ("optional_chain")))
 ("switch_body" (:*unnamed* ("switch_case" "switch_default")))
 ("switch_case" (:body ("statement") :value ("sequence_expression" "expression")))
 ("switch_default" (:body ("statement")))
 ("switch_statement" (:body ("switch_body") :value ("parenthesized_expression")))
 ("template_string" (:*unnamed* ("escape_sequence" "template_substitution")))
 ("template_substitution" (:*unnamed* ("sequence_expression" "expression")))
 ("ternary_expression" (:alternative ("expression") :condition ("expression") :consequence ("expression")))
 ("throw_statement" (:*unnamed* ("sequence_expression" "expression")))
 ("try_statement" (:body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause")))
 ("unary_expression" (:argument ("expression") :operator nil))
 ("update_expression" (:argument ("expression") :operator nil))
 ("variable_declaration" (:*unnamed* ("variable_declarator")))
 ("variable_declarator" (:name ("identifier" "array_pattern" "object_pattern") :value ("expression")))
 ("while_statement" (:body ("statement") :condition ("parenthesized_expression")))
 ("with_statement" (:body ("statement") :object ("parenthesized_expression")))
 ("yield_expression" (:*unnamed* ("expression")))
))
;; END Production rules for javascript
;; START Inverse production rules for javascript
(defconst combobulate-rules-javascript-inverted
 '(("generator_function_declaration" ("declaration"))
   ("function_declaration" ("declaration"))
   ("variable_declaration" ("declaration" "for_statement"))
   ("class_declaration" ("declaration"))
   ("lexical_declaration" ("declaration" "for_statement"))
   ("jsx_element" ("jsx_element" "expression" "jsx_fragment" "jsx_attribute"))
   ("augmented_assignment_expression" ("expression"))
   ("jsx_self_closing_element" ("jsx_element" "expression" "jsx_fragment" "jsx_attribute"))
   ("ternary_expression" ("expression"))
   ("jsx_fragment" ("jsx_element" "expression" "jsx_fragment" "jsx_attribute"))
   ("assignment_expression" ("expression"))
   ("primary_expression" ("expression" "new_expression"))
   ("glimmer_template" ("class_body" "expression"))
   ("new_expression" ("expression" "new_expression"))
   ("await_expression" ("expression"))
   ("update_expression" ("expression"))
   ("yield_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("unary_expression" ("expression"))
   ("subscript_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "rest_pattern" "pattern"))
   ("identifier" ("jsx_namespace_name" "class_declaration" "pattern" "jsx_closing_element" "decorator" "catch_clause" "namespace_import" "function_declaration" "class" "import_specifier" "arrow_function" "import_clause" "rest_pattern" "generator_function" "generator_function_declaration" "for_in_statement" "augmented_assignment_expression" "jsx_self_closing_element" "nested_identifier" "export_specifier" "variable_declarator" "assignment_expression" "primary_expression" "jsx_opening_element" "namespace_export" "function"))
   ("array_pattern" ("catch_clause" "for_in_statement" "variable_declarator" "assignment_expression" "rest_pattern" "pattern" "object_assignment_pattern"))
   ("rest_pattern" ("object_pattern" "pattern"))
   ("undefined" ("for_in_statement" "assignment_expression" "primary_expression" "rest_pattern" "pattern"))
   ("object_pattern" ("catch_clause" "for_in_statement" "variable_declarator" "assignment_expression" "rest_pattern" "pattern" "object_assignment_pattern"))
   ("member_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "rest_pattern" "pattern" "decorator"))
   ("arrow_function" ("primary_expression"))
   ("meta_property" ("primary_expression"))
   ("function" ("primary_expression"))
   ("false" ("primary_expression"))
   ("array" ("primary_expression"))
   ("call_expression" ("decorator" "primary_expression"))
   ("generator_function" ("primary_expression"))
   ("regex" ("primary_expression"))
   ("super" ("primary_expression"))
   ("object" ("primary_expression"))
   ("null" ("primary_expression"))
   ("template_string" ("call_expression" "primary_expression"))
   ("true" ("primary_expression"))
   ("parenthesized_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "if_statement" "with_statement" "do_statement" "while_statement" "switch_statement"))
   ("string" ("method_definition" "import_statement" "export_specifier" "pair_pattern" "primary_expression" "jsx_attribute" "pair" "field_definition" "export_statement" "namespace_export" "import_specifier"))
   ("import" ("primary_expression"))
   ("class" ("primary_expression"))
   ("this" ("primary_expression"))
   ("number" ("method_definition" "pair_pattern" "primary_expression" "pair" "field_definition"))
   ("import_statement" ("statement"))
   ("expression_statement" ("for_statement" "statement"))
   ("declaration" ("export_statement" "statement"))
   ("for_statement" ("statement"))
   ("throw_statement" ("statement"))
   ("if_statement" ("statement"))
   ("export_statement" ("statement"))
   ("try_statement" ("statement"))
   ("with_statement" ("statement"))
   ("for_in_statement" ("statement"))
   ("return_statement" ("statement"))
   ("empty_statement" ("for_statement" "statement"))
   ("labeled_statement" ("statement"))
   ("break_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("do_statement" ("statement"))
   ("while_statement" ("statement"))
   ("statement_block" ("catch_clause" "arrow_function" "method_definition" "class_static_block" "statement" "function_declaration" "generator_function" "finally_clause" "generator_function_declaration" "function" "try_statement"))
   ("switch_statement" ("statement"))
   ("continue_statement" ("statement"))
   ("expression" ("sequence_expression" "array" "pair" "binary_expression" "class_heritage" "ternary_expression" "return_statement" "jsx_expression" "arguments" "field_definition" "spread_element" "object_assignment_pattern" "arrow_function" "expression_statement" "computed_property_name" "throw_statement" "for_statement" "call_expression" "member_expression" "await_expression" "export_statement" "switch_case" "update_expression" "yield_expression" "unary_expression" "for_in_statement" "augmented_assignment_expression" "subscript_expression" "variable_declarator" "assignment_expression" "template_substitution" "assignment_pattern" "parenthesized_expression"))
   ("spread_element" ("arguments" "jsx_expression" "object" "array"))
   ("assignment_pattern" ("array_pattern" "pair_pattern" "formal_parameters"))
   ("pattern" ("array_pattern" "assignment_pattern" "pair_pattern" "formal_parameters"))
   ("formal_parameters" ("method_definition" "arrow_function" "function_declaration" "generator_function" "generator_function_declaration" "function"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("arguments" ("call_expression" "new_expression"))
   ("optional_chain" ("subscript_expression" "call_expression" "member_expression"))
   ("class_heritage" ("class" "class_declaration"))
   ("class_body" ("class" "class_declaration"))
   ("decorator" ("method_definition" "class_declaration" "field_definition" "export_statement" "class"))
   ("method_definition" ("class_body" "object"))
   ("field_definition" ("class_body"))
   ("class_static_block" ("class_body"))
   ("statement" ("for_in_statement" "for_statement" "labeled_statement" "if_statement" "program" "switch_case" "do_statement" "switch_default" "while_statement" "statement_block" "with_statement" "else_clause"))
   ("export_specifier" ("export_clause"))
   ("export_clause" ("export_statement"))
   ("namespace_export" ("export_statement"))
   ("sequence_expression" ("for_in_statement" "sequence_expression" "subscript_expression" "expression_statement" "return_statement" "throw_statement" "for_statement" "jsx_expression" "template_substitution" "switch_case" "parenthesized_expression"))
   ("property_identifier" ("method_definition" "pair_pattern" "member_expression" "jsx_attribute" "pair" "field_definition"))
   ("computed_property_name" ("method_definition" "pair" "field_definition" "pair_pattern"))
   ("private_property_identifier" ("method_definition" "pair_pattern" "member_expression" "pair" "field_definition"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("else_clause" ("if_statement"))
   ("named_imports" ("import_clause"))
   ("namespace_import" ("import_clause"))
   ("import_clause" ("import_statement"))
   ("jsx_namespace_name" ("jsx_self_closing_element" "jsx_opening_element" "jsx_attribute" "jsx_closing_element"))
   ("jsx_expression" ("jsx_element" "jsx_fragment" "jsx_attribute" "jsx_opening_element" "jsx_self_closing_element"))
   ("nested_identifier" ("nested_identifier" "jsx_self_closing_element" "jsx_opening_element" "jsx_closing_element"))
   ("jsx_text" ("jsx_element" "jsx_fragment"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_attribute" ("jsx_self_closing_element" "jsx_opening_element"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("import_specifier" ("named_imports"))
   ("pair" ("object"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_assignment_pattern" "object_pattern"))
   ("object_assignment_pattern" ("object_pattern"))
   ("pair_pattern" ("object_pattern"))
   ("hash_bang_line" ("program"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("escape_sequence" ("template_string" "string"))
   ("string_fragment" ("string"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_body" ("switch_statement"))
   ("template_substitution" ("template_string"))
   ("finally_clause" ("try_statement"))
   ("catch_clause" ("try_statement"))
  )
)
;; END Inverse production rules for javascript

;; START Production rules for jsx
(defconst combobulate-rules-jsx
 '(("declaration" (:*unnamed* ("generator_function_declaration" "function_declaration" "variable_declaration" "class_declaration" "lexical_declaration")))
 ("expression" (:*unnamed* ("jsx_element" "augmented_assignment_expression" "jsx_self_closing_element" "ternary_expression" "jsx_fragment" "assignment_expression" "primary_expression" "glimmer_template" "new_expression" "await_expression" "update_expression" "yield_expression" "binary_expression" "unary_expression")))
 ("pattern" (:*unnamed* ("subscript_expression" "identifier" "array_pattern" "rest_pattern" "undefined" "object_pattern" "member_expression")))
 ("primary_expression" (:*unnamed* ("arrow_function" "meta_property" "function" "false" "array" "call_expression" "member_expression" "undefined" "generator_function" "regex" "super" "object" "null" "identifier" "subscript_expression" "template_string" "true" "parenthesized_expression" "string" "import" "class" "this" "number")))
 ("statement" (:*unnamed* ("import_statement" "expression_statement" "declaration" "for_statement" "throw_statement" "if_statement" "export_statement" "try_statement" "with_statement" "for_in_statement" "return_statement" "empty_statement" "labeled_statement" "break_statement" "debugger_statement" "do_statement" "while_statement" "statement_block" "switch_statement" "continue_statement")))
 ("arguments" (:*unnamed* ("expression" "spread_element")))
 ("array" (:*unnamed* ("expression" "spread_element")))
 ("array_pattern" (:*unnamed* ("assignment_pattern" "pattern")))
 ("arrow_function" (:body ("statement_block" "expression") :parameter ("identifier") :parameters ("formal_parameters")))
 ("assignment_expression" (:left ("subscript_expression" "identifier" "array_pattern" "undefined" "object_pattern" "parenthesized_expression" "member_expression") :right ("expression")))
 ("assignment_pattern" (:left ("pattern") :right ("expression")))
 ("augmented_assignment_expression" (:left ("subscript_expression" "identifier" "parenthesized_expression" "member_expression") :operator nil :right ("expression")))
 ("await_expression" (:*unnamed* ("expression")))
 ("binary_expression" (:left ("expression") :operator nil :right ("expression")))
 ("break_statement" (:label ("statement_identifier")))
 ("call_expression" (:arguments ("arguments" "template_string") :function ("expression") :optional_chain ("optional_chain")))
 ("catch_clause" (:body ("statement_block") :parameter ("identifier" "array_pattern" "object_pattern")))
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier")))
 ("class_body" (:member ("method_definition" "field_definition" "class_static_block") :template ("glimmer_template")))
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier")))
 ("class_heritage" (:*unnamed* ("expression")))
 ("class_static_block" (:body ("statement_block")))
 ("computed_property_name" (:*unnamed* ("expression")))
 ("continue_statement" (:label ("statement_identifier")))
 ("decorator" (:*unnamed* ("identifier" "call_expression" "member_expression")))
 ("do_statement" (:body ("statement") :condition ("parenthesized_expression")))
 ("else_clause" (:*unnamed* ("statement")))
 ("export_clause" (:*unnamed* ("export_specifier")))
 ("export_specifier" (:alias ("identifier" "string") :name ("identifier" "string")))
 ("export_statement" (:*unnamed* ("export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression")))
 ("expression_statement" (:*unnamed* ("sequence_expression" "expression")))
 ("field_definition" (:decorator ("decorator") :property ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :value ("expression")))
 ("finally_clause" (:body ("statement_block")))
 ("for_in_statement" (:body ("statement") :kind nil :left ("subscript_expression" "identifier" "array_pattern" "undefined" "object_pattern" "parenthesized_expression" "member_expression") :operator nil :right ("sequence_expression" "expression") :value ("expression")))
 ("for_statement" (:body ("statement") :condition ("empty_statement" "expression_statement") :increment ("sequence_expression" "expression") :initializer ("variable_declaration" "empty_statement" "expression_statement" "lexical_declaration")))
 ("formal_parameters" (:*unnamed* ("assignment_pattern" "pattern")))
 ("function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters")))
 ("function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters")))
 ("generator_function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters")))
 ("generator_function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters")))
 ("glimmer_template" (:close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag")))
 ("if_statement" (:alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement")))
 ("import_clause" (:*unnamed* ("identifier" "named_imports" "namespace_import")))
 ("import_specifier" (:alias ("identifier") :name ("identifier" "string")))
 ("import_statement" (:*unnamed* ("import_clause") :source ("string")))
 ("jsx_attribute" (:*unnamed* ("jsx_element" "jsx_self_closing_element" "jsx_fragment" "property_identifier" "jsx_namespace_name" "jsx_expression" "string")))
 ("jsx_closing_element" (:name ("nested_identifier" "identifier" "jsx_namespace_name")))
 ("jsx_element" (:*unnamed* ("jsx_element" "jsx_text" "jsx_self_closing_element" "jsx_fragment" "jsx_expression") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element")))
 ("jsx_expression" (:*unnamed* ("sequence_expression" "expression" "spread_element")))
 ("jsx_fragment" (:*unnamed* ("jsx_element" "jsx_text" "jsx_self_closing_element" "jsx_fragment" "jsx_expression")))
 ("jsx_namespace_name" (:*unnamed* ("identifier")))
 ("jsx_opening_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("nested_identifier" "identifier" "jsx_namespace_name")))
 ("jsx_self_closing_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("nested_identifier" "identifier" "jsx_namespace_name")))
 ("labeled_statement" (:body ("statement") :label ("statement_identifier")))
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil))
 ("member_expression" (:object ("expression") :optional_chain ("optional_chain") :property ("property_identifier" "private_property_identifier")))
 ("method_definition" (:body ("statement_block") :decorator ("decorator") :name ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :parameters ("formal_parameters")))
 ("named_imports" (:*unnamed* ("import_specifier")))
 ("namespace_export" (:*unnamed* ("identifier" "string")))
 ("namespace_import" (:*unnamed* ("identifier")))
 ("nested_identifier" (:*unnamed* ("nested_identifier" "identifier")))
 ("new_expression" (:arguments ("arguments") :constructor ("new_expression" "primary_expression")))
 ("object" (:*unnamed* ("method_definition" "pair" "shorthand_property_identifier" "spread_element")))
 ("object_assignment_pattern" (:left ("array_pattern" "shorthand_property_identifier_pattern" "object_pattern") :right ("expression")))
 ("object_pattern" (:*unnamed* ("rest_pattern" "shorthand_property_identifier_pattern" "object_assignment_pattern" "pair_pattern")))
 ("pair" (:key ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :value ("expression")))
 ("pair_pattern" (:key ("number" "property_identifier" "computed_property_name" "string" "private_property_identifier") :value ("assignment_pattern" "pattern")))
 ("parenthesized_expression" (:*unnamed* ("sequence_expression" "expression")))
 ("program" (:*unnamed* ("hash_bang_line" "statement")))
 ("regex" (:flags ("regex_flags") :pattern ("regex_pattern")))
 ("rest_pattern" (:*unnamed* ("subscript_expression" "identifier" "array_pattern" "undefined" "object_pattern" "member_expression")))
 ("return_statement" (:*unnamed* ("sequence_expression" "expression")))
 ("sequence_expression" (:left ("expression") :right ("sequence_expression" "expression")))
 ("spread_element" (:*unnamed* ("expression")))
 ("statement_block" (:*unnamed* ("statement")))
 ("string" (:*unnamed* ("escape_sequence" "string_fragment")))
 ("subscript_expression" (:index ("sequence_expression" "expression") :object ("expression") :optional_chain ("optional_chain")))
 ("switch_body" (:*unnamed* ("switch_case" "switch_default")))
 ("switch_case" (:body ("statement") :value ("sequence_expression" "expression")))
 ("switch_default" (:body ("statement")))
 ("switch_statement" (:body ("switch_body") :value ("parenthesized_expression")))
 ("template_string" (:*unnamed* ("escape_sequence" "template_substitution")))
 ("template_substitution" (:*unnamed* ("sequence_expression" "expression")))
 ("ternary_expression" (:alternative ("expression") :condition ("expression") :consequence ("expression")))
 ("throw_statement" (:*unnamed* ("sequence_expression" "expression")))
 ("try_statement" (:body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause")))
 ("unary_expression" (:argument ("expression") :operator nil))
 ("update_expression" (:argument ("expression") :operator nil))
 ("variable_declaration" (:*unnamed* ("variable_declarator")))
 ("variable_declarator" (:name ("identifier" "array_pattern" "object_pattern") :value ("expression")))
 ("while_statement" (:body ("statement") :condition ("parenthesized_expression")))
 ("with_statement" (:body ("statement") :object ("parenthesized_expression")))
 ("yield_expression" (:*unnamed* ("expression")))
))
;; END Production rules for jsx
;; START Inverse production rules for jsx
(defconst combobulate-rules-jsx-inverted
 '(("generator_function_declaration" ("declaration"))
   ("function_declaration" ("declaration"))
   ("variable_declaration" ("declaration" "for_statement"))
   ("class_declaration" ("declaration"))
   ("lexical_declaration" ("declaration" "for_statement"))
   ("jsx_element" ("jsx_element" "expression" "jsx_fragment" "jsx_attribute"))
   ("augmented_assignment_expression" ("expression"))
   ("jsx_self_closing_element" ("jsx_element" "expression" "jsx_fragment" "jsx_attribute"))
   ("ternary_expression" ("expression"))
   ("jsx_fragment" ("jsx_element" "expression" "jsx_fragment" "jsx_attribute"))
   ("assignment_expression" ("expression"))
   ("primary_expression" ("expression" "new_expression"))
   ("glimmer_template" ("class_body" "expression"))
   ("new_expression" ("expression" "new_expression"))
   ("await_expression" ("expression"))
   ("update_expression" ("expression"))
   ("yield_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("unary_expression" ("expression"))
   ("subscript_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "rest_pattern" "pattern"))
   ("identifier" ("jsx_namespace_name" "class_declaration" "pattern" "jsx_closing_element" "decorator" "catch_clause" "namespace_import" "function_declaration" "class" "import_specifier" "arrow_function" "import_clause" "rest_pattern" "generator_function" "generator_function_declaration" "for_in_statement" "augmented_assignment_expression" "jsx_self_closing_element" "nested_identifier" "export_specifier" "variable_declarator" "assignment_expression" "primary_expression" "jsx_opening_element" "namespace_export" "function"))
   ("array_pattern" ("catch_clause" "for_in_statement" "variable_declarator" "assignment_expression" "rest_pattern" "pattern" "object_assignment_pattern"))
   ("rest_pattern" ("object_pattern" "pattern"))
   ("undefined" ("for_in_statement" "assignment_expression" "primary_expression" "rest_pattern" "pattern"))
   ("object_pattern" ("catch_clause" "for_in_statement" "variable_declarator" "assignment_expression" "rest_pattern" "pattern" "object_assignment_pattern"))
   ("member_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "rest_pattern" "pattern" "decorator"))
   ("arrow_function" ("primary_expression"))
   ("meta_property" ("primary_expression"))
   ("function" ("primary_expression"))
   ("false" ("primary_expression"))
   ("array" ("primary_expression"))
   ("call_expression" ("decorator" "primary_expression"))
   ("generator_function" ("primary_expression"))
   ("regex" ("primary_expression"))
   ("super" ("primary_expression"))
   ("object" ("primary_expression"))
   ("null" ("primary_expression"))
   ("template_string" ("call_expression" "primary_expression"))
   ("true" ("primary_expression"))
   ("parenthesized_expression" ("for_in_statement" "augmented_assignment_expression" "assignment_expression" "primary_expression" "if_statement" "with_statement" "do_statement" "while_statement" "switch_statement"))
   ("string" ("method_definition" "import_statement" "export_specifier" "pair_pattern" "primary_expression" "jsx_attribute" "pair" "field_definition" "export_statement" "namespace_export" "import_specifier"))
   ("import" ("primary_expression"))
   ("class" ("primary_expression"))
   ("this" ("primary_expression"))
   ("number" ("method_definition" "pair_pattern" "primary_expression" "pair" "field_definition"))
   ("import_statement" ("statement"))
   ("expression_statement" ("for_statement" "statement"))
   ("declaration" ("export_statement" "statement"))
   ("for_statement" ("statement"))
   ("throw_statement" ("statement"))
   ("if_statement" ("statement"))
   ("export_statement" ("statement"))
   ("try_statement" ("statement"))
   ("with_statement" ("statement"))
   ("for_in_statement" ("statement"))
   ("return_statement" ("statement"))
   ("empty_statement" ("for_statement" "statement"))
   ("labeled_statement" ("statement"))
   ("break_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("do_statement" ("statement"))
   ("while_statement" ("statement"))
   ("statement_block" ("catch_clause" "arrow_function" "method_definition" "class_static_block" "statement" "function_declaration" "generator_function" "finally_clause" "generator_function_declaration" "function" "try_statement"))
   ("switch_statement" ("statement"))
   ("continue_statement" ("statement"))
   ("expression" ("sequence_expression" "array" "pair" "binary_expression" "class_heritage" "ternary_expression" "return_statement" "jsx_expression" "arguments" "field_definition" "spread_element" "object_assignment_pattern" "arrow_function" "expression_statement" "computed_property_name" "throw_statement" "for_statement" "call_expression" "member_expression" "await_expression" "export_statement" "switch_case" "update_expression" "yield_expression" "unary_expression" "for_in_statement" "augmented_assignment_expression" "subscript_expression" "variable_declarator" "assignment_expression" "template_substitution" "assignment_pattern" "parenthesized_expression"))
   ("spread_element" ("arguments" "jsx_expression" "object" "array"))
   ("assignment_pattern" ("array_pattern" "pair_pattern" "formal_parameters"))
   ("pattern" ("array_pattern" "assignment_pattern" "pair_pattern" "formal_parameters"))
   ("formal_parameters" ("method_definition" "arrow_function" "function_declaration" "generator_function" "generator_function_declaration" "function"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("arguments" ("call_expression" "new_expression"))
   ("optional_chain" ("subscript_expression" "call_expression" "member_expression"))
   ("class_heritage" ("class" "class_declaration"))
   ("class_body" ("class" "class_declaration"))
   ("decorator" ("method_definition" "class_declaration" "field_definition" "export_statement" "class"))
   ("method_definition" ("class_body" "object"))
   ("field_definition" ("class_body"))
   ("class_static_block" ("class_body"))
   ("statement" ("for_in_statement" "for_statement" "labeled_statement" "if_statement" "program" "switch_case" "do_statement" "switch_default" "while_statement" "statement_block" "with_statement" "else_clause"))
   ("export_specifier" ("export_clause"))
   ("export_clause" ("export_statement"))
   ("namespace_export" ("export_statement"))
   ("sequence_expression" ("for_in_statement" "sequence_expression" "subscript_expression" "expression_statement" "return_statement" "throw_statement" "for_statement" "jsx_expression" "template_substitution" "switch_case" "parenthesized_expression"))
   ("property_identifier" ("method_definition" "pair_pattern" "member_expression" "jsx_attribute" "pair" "field_definition"))
   ("computed_property_name" ("method_definition" "pair" "field_definition" "pair_pattern"))
   ("private_property_identifier" ("method_definition" "pair_pattern" "member_expression" "pair" "field_definition"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("else_clause" ("if_statement"))
   ("named_imports" ("import_clause"))
   ("namespace_import" ("import_clause"))
   ("import_clause" ("import_statement"))
   ("jsx_namespace_name" ("jsx_self_closing_element" "jsx_opening_element" "jsx_attribute" "jsx_closing_element"))
   ("jsx_expression" ("jsx_element" "jsx_fragment" "jsx_attribute" "jsx_opening_element" "jsx_self_closing_element"))
   ("nested_identifier" ("nested_identifier" "jsx_self_closing_element" "jsx_opening_element" "jsx_closing_element"))
   ("jsx_text" ("jsx_element" "jsx_fragment"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_attribute" ("jsx_self_closing_element" "jsx_opening_element"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("import_specifier" ("named_imports"))
   ("pair" ("object"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_assignment_pattern" "object_pattern"))
   ("object_assignment_pattern" ("object_pattern"))
   ("pair_pattern" ("object_pattern"))
   ("hash_bang_line" ("program"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("escape_sequence" ("template_string" "string"))
   ("string_fragment" ("string"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_body" ("switch_statement"))
   ("template_substitution" ("template_string"))
   ("finally_clause" ("try_statement"))
   ("catch_clause" ("try_statement"))
  )
)
;; END Inverse production rules for jsx

;; START Production rules for go
(defconst combobulate-rules-go
 '(("_expression" (:*unnamed* ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("_simple_statement" (:*unnamed* ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "assignment_statement" "raw_string_literal" "send_statement" "slice_expression" "iota" "short_var_declaration" "inc_statement" "composite_literal" "dec_statement" "parenthesized_expression" "selector_expression")))
 ("_simple_type" (:*unnamed* ("interface_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("_statement" (:*unnamed* ("var_declaration" "if_statement" "type_assertion_expression" "fallthrough_statement" "imaginary_literal" "type_conversion_expression" "int_literal" "const_declaration" "interpreted_string_literal" "binary_expression" "select_statement" "identifier" "go_statement" "type_switch_statement" "index_expression" "return_statement" "parenthesized_expression" "empty_statement" "assignment_statement" "short_var_declaration" "block" "break_statement" "inc_statement" "dec_statement" "slice_expression" "continue_statement" "selector_expression" "type_declaration" "nil" "for_statement" "call_expression" "false" "defer_statement" "unary_expression" "float_literal" "func_literal" "expression_switch_statement" "true" "send_statement" "labeled_statement" "raw_string_literal" "iota" "goto_statement" "composite_literal" "rune_literal")))
 ("_type" (:*unnamed* ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("argument_list" (:*unnamed* ("parenthesized_type" "type_assertion_expression" "array_type" "generic_type" "imaginary_literal" "type_conversion_expression" "struct_type" "int_literal" "interpreted_string_literal" "binary_expression" "function_type" "identifier" "rune_literal" "index_expression" "type_identifier" "pointer_type" "parenthesized_expression" "slice_type" "slice_expression" "selector_expression" "nil" "call_expression" "false" "unary_expression" "float_literal" "func_literal" "interface_type" "true" "map_type" "variadic_argument" "raw_string_literal" "iota" "qualified_type" "composite_literal" "channel_type")))
 ("array_type" (:element ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type") :length ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("assignment_statement" (:left ("expression_list") :operator nil :right ("expression_list")))
 ("binary_expression" (:left ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression") :operator nil :right ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("block" (:*unnamed* ("var_declaration" "if_statement" "type_assertion_expression" "fallthrough_statement" "imaginary_literal" "type_conversion_expression" "int_literal" "const_declaration" "interpreted_string_literal" "binary_expression" "select_statement" "identifier" "go_statement" "type_switch_statement" "index_expression" "return_statement" "parenthesized_expression" "empty_statement" "assignment_statement" "short_var_declaration" "block" "break_statement" "inc_statement" "dec_statement" "slice_expression" "continue_statement" "selector_expression" "type_declaration" "nil" "for_statement" "call_expression" "false" "defer_statement" "unary_expression" "float_literal" "func_literal" "expression_switch_statement" "true" "send_statement" "labeled_statement" "raw_string_literal" "iota" "goto_statement" "composite_literal" "rune_literal")))
 ("break_statement" (:*unnamed* ("label_name")))
 ("call_expression" (:arguments ("argument_list") :function ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression") :type_arguments ("type_arguments")))
 ("channel_type" (:value ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("communication_case" (:*unnamed* ("var_declaration" "if_statement" "type_assertion_expression" "fallthrough_statement" "imaginary_literal" "type_conversion_expression" "int_literal" "const_declaration" "interpreted_string_literal" "binary_expression" "select_statement" "identifier" "go_statement" "type_switch_statement" "index_expression" "return_statement" "parenthesized_expression" "empty_statement" "assignment_statement" "short_var_declaration" "block" "break_statement" "inc_statement" "dec_statement" "slice_expression" "continue_statement" "selector_expression" "type_declaration" "nil" "for_statement" "call_expression" "false" "defer_statement" "unary_expression" "float_literal" "func_literal" "expression_switch_statement" "true" "send_statement" "labeled_statement" "raw_string_literal" "iota" "goto_statement" "composite_literal" "rune_literal") :communication ("receive_statement" "send_statement")))
 ("composite_literal" (:body ("literal_value") :type ("implicit_length_array_type" "map_type" "type_identifier" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type")))
 ("const_declaration" (:*unnamed* ("const_spec")))
 ("const_spec" (:name ("identifier") :type ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type") :value ("expression_list")))
 ("constraint_elem" (:*unnamed* ("constraint_term")))
 ("constraint_term" (:*unnamed* ("type_identifier")))
 ("continue_statement" (:*unnamed* ("label_name")))
 ("dec_statement" (:*unnamed* ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("default_case" (:*unnamed* ("var_declaration" "if_statement" "type_assertion_expression" "fallthrough_statement" "imaginary_literal" "type_conversion_expression" "int_literal" "const_declaration" "interpreted_string_literal" "binary_expression" "select_statement" "identifier" "go_statement" "type_switch_statement" "index_expression" "return_statement" "parenthesized_expression" "empty_statement" "assignment_statement" "short_var_declaration" "block" "break_statement" "inc_statement" "dec_statement" "slice_expression" "continue_statement" "selector_expression" "type_declaration" "nil" "for_statement" "call_expression" "false" "defer_statement" "unary_expression" "float_literal" "func_literal" "expression_switch_statement" "true" "send_statement" "labeled_statement" "raw_string_literal" "iota" "goto_statement" "composite_literal" "rune_literal")))
 ("defer_statement" (:*unnamed* ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("expression_case" (:*unnamed* ("var_declaration" "if_statement" "type_assertion_expression" "fallthrough_statement" "imaginary_literal" "type_conversion_expression" "int_literal" "const_declaration" "interpreted_string_literal" "binary_expression" "select_statement" "identifier" "go_statement" "type_switch_statement" "index_expression" "return_statement" "parenthesized_expression" "empty_statement" "assignment_statement" "short_var_declaration" "block" "break_statement" "inc_statement" "dec_statement" "slice_expression" "continue_statement" "selector_expression" "type_declaration" "nil" "for_statement" "call_expression" "false" "defer_statement" "unary_expression" "float_literal" "func_literal" "expression_switch_statement" "true" "send_statement" "labeled_statement" "raw_string_literal" "iota" "goto_statement" "composite_literal" "rune_literal") :value ("expression_list")))
 ("expression_list" (:*unnamed* ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("expression_switch_statement" (:*unnamed* ("default_case" "expression_case") :initializer ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "assignment_statement" "raw_string_literal" "send_statement" "slice_expression" "iota" "short_var_declaration" "inc_statement" "composite_literal" "dec_statement" "parenthesized_expression" "selector_expression") :value ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("field_declaration" (:name ("field_identifier") :tag ("interpreted_string_literal" "raw_string_literal") :type ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("field_declaration_list" (:*unnamed* ("field_declaration")))
 ("for_clause" (:condition ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression") :initializer ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "assignment_statement" "raw_string_literal" "send_statement" "slice_expression" "iota" "short_var_declaration" "inc_statement" "composite_literal" "dec_statement" "parenthesized_expression" "selector_expression") :update ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "assignment_statement" "raw_string_literal" "send_statement" "slice_expression" "iota" "short_var_declaration" "inc_statement" "composite_literal" "dec_statement" "parenthesized_expression" "selector_expression")))
 ("for_statement" (:*unnamed* ("range_clause" "nil" "for_clause" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression") :body ("block")))
 ("func_literal" (:body ("block") :parameters ("parameter_list") :result ("interface_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "parameter_list" "function_type" "channel_type")))
 ("function_declaration" (:body ("block") :name ("identifier") :parameters ("parameter_list") :result ("interface_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "parameter_list" "function_type" "channel_type") :type_parameters ("type_parameter_list")))
 ("function_type" (:parameters ("parameter_list") :result ("interface_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "parameter_list" "function_type" "channel_type")))
 ("generic_type" (:type ("qualified_type" "type_identifier") :type_arguments ("type_arguments")))
 ("go_statement" (:*unnamed* ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("goto_statement" (:*unnamed* ("label_name")))
 ("if_statement" (:alternative ("if_statement" "block") :condition ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression") :consequence ("block") :initializer ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "assignment_statement" "raw_string_literal" "send_statement" "slice_expression" "iota" "short_var_declaration" "inc_statement" "composite_literal" "dec_statement" "parenthesized_expression" "selector_expression")))
 ("implicit_length_array_type" (:element ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("import_declaration" (:*unnamed* ("import_spec" "import_spec_list")))
 ("import_spec" (:name ("blank_identifier" "package_identifier" "dot") :path ("interpreted_string_literal" "raw_string_literal")))
 ("import_spec_list" (:*unnamed* ("import_spec")))
 ("inc_statement" (:*unnamed* ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("index_expression" (:index ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression") :operand ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("interface_type" (:*unnamed* ("interface_type_name" "constraint_elem" "method_spec" "struct_elem")))
 ("interface_type_name" (:*unnamed* ("qualified_type" "type_identifier")))
 ("interpreted_string_literal" (:*unnamed* ("escape_sequence")))
 ("keyed_element" (:*unnamed* ("literal_element")))
 ("labeled_statement" (:*unnamed* ("var_declaration" "if_statement" "type_assertion_expression" "fallthrough_statement" "imaginary_literal" "type_conversion_expression" "int_literal" "const_declaration" "interpreted_string_literal" "binary_expression" "select_statement" "identifier" "go_statement" "type_switch_statement" "index_expression" "return_statement" "parenthesized_expression" "empty_statement" "assignment_statement" "short_var_declaration" "block" "break_statement" "inc_statement" "dec_statement" "slice_expression" "continue_statement" "selector_expression" "type_declaration" "nil" "for_statement" "call_expression" "false" "defer_statement" "unary_expression" "float_literal" "func_literal" "expression_switch_statement" "true" "send_statement" "labeled_statement" "raw_string_literal" "iota" "goto_statement" "composite_literal" "rune_literal") :label ("label_name")))
 ("literal_element" (:*unnamed* ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "literal_value" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("literal_value" (:*unnamed* ("keyed_element" "literal_element")))
 ("map_type" (:key ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type") :value ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("method_declaration" (:body ("block") :name ("field_identifier") :parameters ("parameter_list") :receiver ("parameter_list") :result ("interface_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "parameter_list" "function_type" "channel_type")))
 ("method_spec" (:name ("field_identifier") :parameters ("parameter_list") :result ("interface_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "parameter_list" "function_type" "channel_type")))
 ("package_clause" (:*unnamed* ("package_identifier")))
 ("parameter_declaration" (:name ("identifier") :type ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("parameter_list" (:*unnamed* ("variadic_parameter_declaration" "parameter_declaration")))
 ("parenthesized_expression" (:*unnamed* ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("parenthesized_type" (:*unnamed* ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("pointer_type" (:*unnamed* ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("qualified_type" (:name ("type_identifier") :package ("package_identifier")))
 ("range_clause" (:left ("expression_list") :right ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("receive_statement" (:left ("expression_list") :right ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("return_statement" (:*unnamed* ("expression_list")))
 ("select_statement" (:*unnamed* ("default_case" "communication_case")))
 ("selector_expression" (:field ("field_identifier") :operand ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("send_statement" (:channel ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression") :value ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("short_var_declaration" (:left ("expression_list") :right ("expression_list")))
 ("slice_expression" (:capacity ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression") :end ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression") :operand ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression") :start ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("slice_type" (:element ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("source_file" (:*unnamed* ("var_declaration" "if_statement" "type_assertion_expression" "fallthrough_statement" "imaginary_literal" "type_conversion_expression" "import_declaration" "int_literal" "const_declaration" "interpreted_string_literal" "binary_expression" "select_statement" "identifier" "go_statement" "type_switch_statement" "index_expression" "return_statement" "parenthesized_expression" "empty_statement" "assignment_statement" "short_var_declaration" "block" "break_statement" "inc_statement" "function_declaration" "dec_statement" "slice_expression" "continue_statement" "selector_expression" "type_declaration" "nil" "for_statement" "call_expression" "false" "defer_statement" "unary_expression" "float_literal" "func_literal" "expression_switch_statement" "true" "send_statement" "labeled_statement" "raw_string_literal" "iota" "method_declaration" "goto_statement" "composite_literal" "rune_literal" "package_clause")))
 ("struct_elem" (:*unnamed* ("struct_term")))
 ("struct_term" (:*unnamed* ("struct_type")))
 ("struct_type" (:*unnamed* ("field_declaration_list")))
 ("type_alias" (:name ("type_identifier") :type ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("type_arguments" (:*unnamed* ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("type_assertion_expression" (:operand ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression") :type ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("type_case" (:*unnamed* ("var_declaration" "if_statement" "type_assertion_expression" "fallthrough_statement" "imaginary_literal" "type_conversion_expression" "int_literal" "const_declaration" "interpreted_string_literal" "binary_expression" "select_statement" "identifier" "go_statement" "type_switch_statement" "index_expression" "return_statement" "parenthesized_expression" "empty_statement" "assignment_statement" "short_var_declaration" "block" "break_statement" "inc_statement" "dec_statement" "slice_expression" "continue_statement" "selector_expression" "type_declaration" "nil" "for_statement" "call_expression" "false" "defer_statement" "unary_expression" "float_literal" "func_literal" "expression_switch_statement" "true" "send_statement" "labeled_statement" "raw_string_literal" "iota" "goto_statement" "composite_literal" "rune_literal") :type ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("type_conversion_expression" (:operand ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression") :type ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
 ("type_declaration" (:*unnamed* ("type_spec" "type_alias")))
 ("type_parameter_list" (:*unnamed* ("parameter_declaration")))
 ("type_spec" (:name ("type_identifier") :type ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type") :type_parameters ("type_parameter_list")))
 ("type_switch_statement" (:*unnamed* ("default_case" "type_case") :alias ("expression_list") :initializer ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "assignment_statement" "raw_string_literal" "send_statement" "slice_expression" "iota" "short_var_declaration" "inc_statement" "composite_literal" "dec_statement" "parenthesized_expression" "selector_expression") :value ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("unary_expression" (:operand ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression") :operator nil))
 ("var_declaration" (:*unnamed* ("var_spec")))
 ("var_spec" (:name ("identifier") :type ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type") :value ("expression_list")))
 ("variadic_argument" (:*unnamed* ("nil" "type_assertion_expression" "call_expression" "false" "imaginary_literal" "type_conversion_expression" "int_literal" "interpreted_string_literal" "binary_expression" "unary_expression" "float_literal" "identifier" "func_literal" "rune_literal" "index_expression" "true" "raw_string_literal" "slice_expression" "iota" "composite_literal" "parenthesized_expression" "selector_expression")))
 ("variadic_parameter_declaration" (:name ("identifier") :type ("interface_type" "parenthesized_type" "map_type" "type_identifier" "pointer_type" "array_type" "generic_type" "qualified_type" "slice_type" "struct_type" "function_type" "channel_type")))
))
;; END Production rules for go
;; START Inverse production rules for go
(defconst combobulate-rules-go-inverted
 '(("nil" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("type_assertion_expression" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("call_expression" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("false" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("imaginary_literal" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("type_conversion_expression" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("int_literal" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("interpreted_string_literal" ("expression_list" "range_clause" "import_spec" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "field_declaration" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("binary_expression" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("unary_expression" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("float_literal" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("identifier" ("expression_list" "var_spec" "range_clause" "variadic_parameter_declaration" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "const_spec" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "function_declaration" "dec_statement" "type_case" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "parameter_declaration" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("func_literal" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("rune_literal" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("index_expression" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("true" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("raw_string_literal" ("expression_list" "range_clause" "import_spec" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "field_declaration" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("slice_expression" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("iota" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("composite_literal" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("parenthesized_expression" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("selector_expression" ("expression_list" "range_clause" "for_clause" "if_statement" "type_assertion_expression" "array_type" "type_conversion_expression" "binary_expression" "type_switch_statement" "go_statement" "_statement" "index_expression" "block" "_expression" "inc_statement" "receive_statement" "default_case" "type_case" "dec_statement" "_simple_statement" "argument_list" "slice_expression" "communication_case" "selector_expression" "for_statement" "call_expression" "literal_element" "defer_statement" "expression_case" "unary_expression" "source_file" "expression_switch_statement" "variadic_argument" "send_statement" "labeled_statement" "parenthesized_expression"))
   ("assignment_statement" ("type_switch_statement" "_statement" "expression_switch_statement" "for_clause" "labeled_statement" "if_statement" "block" "default_case" "type_case" "_simple_statement" "expression_case" "communication_case" "source_file"))
   ("send_statement" ("type_switch_statement" "_statement" "expression_switch_statement" "for_clause" "labeled_statement" "if_statement" "block" "default_case" "type_case" "_simple_statement" "expression_case" "communication_case" "source_file"))
   ("short_var_declaration" ("type_switch_statement" "_statement" "expression_switch_statement" "for_clause" "labeled_statement" "if_statement" "block" "default_case" "type_case" "_simple_statement" "expression_case" "communication_case" "source_file"))
   ("inc_statement" ("type_switch_statement" "_statement" "expression_switch_statement" "for_clause" "labeled_statement" "if_statement" "block" "default_case" "type_case" "_simple_statement" "expression_case" "communication_case" "source_file"))
   ("dec_statement" ("type_switch_statement" "_statement" "expression_switch_statement" "for_clause" "labeled_statement" "if_statement" "block" "default_case" "type_case" "_simple_statement" "expression_case" "communication_case" "source_file"))
   ("interface_type" ("parenthesized_type" "var_spec" "variadic_parameter_declaration" "type_assertion_expression" "array_type" "type_conversion_expression" "type_spec" "method_spec" "function_type" "field_declaration" "_simple_type" "const_spec" "implicit_length_array_type" "pointer_type" "function_declaration" "slice_type" "type_case" "type_arguments" "argument_list" "type_alias" "parameter_declaration" "func_literal" "map_type" "method_declaration" "_type" "channel_type"))
   ("map_type" ("parenthesized_type" "var_spec" "variadic_parameter_declaration" "type_assertion_expression" "array_type" "type_conversion_expression" "type_spec" "method_spec" "function_type" "field_declaration" "_simple_type" "const_spec" "implicit_length_array_type" "pointer_type" "function_declaration" "slice_type" "type_case" "type_arguments" "argument_list" "type_alias" "parameter_declaration" "func_literal" "map_type" "method_declaration" "composite_literal" "_type" "channel_type"))
   ("type_identifier" ("parenthesized_type" "var_spec" "variadic_parameter_declaration" "constraint_term" "type_assertion_expression" "array_type" "generic_type" "type_conversion_expression" "type_spec" "method_spec" "function_type" "field_declaration" "_simple_type" "const_spec" "implicit_length_array_type" "pointer_type" "function_declaration" "interface_type_name" "slice_type" "type_case" "type_arguments" "argument_list" "type_alias" "parameter_declaration" "func_literal" "map_type" "method_declaration" "qualified_type" "composite_literal" "_type" "channel_type"))
   ("pointer_type" ("parenthesized_type" "var_spec" "variadic_parameter_declaration" "type_assertion_expression" "array_type" "type_conversion_expression" "type_spec" "method_spec" "function_type" "field_declaration" "_simple_type" "const_spec" "implicit_length_array_type" "pointer_type" "function_declaration" "slice_type" "type_case" "type_arguments" "argument_list" "type_alias" "parameter_declaration" "func_literal" "map_type" "method_declaration" "_type" "channel_type"))
   ("array_type" ("parenthesized_type" "var_spec" "variadic_parameter_declaration" "type_assertion_expression" "array_type" "type_conversion_expression" "type_spec" "method_spec" "function_type" "field_declaration" "_simple_type" "const_spec" "implicit_length_array_type" "pointer_type" "function_declaration" "slice_type" "type_case" "type_arguments" "argument_list" "type_alias" "parameter_declaration" "func_literal" "map_type" "method_declaration" "composite_literal" "_type" "channel_type"))
   ("generic_type" ("parenthesized_type" "var_spec" "variadic_parameter_declaration" "type_assertion_expression" "array_type" "type_conversion_expression" "type_spec" "method_spec" "function_type" "field_declaration" "_simple_type" "const_spec" "implicit_length_array_type" "pointer_type" "function_declaration" "slice_type" "type_case" "type_arguments" "argument_list" "type_alias" "parameter_declaration" "func_literal" "map_type" "method_declaration" "composite_literal" "_type" "channel_type"))
   ("qualified_type" ("parenthesized_type" "var_spec" "variadic_parameter_declaration" "type_assertion_expression" "array_type" "generic_type" "type_conversion_expression" "type_spec" "method_spec" "function_type" "field_declaration" "_simple_type" "const_spec" "implicit_length_array_type" "pointer_type" "function_declaration" "interface_type_name" "slice_type" "type_case" "type_arguments" "argument_list" "type_alias" "parameter_declaration" "func_literal" "map_type" "method_declaration" "composite_literal" "_type" "channel_type"))
   ("slice_type" ("parenthesized_type" "var_spec" "variadic_parameter_declaration" "type_assertion_expression" "array_type" "type_conversion_expression" "type_spec" "method_spec" "function_type" "field_declaration" "_simple_type" "const_spec" "implicit_length_array_type" "pointer_type" "function_declaration" "slice_type" "type_case" "type_arguments" "argument_list" "type_alias" "parameter_declaration" "func_literal" "map_type" "method_declaration" "composite_literal" "_type" "channel_type"))
   ("struct_type" ("parenthesized_type" "var_spec" "variadic_parameter_declaration" "type_assertion_expression" "array_type" "type_conversion_expression" "type_spec" "method_spec" "function_type" "field_declaration" "struct_term" "_simple_type" "const_spec" "implicit_length_array_type" "pointer_type" "function_declaration" "slice_type" "type_case" "type_arguments" "argument_list" "type_alias" "parameter_declaration" "func_literal" "map_type" "method_declaration" "composite_literal" "_type" "channel_type"))
   ("function_type" ("parenthesized_type" "var_spec" "variadic_parameter_declaration" "type_assertion_expression" "array_type" "type_conversion_expression" "type_spec" "method_spec" "function_type" "field_declaration" "_simple_type" "const_spec" "implicit_length_array_type" "pointer_type" "function_declaration" "slice_type" "type_case" "type_arguments" "argument_list" "type_alias" "parameter_declaration" "func_literal" "map_type" "method_declaration" "_type" "channel_type"))
   ("channel_type" ("parenthesized_type" "var_spec" "variadic_parameter_declaration" "type_assertion_expression" "array_type" "type_conversion_expression" "type_spec" "method_spec" "function_type" "field_declaration" "_simple_type" "const_spec" "implicit_length_array_type" "pointer_type" "function_declaration" "slice_type" "type_case" "type_arguments" "argument_list" "type_alias" "parameter_declaration" "func_literal" "map_type" "method_declaration" "_type" "channel_type"))
   ("var_declaration" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("if_statement" ("_statement" "labeled_statement" "if_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("fallthrough_statement" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("const_declaration" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("select_statement" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("go_statement" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("type_switch_statement" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("return_statement" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("empty_statement" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("block" ("func_literal" "_statement" "for_statement" "labeled_statement" "if_statement" "block" "method_declaration" "default_case" "function_declaration" "type_case" "expression_case" "communication_case" "source_file"))
   ("break_statement" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("continue_statement" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("type_declaration" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("for_statement" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("defer_statement" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("expression_switch_statement" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("labeled_statement" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("goto_statement" ("_statement" "labeled_statement" "block" "default_case" "type_case" "expression_case" "communication_case" "source_file"))
   ("parenthesized_type" ("parenthesized_type" "var_spec" "variadic_parameter_declaration" "type_assertion_expression" "array_type" "type_conversion_expression" "type_spec" "field_declaration" "const_spec" "implicit_length_array_type" "pointer_type" "slice_type" "type_case" "type_arguments" "argument_list" "type_alias" "parameter_declaration" "map_type" "_type" "channel_type"))
   ("variadic_argument" ("argument_list"))
   ("expression_list" ("const_spec" "type_switch_statement" "var_spec" "range_clause" "return_statement" "assignment_statement" "short_var_declaration" "receive_statement" "expression_case"))
   ("label_name" ("goto_statement" "continue_statement" "break_statement" "labeled_statement"))
   ("argument_list" ("call_expression"))
   ("type_arguments" ("call_expression" "generic_type"))
   ("receive_statement" ("communication_case"))
   ("literal_value" ("composite_literal" "literal_element"))
   ("implicit_length_array_type" ("composite_literal"))
   ("const_spec" ("const_declaration"))
   ("constraint_term" ("constraint_elem"))
   ("default_case" ("type_switch_statement" "expression_switch_statement" "select_statement"))
   ("expression_case" ("expression_switch_statement"))
   ("field_identifier" ("method_declaration" "method_spec" "field_declaration" "selector_expression"))
   ("field_declaration" ("field_declaration_list"))
   ("range_clause" ("for_statement"))
   ("for_clause" ("for_statement"))
   ("parameter_list" ("func_literal" "method_declaration" "function_declaration" "method_spec" "function_type"))
   ("type_parameter_list" ("type_spec" "function_declaration"))
   ("import_spec" ("import_spec_list" "import_declaration"))
   ("import_spec_list" ("import_declaration"))
   ("blank_identifier" ("import_spec"))
   ("package_identifier" ("import_spec" "qualified_type" "package_clause"))
   ("dot" ("import_spec"))
   ("interface_type_name" ("interface_type"))
   ("constraint_elem" ("interface_type"))
   ("method_spec" ("interface_type"))
   ("struct_elem" ("interface_type"))
   ("escape_sequence" ("interpreted_string_literal"))
   ("literal_element" ("literal_value" "keyed_element"))
   ("keyed_element" ("literal_value"))
   ("variadic_parameter_declaration" ("parameter_list"))
   ("parameter_declaration" ("parameter_list" "type_parameter_list"))
   ("communication_case" ("select_statement"))
   ("import_declaration" ("source_file"))
   ("function_declaration" ("source_file"))
   ("method_declaration" ("source_file"))
   ("package_clause" ("source_file"))
   ("struct_term" ("struct_elem"))
   ("field_declaration_list" ("struct_type"))
   ("type_spec" ("type_declaration"))
   ("type_alias" ("type_declaration"))
   ("type_case" ("type_switch_statement"))
   ("var_spec" ("var_declaration"))
  )
)
;; END Inverse production rules for go

;; START Production rules for python
(defconst combobulate-rules-python
 '(("_compound_statement" (:*unnamed* ("class_definition" "for_statement" "decorated_definition" "if_statement" "match_statement" "while_statement" "function_definition" "with_statement" "try_statement")))
 ("_simple_statement" (:*unnamed* ("print_statement" "delete_statement" "pass_statement" "import_statement" "expression_statement" "return_statement" "global_statement" "future_import_statement" "break_statement" "import_from_statement" "exec_statement" "assert_statement" "nonlocal_statement" "continue_statement" "raise_statement")))
 ("expression" (:*unnamed* ("await" "comparison_operator" "as_pattern" "conditional_expression" "primary_expression" "boolean_operator" "named_expression" "not_operator" "lambda")))
 ("parameter" (:*unnamed* ("list_splat_pattern" "identifier" "dictionary_splat_pattern" "default_parameter" "keyword_separator" "typed_parameter" "typed_default_parameter" "positional_separator" "tuple_pattern")))
 ("pattern" (:*unnamed* ("attribute" "identifier" "list_splat_pattern" "list_pattern" "subscript" "tuple_pattern")))
 ("primary_expression" (:*unnamed* ("dictionary_comprehension" "call" "false" "list_comprehension" "integer" "generator_expression" "none" "attribute" "identifier" "set" "concatenated_string" "list" "true" "parenthesized_expression" "subscript" "unary_operator" "string" "set_comprehension" "ellipsis" "binary_operator" "float" "dictionary" "tuple")))
 ("aliased_import" (:alias ("identifier") :name ("dotted_name")))
 ("argument_list" (:*unnamed* ("dictionary_splat" "keyword_argument" "expression" "list_splat" "parenthesized_expression")))
 ("as_pattern" (:*unnamed* ("expression") :alias ("as_pattern_target")))
 ("assert_statement" (:*unnamed* ("expression")))
 ("assignment" (:left ("pattern_list" "pattern") :right ("expression_list" "expression" "assignment" "yield" "augmented_assignment") :type ("type")))
 ("attribute" (:attribute ("identifier") :object ("primary_expression")))
 ("augmented_assignment" (:left ("pattern_list" "pattern") :operator nil :right ("expression_list" "expression" "assignment" "yield" "augmented_assignment")))
 ("await" (:*unnamed* ("expression")))
 ("binary_operator" (:left ("primary_expression") :operator nil :right ("primary_expression")))
 ("block" (:*unnamed* ("pass_statement" "import_statement" "expression_statement" "for_statement" "global_statement" "decorated_definition" "if_statement" "continue_statement" "nonlocal_statement" "with_statement" "print_statement" "delete_statement" "class_definition" "return_statement" "match_statement" "future_import_statement" "break_statement" "import_from_statement" "exec_statement" "assert_statement" "while_statement" "function_definition" "try_statement" "raise_statement")))
 ("boolean_operator" (:left ("expression") :operator nil :right ("expression")))
 ("call" (:arguments ("argument_list" "generator_expression") :function ("primary_expression")))
 ("case_clause" (:consequence ("block") :guard ("if_clause") :pattern ("case_pattern")))
 ("case_pattern" (:*unnamed* ("attribute" "identifier" "subscript")))
 ("chevron" (:*unnamed* ("expression")))
 ("class_definition" (:body ("block") :name ("identifier") :superclasses ("argument_list")))
 ("comparison_operator" (:*unnamed* ("primary_expression") :operators nil))
 ("concatenated_string" (:*unnamed* ("string")))
 ("conditional_expression" (:*unnamed* ("expression")))
 ("decorated_definition" (:*unnamed* ("decorator") :definition ("class_definition" "function_definition")))
 ("decorator" (:*unnamed* ("expression")))
 ("default_parameter" (:name ("identifier") :value ("expression")))
 ("delete_statement" (:*unnamed* ("expression_list" "expression")))
 ("dictionary" (:*unnamed* ("dictionary_splat" "pair")))
 ("dictionary_comprehension" (:*unnamed* ("if_clause" "for_in_clause") :body ("pair")))
 ("dictionary_splat" (:*unnamed* ("expression")))
 ("dictionary_splat_pattern" (:*unnamed* ("attribute" "identifier" "subscript")))
 ("dotted_name" (:*unnamed* ("identifier")))
 ("elif_clause" (:condition ("expression") :consequence ("block")))
 ("else_clause" (:body ("block")))
 ("except_clause" (:*unnamed* ("expression" "block")))
 ("except_group_clause" (:*unnamed* ("expression" "block")))
 ("exec_statement" (:*unnamed* ("expression") :code ("string")))
 ("expression_list" (:*unnamed* ("expression")))
 ("expression_statement" (:*unnamed* ("yield" "expression" "assignment" "augmented_assignment")))
 ("finally_clause" (:*unnamed* ("block")))
 ("for_in_clause" (:left ("pattern_list" "pattern") :right ("expression")))
 ("for_statement" (:alternative ("else_clause") :body ("block") :left ("pattern_list" "pattern") :right ("expression_list" "expression")))
 ("format_expression" (:expression ("expression_list" "expression" "yield") :format_specifier ("format_specifier") :type_conversion ("type_conversion")))
 ("format_specifier" (:*unnamed* ("format_expression")))
 ("function_definition" (:body ("block") :name ("identifier") :parameters ("parameters") :return_type ("type")))
 ("future_import_statement" (:name ("aliased_import" "dotted_name")))
 ("generator_expression" (:*unnamed* ("if_clause" "for_in_clause") :body ("expression")))
 ("global_statement" (:*unnamed* ("identifier")))
 ("if_clause" (:*unnamed* ("expression")))
 ("if_statement" (:alternative ("elif_clause" "else_clause") :condition ("expression") :consequence ("block")))
 ("import_from_statement" (:*unnamed* ("wildcard_import") :module_name ("relative_import" "dotted_name") :name ("aliased_import" "dotted_name")))
 ("import_statement" (:name ("aliased_import" "dotted_name")))
 ("interpolation" (:expression ("expression_list" "expression" "yield") :format_specifier ("format_specifier") :type_conversion ("type_conversion")))
 ("keyword_argument" (:name ("identifier") :value ("expression")))
 ("lambda" (:body ("expression") :parameters ("lambda_parameters")))
 ("lambda_parameters" (:*unnamed* ("parameter")))
 ("list" (:*unnamed* ("expression" "yield" "list_splat" "parenthesized_list_splat")))
 ("list_comprehension" (:*unnamed* ("if_clause" "for_in_clause") :body ("expression")))
 ("list_pattern" (:*unnamed* ("pattern")))
 ("list_splat" (:*unnamed* ("expression")))
 ("list_splat_pattern" (:*unnamed* ("attribute" "identifier" "subscript")))
 ("match_statement" (:alternative ("case_clause") :subject ("expression")))
 ("module" (:*unnamed* ("pass_statement" "import_statement" "expression_statement" "for_statement" "global_statement" "decorated_definition" "if_statement" "continue_statement" "nonlocal_statement" "with_statement" "print_statement" "delete_statement" "class_definition" "return_statement" "match_statement" "future_import_statement" "break_statement" "import_from_statement" "exec_statement" "assert_statement" "while_statement" "function_definition" "try_statement" "raise_statement")))
 ("named_expression" (:name ("identifier") :value ("expression")))
 ("nonlocal_statement" (:*unnamed* ("identifier")))
 ("not_operator" (:argument ("expression")))
 ("pair" (:key ("expression") :value ("expression")))
 ("parameters" (:*unnamed* ("parameter")))
 ("parenthesized_expression" (:*unnamed* ("expression" "yield" "list_splat" "parenthesized_expression")))
 ("parenthesized_list_splat" (:*unnamed* ("parenthesized_expression" "list_splat")))
 ("pattern_list" (:*unnamed* ("pattern")))
 ("print_statement" (:*unnamed* ("chevron") :argument ("expression")))
 ("raise_statement" (:*unnamed* ("expression_list" "expression") :cause ("expression")))
 ("relative_import" (:*unnamed* ("import_prefix" "dotted_name")))
 ("return_statement" (:*unnamed* ("expression_list" "expression")))
 ("set" (:*unnamed* ("expression" "yield" "list_splat" "parenthesized_list_splat")))
 ("set_comprehension" (:*unnamed* ("if_clause" "for_in_clause") :body ("expression")))
 ("slice" (:*unnamed* ("expression")))
 ("string" (:interpolation ("interpolation") :prefix nil :string_content ("string_content") :suffix nil))
 ("string_content" (:*unnamed* ("escape_sequence")))
 ("subscript" (:subscript ("expression" "slice") :value ("primary_expression")))
 ("try_statement" (:*unnamed* ("except_clause" "finally_clause" "except_group_clause" "else_clause") :body ("block")))
 ("tuple" (:*unnamed* ("expression" "yield" "list_splat" "parenthesized_list_splat")))
 ("tuple_pattern" (:*unnamed* ("pattern")))
 ("type" (:*unnamed* ("expression")))
 ("typed_default_parameter" (:name ("identifier") :type ("type") :value ("expression")))
 ("typed_parameter" (:*unnamed* ("list_splat_pattern" "identifier" "dictionary_splat_pattern") :type ("type")))
 ("unary_operator" (:argument ("primary_expression") :operator nil))
 ("while_statement" (:alternative ("else_clause") :body ("block") :condition ("expression")))
 ("with_clause" (:*unnamed* ("with_item")))
 ("with_item" (:value ("expression")))
 ("with_statement" (:*unnamed* ("with_clause") :body ("block")))
 ("yield" (:*unnamed* ("expression_list" "expression")))
))
;; END Production rules for python
;; START Inverse production rules for python
(defconst combobulate-rules-python-inverted
 '(("class_definition" ("decorated_definition" "block" "module" "_compound_statement"))
   ("for_statement" ("block" "module" "_compound_statement"))
   ("decorated_definition" ("block" "module" "_compound_statement"))
   ("if_statement" ("block" "module" "_compound_statement"))
   ("match_statement" ("block" "module" "_compound_statement"))
   ("while_statement" ("block" "module" "_compound_statement"))
   ("function_definition" ("decorated_definition" "block" "module" "_compound_statement"))
   ("with_statement" ("block" "module" "_compound_statement"))
   ("try_statement" ("block" "module" "_compound_statement"))
   ("print_statement" ("_simple_statement" "module" "block"))
   ("delete_statement" ("_simple_statement" "module" "block"))
   ("pass_statement" ("_simple_statement" "module" "block"))
   ("import_statement" ("_simple_statement" "module" "block"))
   ("expression_statement" ("_simple_statement" "module" "block"))
   ("return_statement" ("_simple_statement" "module" "block"))
   ("global_statement" ("_simple_statement" "module" "block"))
   ("future_import_statement" ("_simple_statement" "module" "block"))
   ("break_statement" ("_simple_statement" "module" "block"))
   ("import_from_statement" ("_simple_statement" "module" "block"))
   ("exec_statement" ("_simple_statement" "module" "block"))
   ("assert_statement" ("_simple_statement" "module" "block"))
   ("nonlocal_statement" ("_simple_statement" "module" "block"))
   ("continue_statement" ("_simple_statement" "module" "block"))
   ("raise_statement" ("_simple_statement" "module" "block"))
   ("await" ("expression"))
   ("comparison_operator" ("expression"))
   ("as_pattern" ("expression"))
   ("conditional_expression" ("expression"))
   ("primary_expression" ("attribute" "expression" "comparison_operator" "subscript" "unary_operator" "call" "binary_operator"))
   ("boolean_operator" ("expression"))
   ("named_expression" ("expression"))
   ("not_operator" ("expression"))
   ("lambda" ("expression"))
   ("list_splat_pattern" ("parameter" "typed_parameter" "pattern"))
   ("identifier" ("attribute" "list_splat_pattern" "class_definition" "case_pattern" "dictionary_splat_pattern" "primary_expression" "default_parameter" "global_statement" "dotted_name" "named_expression" "parameter" "keyword_argument" "nonlocal_statement" "pattern" "aliased_import" "function_definition" "typed_default_parameter" "typed_parameter"))
   ("dictionary_splat_pattern" ("parameter" "typed_parameter"))
   ("default_parameter" ("parameter"))
   ("keyword_separator" ("parameter"))
   ("typed_parameter" ("parameter"))
   ("typed_default_parameter" ("parameter"))
   ("positional_separator" ("parameter"))
   ("tuple_pattern" ("parameter" "pattern"))
   ("attribute" ("list_splat_pattern" "case_pattern" "dictionary_splat_pattern" "primary_expression" "pattern"))
   ("list_pattern" ("pattern"))
   ("subscript" ("list_splat_pattern" "case_pattern" "dictionary_splat_pattern" "primary_expression" "pattern"))
   ("dictionary_comprehension" ("primary_expression"))
   ("call" ("primary_expression"))
   ("false" ("primary_expression"))
   ("list_comprehension" ("primary_expression"))
   ("integer" ("primary_expression"))
   ("generator_expression" ("call" "primary_expression"))
   ("none" ("primary_expression"))
   ("set" ("primary_expression"))
   ("concatenated_string" ("primary_expression"))
   ("list" ("primary_expression"))
   ("true" ("primary_expression"))
   ("parenthesized_expression" ("argument_list" "parenthesized_expression" "parenthesized_list_splat" "primary_expression"))
   ("unary_operator" ("primary_expression"))
   ("string" ("exec_statement" "concatenated_string" "primary_expression"))
   ("set_comprehension" ("primary_expression"))
   ("ellipsis" ("primary_expression"))
   ("binary_operator" ("primary_expression"))
   ("float" ("primary_expression"))
   ("dictionary" ("primary_expression"))
   ("tuple" ("primary_expression"))
   ("dotted_name" ("import_statement" "future_import_statement" "import_from_statement" "relative_import" "aliased_import"))
   ("dictionary_splat" ("argument_list" "dictionary"))
   ("keyword_argument" ("argument_list"))
   ("expression" ("expression_list" "slice" "elif_clause" "if_statement" "boolean_operator" "pair" "generator_expression" "decorator" "print_statement" "set" "format_expression" "return_statement" "conditional_expression" "subscript" "match_statement" "for_in_clause" "exec_statement" "assert_statement" "keyword_argument" "augmented_assignment" "if_clause" "while_statement" "typed_default_parameter" "argument_list" "interpolation" "tuple" "dictionary_splat" "type" "assignment" "with_item" "await" "expression_statement" "except_clause" "for_statement" "list_comprehension" "chevron" "lambda" "except_group_clause" "delete_statement" "list_splat" "as_pattern" "list" "default_parameter" "named_expression" "set_comprehension" "not_operator" "yield" "parenthesized_expression" "raise_statement"))
   ("list_splat" ("set" "list" "parenthesized_list_splat" "argument_list" "parenthesized_expression" "tuple"))
   ("as_pattern_target" ("as_pattern"))
   ("pattern_list" ("for_statement" "assignment" "augmented_assignment" "for_in_clause"))
   ("pattern" ("assignment" "for_statement" "for_in_clause" "augmented_assignment" "pattern_list" "list_pattern" "tuple_pattern"))
   ("expression_list" ("delete_statement" "assignment" "format_expression" "return_statement" "for_statement" "augmented_assignment" "yield" "interpolation" "raise_statement"))
   ("assignment" ("assignment" "augmented_assignment" "expression_statement"))
   ("yield" ("set" "assignment" "format_expression" "expression_statement" "list" "parenthesized_expression" "augmented_assignment" "interpolation" "tuple"))
   ("augmented_assignment" ("assignment" "augmented_assignment" "expression_statement"))
   ("type" ("function_definition" "assignment" "typed_parameter" "typed_default_parameter"))
   ("argument_list" ("class_definition" "call"))
   ("block" ("except_group_clause" "class_definition" "except_clause" "elif_clause" "for_statement" "if_statement" "case_clause" "while_statement" "finally_clause" "function_definition" "with_statement" "try_statement" "else_clause"))
   ("if_clause" ("dictionary_comprehension" "list_comprehension" "case_clause" "generator_expression" "set_comprehension"))
   ("case_pattern" ("case_clause"))
   ("decorator" ("decorated_definition"))
   ("pair" ("dictionary_comprehension" "dictionary"))
   ("for_in_clause" ("list_comprehension" "set_comprehension" "dictionary_comprehension" "generator_expression"))
   ("else_clause" ("try_statement" "for_statement" "if_statement" "while_statement"))
   ("format_specifier" ("interpolation" "format_expression"))
   ("type_conversion" ("interpolation" "format_expression"))
   ("format_expression" ("format_specifier"))
   ("parameters" ("function_definition"))
   ("aliased_import" ("import_statement" "future_import_statement" "import_from_statement"))
   ("elif_clause" ("if_statement"))
   ("wildcard_import" ("import_from_statement"))
   ("relative_import" ("import_from_statement"))
   ("lambda_parameters" ("lambda"))
   ("parameter" ("lambda_parameters" "parameters"))
   ("parenthesized_list_splat" ("set" "list" "tuple"))
   ("case_clause" ("match_statement"))
   ("chevron" ("print_statement"))
   ("import_prefix" ("relative_import"))
   ("interpolation" ("string"))
   ("string_content" ("string"))
   ("escape_sequence" ("string_content"))
   ("slice" ("subscript"))
   ("except_clause" ("try_statement"))
   ("finally_clause" ("try_statement"))
   ("except_group_clause" ("try_statement"))
   ("with_item" ("with_clause"))
   ("with_clause" ("with_statement"))
  )
)
;; END Inverse production rules for python

;; START Production rules for c
(defconst combobulate-rules-c
 '(("_abstract_declarator" (:*unnamed* ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator")))
 ("_declarator" (:*unnamed* ("parenthesized_declarator" "array_declarator" "identifier" "function_declarator" "pointer_declarator" "attributed_declarator")))
 ("_expression" (:*unnamed* ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("_field_declarator" (:*unnamed* ("parenthesized_declarator" "array_declarator" "function_declarator" "field_identifier" "pointer_declarator" "attributed_declarator")))
 ("_statement" (:*unnamed* ("case_statement" "expression_statement" "return_statement" "for_statement" "labeled_statement" "if_statement" "break_statement" "goto_statement" "do_statement" "attributed_statement" "while_statement" "compound_statement" "switch_statement" "continue_statement")))
 ("_type_declarator" (:*unnamed* ("parenthesized_declarator" "array_declarator" "function_declarator" "type_identifier" "pointer_declarator" "attributed_declarator")))
 ("_type_specifier" (:*unnamed* ("sized_type_specifier" "type_identifier" "struct_specifier" "enum_specifier" "primitive_type" "union_specifier" "macro_type_specifier")))
 ("abstract_array_declarator" (:*unnamed* ("type_qualifier") :declarator ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator") :size ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("abstract_function_declarator" (:declarator ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator") :parameters ("parameter_list")))
 ("abstract_parenthesized_declarator" (:*unnamed* ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator")))
 ("abstract_pointer_declarator" (:*unnamed* ("type_qualifier") :declarator ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator")))
 ("argument_list" (:*unnamed* ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "preproc_defined" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("array_declarator" (:*unnamed* ("type_qualifier") :declarator ("array_declarator" "identifier" "type_identifier" "field_identifier" "pointer_declarator" "parenthesized_declarator" "function_declarator" "attributed_declarator") :size ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("assignment_expression" (:left ("subscript_expression" "identifier" "pointer_expression" "parenthesized_expression" "field_expression" "call_expression") :operator nil :right ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("attribute" (:*unnamed* ("argument_list") :name ("identifier") :prefix ("identifier")))
 ("attribute_declaration" (:*unnamed* ("attribute")))
 ("attribute_specifier" (:*unnamed* ("argument_list")))
 ("attributed_declarator" (:*unnamed* ("array_declarator" "identifier" "type_identifier" "field_identifier" "pointer_declarator" "parenthesized_declarator" "function_declarator" "attribute_declaration" "attributed_declarator")))
 ("attributed_statement" (:*unnamed* ("case_statement" "expression_statement" "return_statement" "for_statement" "labeled_statement" "if_statement" "break_statement" "goto_statement" "do_statement" "attribute_declaration" "attributed_statement" "while_statement" "compound_statement" "switch_statement" "continue_statement")))
 ("binary_expression" (:left ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "preproc_defined" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal") :operator nil :right ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "preproc_defined" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("bitfield_clause" (:*unnamed* ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("call_expression" (:arguments ("argument_list") :function ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("case_statement" (:*unnamed* ("expression_statement" "return_statement" "declaration" "for_statement" "labeled_statement" "if_statement" "break_statement" "goto_statement" "do_statement" "attributed_statement" "while_statement" "type_definition" "compound_statement" "switch_statement" "continue_statement") :value ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("cast_expression" (:type ("type_descriptor") :value ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("char_literal" (:*unnamed* ("escape_sequence")))
 ("comma_expression" (:left ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal") :right ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "comma_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("compound_literal_expression" (:type ("type_descriptor") :value ("initializer_list")))
 ("compound_statement" (:*unnamed* ("sized_type_specifier" "preproc_call" "case_statement" "expression_statement" "struct_specifier" "declaration" "for_statement" "if_statement" "preproc_function_def" "preproc_ifdef" "attributed_statement" "primitive_type" "preproc_if" "macro_type_specifier" "preproc_include" "return_statement" "type_identifier" "enum_specifier" "linkage_specification" "labeled_statement" "break_statement" "function_definition" "goto_statement" "do_statement" "while_statement" "type_definition" "compound_statement" "switch_statement" "continue_statement" "union_specifier" "preproc_def")))
 ("concatenated_string" (:*unnamed* ("string_literal")))
 ("conditional_expression" (:alternative ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal") :condition ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal") :consequence ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("declaration" (:*unnamed* ("attribute_specifier" "attribute_declaration" "ms_declspec_modifier" "storage_class_specifier" "type_qualifier") :declarator ("parenthesized_declarator" "array_declarator" "identifier" "function_declarator" "init_declarator" "pointer_declarator" "attributed_declarator") :type ("sized_type_specifier" "type_identifier" "struct_specifier" "enum_specifier" "primitive_type" "union_specifier" "macro_type_specifier")))
 ("declaration_list" (:*unnamed* ("sized_type_specifier" "preproc_call" "case_statement" "expression_statement" "struct_specifier" "declaration" "for_statement" "if_statement" "preproc_function_def" "preproc_ifdef" "attributed_statement" "primitive_type" "preproc_if" "macro_type_specifier" "preproc_include" "return_statement" "type_identifier" "enum_specifier" "linkage_specification" "labeled_statement" "break_statement" "function_definition" "goto_statement" "do_statement" "while_statement" "type_definition" "compound_statement" "switch_statement" "continue_statement" "union_specifier" "preproc_def")))
 ("do_statement" (:body ("case_statement" "expression_statement" "return_statement" "for_statement" "labeled_statement" "if_statement" "break_statement" "goto_statement" "do_statement" "attributed_statement" "while_statement" "compound_statement" "switch_statement" "continue_statement") :condition ("parenthesized_expression")))
 ("enum_specifier" (:body ("enumerator_list") :name ("type_identifier")))
 ("enumerator" (:name ("identifier") :value ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("enumerator_list" (:*unnamed* ("enumerator")))
 ("expression_statement" (:*unnamed* ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "comma_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("field_declaration" (:*unnamed* ("attribute_specifier" "attribute_declaration" "bitfield_clause" "ms_declspec_modifier" "storage_class_specifier" "type_qualifier") :declarator ("parenthesized_declarator" "array_declarator" "function_declarator" "field_identifier" "pointer_declarator" "attributed_declarator") :type ("sized_type_specifier" "type_identifier" "struct_specifier" "enum_specifier" "primitive_type" "union_specifier" "macro_type_specifier")))
 ("field_declaration_list" (:*unnamed* ("preproc_def" "preproc_call" "preproc_if" "field_declaration" "preproc_function_def" "preproc_ifdef")))
 ("field_designator" (:*unnamed* ("field_identifier")))
 ("field_expression" (:argument ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal") :field ("field_identifier") :operator nil))
 ("for_statement" (:body ("case_statement" "expression_statement" "return_statement" "for_statement" "labeled_statement" "if_statement" "break_statement" "goto_statement" "do_statement" "attributed_statement" "while_statement" "compound_statement" "switch_statement" "continue_statement") :condition ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "comma_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal") :initializer ("declaration" "compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "comma_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal") :update ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "comma_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("function_declarator" (:*unnamed* ("attribute_specifier") :declarator ("array_declarator" "identifier" "type_identifier" "field_identifier" "pointer_declarator" "parenthesized_declarator" "function_declarator" "attributed_declarator") :parameters ("parameter_list")))
 ("function_definition" (:*unnamed* ("attribute_specifier" "attribute_declaration" "ms_declspec_modifier" "ms_call_modifier" "storage_class_specifier" "type_qualifier") :body ("compound_statement") :declarator ("parenthesized_declarator" "array_declarator" "identifier" "function_declarator" "pointer_declarator" "attributed_declarator") :type ("sized_type_specifier" "type_identifier" "struct_specifier" "enum_specifier" "primitive_type" "union_specifier" "macro_type_specifier")))
 ("goto_statement" (:label ("statement_identifier")))
 ("if_statement" (:alternative ("case_statement" "expression_statement" "return_statement" "for_statement" "labeled_statement" "if_statement" "break_statement" "goto_statement" "do_statement" "attributed_statement" "while_statement" "compound_statement" "switch_statement" "continue_statement") :condition ("parenthesized_expression") :consequence ("case_statement" "expression_statement" "return_statement" "for_statement" "labeled_statement" "if_statement" "break_statement" "goto_statement" "do_statement" "attributed_statement" "while_statement" "compound_statement" "switch_statement" "continue_statement")))
 ("init_declarator" (:declarator ("parenthesized_declarator" "array_declarator" "identifier" "function_declarator" "pointer_declarator" "attributed_declarator") :value ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "initializer_list" "parenthesized_expression" "string_literal")))
 ("initializer_list" (:*unnamed* ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "initializer_pair" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "initializer_list" "parenthesized_expression" "string_literal")))
 ("initializer_pair" (:designator ("subscript_designator" "field_designator") :value ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "initializer_list" "parenthesized_expression" "string_literal")))
 ("labeled_statement" (:*unnamed* ("case_statement" "expression_statement" "return_statement" "for_statement" "labeled_statement" "if_statement" "break_statement" "goto_statement" "do_statement" "attributed_statement" "while_statement" "compound_statement" "switch_statement" "continue_statement") :label ("statement_identifier")))
 ("linkage_specification" (:body ("declaration" "function_definition" "declaration_list") :value ("string_literal")))
 ("macro_type_specifier" (:name ("identifier") :type ("type_descriptor")))
 ("ms_based_modifier" (:*unnamed* ("argument_list")))
 ("ms_declspec_modifier" (:*unnamed* ("identifier")))
 ("ms_pointer_modifier" (:*unnamed* ("ms_unsigned_ptr_modifier" "ms_unaligned_ptr_modifier" "ms_signed_ptr_modifier" "ms_restrict_modifier")))
 ("parameter_declaration" (:*unnamed* ("attribute_specifier" "attribute_declaration" "ms_declspec_modifier" "storage_class_specifier" "type_qualifier") :declarator ("array_declarator" "identifier" "abstract_pointer_declarator" "pointer_declarator" "parenthesized_declarator" "abstract_function_declarator" "function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "attributed_declarator") :type ("sized_type_specifier" "type_identifier" "struct_specifier" "enum_specifier" "primitive_type" "union_specifier" "macro_type_specifier")))
 ("parameter_list" (:*unnamed* ("variadic_parameter" "parameter_declaration")))
 ("parenthesized_declarator" (:*unnamed* ("array_declarator" "identifier" "type_identifier" "field_identifier" "pointer_declarator" "parenthesized_declarator" "function_declarator" "attributed_declarator")))
 ("parenthesized_expression" (:*unnamed* ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "preproc_defined" "update_expression" "binary_expression" "comma_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("pointer_declarator" (:*unnamed* ("type_qualifier" "ms_based_modifier" "ms_pointer_modifier") :declarator ("array_declarator" "identifier" "type_identifier" "field_identifier" "pointer_declarator" "parenthesized_declarator" "function_declarator" "attributed_declarator")))
 ("pointer_expression" (:argument ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal") :operator nil))
 ("preproc_call" (:argument ("preproc_arg") :directive ("preproc_directive")))
 ("preproc_def" (:name ("identifier") :value ("preproc_arg")))
 ("preproc_defined" (:*unnamed* ("identifier")))
 ("preproc_elif" (:*unnamed* ("sized_type_specifier" "preproc_call" "case_statement" "if_statement" "preproc_function_def" "preproc_ifdef" "preproc_if" "field_declaration" "return_statement" "type_identifier" "linkage_specification" "break_statement" "compound_statement" "do_statement" "while_statement" "switch_statement" "continue_statement" "union_specifier" "preproc_def" "expression_statement" "struct_specifier" "declaration" "for_statement" "attributed_statement" "primitive_type" "macro_type_specifier" "preproc_include" "enum_specifier" "labeled_statement" "goto_statement" "type_definition" "function_definition") :alternative ("preproc_else" "preproc_elif") :condition ("identifier" "char_literal" "call_expression" "preproc_defined" "number_literal" "binary_expression" "parenthesized_expression" "unary_expression")))
 ("preproc_else" (:*unnamed* ("sized_type_specifier" "preproc_call" "case_statement" "if_statement" "preproc_function_def" "preproc_ifdef" "preproc_if" "field_declaration" "return_statement" "type_identifier" "linkage_specification" "break_statement" "compound_statement" "do_statement" "while_statement" "switch_statement" "continue_statement" "union_specifier" "preproc_def" "expression_statement" "struct_specifier" "declaration" "for_statement" "attributed_statement" "primitive_type" "macro_type_specifier" "preproc_include" "enum_specifier" "labeled_statement" "goto_statement" "type_definition" "function_definition")))
 ("preproc_function_def" (:name ("identifier") :parameters ("preproc_params") :value ("preproc_arg")))
 ("preproc_if" (:*unnamed* ("sized_type_specifier" "preproc_call" "case_statement" "if_statement" "preproc_function_def" "preproc_ifdef" "preproc_if" "field_declaration" "return_statement" "type_identifier" "linkage_specification" "break_statement" "compound_statement" "do_statement" "while_statement" "switch_statement" "continue_statement" "union_specifier" "preproc_def" "expression_statement" "struct_specifier" "declaration" "for_statement" "attributed_statement" "primitive_type" "macro_type_specifier" "preproc_include" "enum_specifier" "labeled_statement" "goto_statement" "type_definition" "function_definition") :alternative ("preproc_else" "preproc_elif") :condition ("identifier" "char_literal" "call_expression" "preproc_defined" "number_literal" "binary_expression" "parenthesized_expression" "unary_expression")))
 ("preproc_ifdef" (:*unnamed* ("sized_type_specifier" "preproc_call" "case_statement" "if_statement" "preproc_function_def" "preproc_ifdef" "preproc_if" "field_declaration" "return_statement" "type_identifier" "linkage_specification" "break_statement" "compound_statement" "do_statement" "while_statement" "switch_statement" "continue_statement" "union_specifier" "preproc_def" "expression_statement" "struct_specifier" "declaration" "for_statement" "attributed_statement" "primitive_type" "macro_type_specifier" "preproc_include" "enum_specifier" "labeled_statement" "goto_statement" "type_definition" "function_definition") :alternative ("preproc_else" "preproc_elif") :name ("identifier")))
 ("preproc_include" (:path ("identifier" "system_lib_string" "call_expression" "string_literal")))
 ("preproc_params" (:*unnamed* ("identifier")))
 ("return_statement" (:*unnamed* ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "comma_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("sized_type_specifier" (:type ("primitive_type" "type_identifier")))
 ("sizeof_expression" (:type ("type_descriptor") :value ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("string_literal" (:*unnamed* ("escape_sequence")))
 ("struct_specifier" (:*unnamed* ("ms_declspec_modifier") :body ("field_declaration_list") :name ("type_identifier")))
 ("subscript_designator" (:*unnamed* ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("subscript_expression" (:argument ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal") :index ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal")))
 ("switch_statement" (:body ("compound_statement") :condition ("parenthesized_expression")))
 ("translation_unit" (:*unnamed* ("sized_type_specifier" "preproc_call" "case_statement" "expression_statement" "struct_specifier" "declaration" "for_statement" "if_statement" "preproc_function_def" "preproc_ifdef" "attributed_statement" "primitive_type" "preproc_if" "macro_type_specifier" "preproc_include" "return_statement" "type_identifier" "enum_specifier" "linkage_specification" "labeled_statement" "break_statement" "function_definition" "goto_statement" "do_statement" "while_statement" "type_definition" "compound_statement" "switch_statement" "continue_statement" "union_specifier" "preproc_def")))
 ("type_definition" (:*unnamed* ("type_qualifier") :declarator ("parenthesized_declarator" "array_declarator" "function_declarator" "type_identifier" "pointer_declarator" "attributed_declarator") :type ("sized_type_specifier" "type_identifier" "struct_specifier" "enum_specifier" "primitive_type" "union_specifier" "macro_type_specifier")))
 ("type_descriptor" (:*unnamed* ("type_qualifier") :declarator ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator") :type ("sized_type_specifier" "type_identifier" "struct_specifier" "enum_specifier" "primitive_type" "union_specifier" "macro_type_specifier")))
 ("unary_expression" (:argument ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "preproc_defined" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal") :operator nil))
 ("union_specifier" (:*unnamed* ("ms_declspec_modifier") :body ("field_declaration_list") :name ("type_identifier")))
 ("update_expression" (:argument ("compound_literal_expression" "call_expression" "false" "number_literal" "cast_expression" "update_expression" "binary_expression" "field_expression" "unary_expression" "null" "identifier" "sizeof_expression" "subscript_expression" "char_literal" "concatenated_string" "assignment_expression" "true" "conditional_expression" "pointer_expression" "parenthesized_expression" "string_literal") :operator nil))
 ("while_statement" (:body ("case_statement" "expression_statement" "return_statement" "for_statement" "labeled_statement" "if_statement" "break_statement" "goto_statement" "do_statement" "attributed_statement" "while_statement" "compound_statement" "switch_statement" "continue_statement") :condition ("parenthesized_expression")))
))
;; END Production rules for c
;; START Inverse production rules for c
(defconst combobulate-rules-c-inverted
 '(("abstract_function_declarator" ("abstract_pointer_declarator" "parameter_declaration" "type_descriptor" "abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "_abstract_declarator"))
   ("abstract_array_declarator" ("abstract_pointer_declarator" "parameter_declaration" "type_descriptor" "abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "_abstract_declarator"))
   ("abstract_parenthesized_declarator" ("abstract_pointer_declarator" "parameter_declaration" "type_descriptor" "abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "_abstract_declarator"))
   ("abstract_pointer_declarator" ("abstract_pointer_declarator" "parameter_declaration" "type_descriptor" "abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "_abstract_declarator"))
   ("parenthesized_declarator" ("array_declarator" "_declarator" "declaration" "_field_declarator" "pointer_declarator" "parameter_declaration" "parenthesized_declarator" "function_declarator" "init_declarator" "type_definition" "function_definition" "field_declaration" "_type_declarator" "attributed_declarator"))
   ("array_declarator" ("array_declarator" "_declarator" "declaration" "_field_declarator" "pointer_declarator" "parameter_declaration" "parenthesized_declarator" "function_declarator" "init_declarator" "type_definition" "function_definition" "field_declaration" "_type_declarator" "attributed_declarator"))
   ("identifier" ("array_declarator" "case_statement" "preproc_defined" "preproc_function_def" "preproc_ifdef" "initializer_pair" "binary_expression" "preproc_if" "attributed_declarator" "attribute" "_declarator" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "pointer_declarator" "_expression" "function_declarator" "initializer_list" "argument_list" "preproc_def" "expression_statement" "ms_declspec_modifier" "declaration" "for_statement" "call_expression" "enumerator" "parameter_declaration" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "macro_type_specifier" "sizeof_expression" "subscript_expression" "assignment_expression" "preproc_include" "pointer_expression" "parenthesized_declarator" "bitfield_clause" "init_declarator" "function_definition" "comma_expression" "preproc_params" "preproc_elif"))
   ("function_declarator" ("array_declarator" "_declarator" "declaration" "_field_declarator" "pointer_declarator" "parameter_declaration" "parenthesized_declarator" "function_declarator" "init_declarator" "type_definition" "function_definition" "field_declaration" "_type_declarator" "attributed_declarator"))
   ("pointer_declarator" ("array_declarator" "_declarator" "declaration" "_field_declarator" "pointer_declarator" "parameter_declaration" "parenthesized_declarator" "function_declarator" "init_declarator" "type_definition" "function_definition" "field_declaration" "_type_declarator" "attributed_declarator"))
   ("attributed_declarator" ("array_declarator" "_declarator" "declaration" "_field_declarator" "pointer_declarator" "parameter_declaration" "parenthesized_declarator" "function_declarator" "init_declarator" "type_definition" "function_definition" "field_declaration" "_type_declarator" "attributed_declarator"))
   ("compound_literal_expression" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("call_expression" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "preproc_if" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "preproc_include" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression" "preproc_elif"))
   ("false" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("number_literal" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "preproc_if" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression" "preproc_elif"))
   ("cast_expression" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("update_expression" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("binary_expression" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "preproc_if" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression" "preproc_elif"))
   ("field_expression" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("unary_expression" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "preproc_if" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression" "preproc_elif"))
   ("null" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("sizeof_expression" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("subscript_expression" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("char_literal" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "preproc_if" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression" "preproc_elif"))
   ("concatenated_string" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("assignment_expression" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("true" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("conditional_expression" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("pointer_expression" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("parenthesized_expression" ("array_declarator" "case_statement" "if_statement" "initializer_pair" "binary_expression" "preproc_if" "parenthesized_expression" "conditional_expression" "return_statement" "subscript_designator" "_expression" "do_statement" "while_statement" "initializer_list" "argument_list" "switch_statement" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression" "preproc_elif"))
   ("string_literal" ("array_declarator" "case_statement" "initializer_pair" "binary_expression" "concatenated_string" "parenthesized_expression" "conditional_expression" "return_statement" "linkage_specification" "subscript_designator" "_expression" "initializer_list" "argument_list" "expression_statement" "for_statement" "call_expression" "enumerator" "cast_expression" "abstract_array_declarator" "update_expression" "field_expression" "unary_expression" "sizeof_expression" "subscript_expression" "assignment_expression" "preproc_include" "pointer_expression" "bitfield_clause" "init_declarator" "comma_expression"))
   ("field_identifier" ("array_declarator" "_field_declarator" "pointer_declarator" "field_designator" "parenthesized_declarator" "function_declarator" "field_expression" "field_declaration" "attributed_declarator"))
   ("case_statement" ("_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "translation_unit" "preproc_ifdef" "do_statement" "attributed_statement" "while_statement" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("expression_statement" ("_statement" "case_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "translation_unit" "preproc_ifdef" "do_statement" "attributed_statement" "while_statement" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("return_statement" ("_statement" "case_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "translation_unit" "preproc_ifdef" "do_statement" "attributed_statement" "while_statement" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("for_statement" ("_statement" "case_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "translation_unit" "preproc_ifdef" "do_statement" "attributed_statement" "while_statement" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("labeled_statement" ("_statement" "case_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "translation_unit" "preproc_ifdef" "do_statement" "attributed_statement" "while_statement" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("if_statement" ("_statement" "case_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "translation_unit" "preproc_ifdef" "do_statement" "attributed_statement" "while_statement" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("break_statement" ("_statement" "case_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "translation_unit" "preproc_ifdef" "do_statement" "attributed_statement" "while_statement" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("goto_statement" ("_statement" "case_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "translation_unit" "preproc_ifdef" "do_statement" "attributed_statement" "while_statement" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("do_statement" ("_statement" "case_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "translation_unit" "preproc_ifdef" "do_statement" "attributed_statement" "while_statement" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("attributed_statement" ("_statement" "case_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "translation_unit" "preproc_ifdef" "do_statement" "attributed_statement" "while_statement" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("while_statement" ("_statement" "case_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "translation_unit" "preproc_ifdef" "do_statement" "attributed_statement" "while_statement" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("compound_statement" ("_statement" "case_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "function_definition" "preproc_ifdef" "translation_unit" "do_statement" "attributed_statement" "while_statement" "compound_statement" "switch_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("switch_statement" ("_statement" "case_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "translation_unit" "preproc_ifdef" "do_statement" "attributed_statement" "while_statement" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("continue_statement" ("_statement" "case_statement" "for_statement" "labeled_statement" "if_statement" "preproc_if" "translation_unit" "preproc_ifdef" "do_statement" "attributed_statement" "while_statement" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("type_identifier" ("array_declarator" "sized_type_specifier" "preproc_ifdef" "type_descriptor" "_type_specifier" "preproc_if" "field_declaration" "_type_declarator" "attributed_declarator" "translation_unit" "pointer_declarator" "function_declarator" "compound_statement" "union_specifier" "struct_specifier" "declaration" "parameter_declaration" "declaration_list" "preproc_else" "enum_specifier" "parenthesized_declarator" "type_definition" "function_definition" "preproc_elif"))
   ("sized_type_specifier" ("declaration" "translation_unit" "preproc_if" "function_definition" "parameter_declaration" "preproc_ifdef" "type_descriptor" "_type_specifier" "type_definition" "compound_statement" "declaration_list" "field_declaration" "preproc_else" "preproc_elif"))
   ("struct_specifier" ("declaration" "translation_unit" "preproc_if" "function_definition" "parameter_declaration" "preproc_ifdef" "type_descriptor" "_type_specifier" "type_definition" "compound_statement" "declaration_list" "field_declaration" "preproc_else" "preproc_elif"))
   ("enum_specifier" ("declaration" "translation_unit" "preproc_if" "function_definition" "parameter_declaration" "preproc_ifdef" "type_descriptor" "_type_specifier" "type_definition" "compound_statement" "declaration_list" "field_declaration" "preproc_else" "preproc_elif"))
   ("primitive_type" ("sized_type_specifier" "declaration" "translation_unit" "preproc_if" "function_definition" "parameter_declaration" "preproc_ifdef" "type_descriptor" "_type_specifier" "type_definition" "compound_statement" "declaration_list" "field_declaration" "preproc_else" "preproc_elif"))
   ("union_specifier" ("declaration" "translation_unit" "preproc_if" "function_definition" "parameter_declaration" "preproc_ifdef" "type_descriptor" "_type_specifier" "type_definition" "compound_statement" "declaration_list" "field_declaration" "preproc_else" "preproc_elif"))
   ("macro_type_specifier" ("declaration" "translation_unit" "preproc_if" "function_definition" "parameter_declaration" "preproc_ifdef" "type_descriptor" "_type_specifier" "type_definition" "compound_statement" "declaration_list" "field_declaration" "preproc_else" "preproc_elif"))
   ("type_qualifier" ("array_declarator" "abstract_pointer_declarator" "declaration" "pointer_declarator" "parameter_declaration" "type_descriptor" "abstract_array_declarator" "type_definition" "function_definition" "field_declaration"))
   ("parameter_list" ("abstract_function_declarator" "function_declarator"))
   ("preproc_defined" ("binary_expression" "argument_list" "parenthesized_expression" "preproc_if" "unary_expression" "preproc_elif"))
   ("argument_list" ("attribute" "attribute_specifier" "call_expression" "ms_based_modifier"))
   ("attribute" ("attribute_declaration"))
   ("attribute_declaration" ("declaration" "parameter_declaration" "attributed_statement" "function_definition" "field_declaration" "attributed_declarator"))
   ("declaration" ("case_statement" "for_statement" "linkage_specification" "translation_unit" "preproc_if" "preproc_ifdef" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("type_definition" ("case_statement" "translation_unit" "preproc_if" "preproc_ifdef" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("type_descriptor" ("cast_expression" "compound_literal_expression" "sizeof_expression" "macro_type_specifier"))
   ("escape_sequence" ("char_literal" "string_literal"))
   ("comma_expression" ("expression_statement" "return_statement" "parenthesized_expression" "for_statement" "comma_expression"))
   ("initializer_list" ("initializer_pair" "initializer_list" "compound_literal_expression" "init_declarator"))
   ("preproc_call" ("translation_unit" "preproc_if" "preproc_ifdef" "field_declaration_list" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("preproc_function_def" ("translation_unit" "preproc_if" "preproc_ifdef" "field_declaration_list" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("preproc_ifdef" ("translation_unit" "preproc_if" "preproc_ifdef" "field_declaration_list" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("preproc_if" ("translation_unit" "preproc_if" "preproc_ifdef" "field_declaration_list" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("preproc_include" ("translation_unit" "preproc_if" "preproc_ifdef" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("linkage_specification" ("translation_unit" "preproc_if" "preproc_ifdef" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("function_definition" ("linkage_specification" "translation_unit" "preproc_if" "preproc_ifdef" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("preproc_def" ("translation_unit" "preproc_if" "preproc_ifdef" "field_declaration_list" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("attribute_specifier" ("declaration" "parameter_declaration" "function_declarator" "function_definition" "field_declaration"))
   ("ms_declspec_modifier" ("struct_specifier" "declaration" "parameter_declaration" "function_definition" "union_specifier" "field_declaration"))
   ("storage_class_specifier" ("declaration" "function_definition" "field_declaration" "parameter_declaration"))
   ("init_declarator" ("declaration"))
   ("enumerator_list" ("enum_specifier"))
   ("enumerator" ("enumerator_list"))
   ("bitfield_clause" ("field_declaration"))
   ("field_declaration" ("preproc_ifdef" "field_declaration_list" "preproc_if" "preproc_else" "preproc_elif"))
   ("ms_call_modifier" ("function_definition"))
   ("statement_identifier" ("goto_statement" "labeled_statement"))
   ("initializer_pair" ("initializer_list"))
   ("subscript_designator" ("initializer_pair"))
   ("field_designator" ("initializer_pair"))
   ("declaration_list" ("linkage_specification"))
   ("ms_unsigned_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_unaligned_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_signed_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_restrict_modifier" ("ms_pointer_modifier"))
   ("variadic_parameter" ("parameter_list"))
   ("parameter_declaration" ("parameter_list"))
   ("ms_based_modifier" ("pointer_declarator"))
   ("ms_pointer_modifier" ("pointer_declarator"))
   ("preproc_arg" ("preproc_call" "preproc_function_def" "preproc_def"))
   ("preproc_directive" ("preproc_call"))
   ("preproc_else" ("preproc_ifdef" "preproc_if" "preproc_elif"))
   ("preproc_elif" ("preproc_ifdef" "preproc_if" "preproc_elif"))
   ("preproc_params" ("preproc_function_def"))
   ("system_lib_string" ("preproc_include"))
   ("field_declaration_list" ("union_specifier" "struct_specifier"))
  )
)
;; END Inverse production rules for c

;; START Production rules for html
(defconst combobulate-rules-html
 '(("attribute" (:*unnamed* ("quoted_attribute_value" "attribute_name" "attribute_value")))
 ("element" (:*unnamed* ("start_tag" "doctype" "element" "style_element" "end_tag" "erroneous_end_tag" "text" "script_element" "self_closing_tag")))
 ("end_tag" (:*unnamed* ("tag_name")))
 ("erroneous_end_tag" (:*unnamed* ("erroneous_end_tag_name")))
 ("fragment" (:*unnamed* ("text" "script_element" "element" "doctype" "style_element" "erroneous_end_tag")))
 ("quoted_attribute_value" (:*unnamed* ("attribute_value")))
 ("script_element" (:*unnamed* ("raw_text" "end_tag" "start_tag")))
 ("self_closing_tag" (:*unnamed* ("attribute" "tag_name")))
 ("start_tag" (:*unnamed* ("attribute" "tag_name")))
 ("style_element" (:*unnamed* ("raw_text" "end_tag" "start_tag")))
))
;; END Production rules for html
;; START Inverse production rules for html
(defconst combobulate-rules-html-inverted
 '(("quoted_attribute_value" ("attribute"))
   ("attribute_name" ("attribute"))
   ("attribute_value" ("attribute" "quoted_attribute_value"))
   ("start_tag" ("style_element" "element" "script_element"))
   ("doctype" ("element" "fragment"))
   ("element" ("element" "fragment"))
   ("style_element" ("element" "fragment"))
   ("end_tag" ("style_element" "element" "script_element"))
   ("erroneous_end_tag" ("element" "fragment"))
   ("text" ("element" "fragment"))
   ("script_element" ("element" "fragment"))
   ("self_closing_tag" ("element"))
   ("tag_name" ("end_tag" "start_tag" "self_closing_tag"))
   ("erroneous_end_tag_name" ("erroneous_end_tag"))
   ("raw_text" ("style_element" "script_element"))
   ("attribute" ("start_tag" "self_closing_tag"))
  )
)
;; END Inverse production rules for html

;; START Production rules for toml
(defconst combobulate-rules-toml
 '(("array" (:*unnamed* ("inline_table" "local_date_time" "local_date" "string" "array" "local_time" "integer" "offset_date_time" "float" "boolean")))
 ("document" (:*unnamed* ("pair" "table" "table_array_element")))
 ("dotted_key" (:*unnamed* ("quoted_key" "bare_key" "dotted_key")))
 ("inline_table" (:*unnamed* ("pair")))
 ("pair" (:*unnamed* ("quoted_key" "dotted_key" "inline_table" "local_date_time" "local_date" "bare_key" "string" "array" "local_time" "integer" "offset_date_time" "float" "boolean")))
 ("quoted_key" (:*unnamed* ("escape_sequence")))
 ("string" (:*unnamed* ("escape_sequence")))
 ("table" (:*unnamed* ("pair" "quoted_key" "bare_key" "dotted_key")))
 ("table_array_element" (:*unnamed* ("pair" "quoted_key" "bare_key" "dotted_key")))
))
;; END Production rules for toml
;; START Inverse production rules for toml
(defconst combobulate-rules-toml-inverted
 '(("inline_table" ("pair" "array"))
   ("local_date_time" ("pair" "array"))
   ("local_date" ("pair" "array"))
   ("string" ("pair" "array"))
   ("array" ("pair" "array"))
   ("local_time" ("pair" "array"))
   ("integer" ("pair" "array"))
   ("offset_date_time" ("pair" "array"))
   ("float" ("pair" "array"))
   ("boolean" ("pair" "array"))
   ("pair" ("document" "table" "table_array_element" "inline_table"))
   ("table" ("document"))
   ("table_array_element" ("document"))
   ("quoted_key" ("pair" "table" "table_array_element" "dotted_key"))
   ("bare_key" ("pair" "table" "table_array_element" "dotted_key"))
   ("dotted_key" ("pair" "table" "table_array_element" "dotted_key"))
   ("escape_sequence" ("quoted_key" "string"))
  )
)
;; END Inverse production rules for toml

;; START Production rules for json
(defconst combobulate-rules-json
  '(("_value" (:*unnamed* ("null" "string" "number" "true" "object" "false" "array")))
    ("array" (:*unnamed* ("null" "string" "number" "true" "object" "false" "array")))
    ("document" (:*unnamed* ("null" "string" "number" "true" "object" "false" "array")))
    ("object" (:*unnamed* ("pair")))
    ("pair" (:key ("string" "number") :value ("null" "string" "number" "true" "object" "false" "array")))
    ("string" (:*unnamed* ("string_content")))
    ("string_content" (:*unnamed* ("escape_sequence")))
    ))
;; END Production rules for json
;; START Inverse production rules for json
(defconst combobulate-rules-json-inverted
  '(("null" ("_value" "document" "pair" "array"))
    ("string" ("_value" "document" "pair" "array"))
    ("number" ("_value" "document" "pair" "array"))
    ("true" ("_value" "document" "pair" "array"))
    ("object" ("_value" "document" "pair" "array"))
    ("false" ("_value" "document" "pair" "array"))
    ("array" ("_value" "document" "pair" "array"))
    ("pair" ("object"))
    ("string_content" ("string"))
    ("escape_sequence" ("string_content"))
    )
  )
;; END Inverse production rules for json

;; START Auto-generated list of all languages
(defconst combobulate-rules-list
  '(c css go html javascript json jsx python toml tsx typescript yaml)
  "A list of all the languages that have production rules."
  )
;; END Auto-generated list of all languages

(provide 'combobulate-rules)

