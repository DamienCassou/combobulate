;; -*- lexical-binding: t -*-
;; This file is generated by build-relationships.py
;; Do not edit this file directly.

;; START Production rules for yaml
(defconst combobulate-rules-yaml 
 '(("alias" (:*unnamed* ("alias_name"))) 
 ("alias_name" (:*unnamed* nil)) 
 ("anchor" (:*unnamed* ("anchor_name"))) 
 ("anchor_name" (:*unnamed* nil)) 
 ("block_mapping" (:*unnamed* ("block_mapping_pair"))) 
 ("block_mapping_pair" (:*unnamed* nil :key ("block_node" "flow_node") :value ("block_node" "flow_node"))) 
 ("block_node" (:*unnamed* ("block_mapping" "block_scalar" "tag" "anchor" "block_sequence"))) 
 ("block_scalar" (:*unnamed* nil)) 
 ("block_sequence" (:*unnamed* ("block_sequence_item"))) 
 ("block_sequence_item" (:*unnamed* ("block_node" "flow_node"))) 
 ("boolean_scalar" (:*unnamed* nil)) 
 ("comment" (:*unnamed* nil)) 
 ("directive_name" (:*unnamed* nil)) 
 ("directive_parameter" (:*unnamed* nil)) 
 ("document" (:*unnamed* ("block_node" "reserved_directive" "yaml_directive" "tag_directive" "flow_node"))) 
 ("double_quote_scalar" (:*unnamed* ("escape_sequence"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("float_scalar" (:*unnamed* nil)) 
 ("flow_mapping" (:*unnamed* ("flow_pair" "flow_node"))) 
 ("flow_node" (:*unnamed* ("double_quote_scalar" "single_quote_scalar" "anchor" "tag" "flow_sequence" "alias" "flow_mapping" "plain_scalar"))) 
 ("flow_pair" (:*unnamed* nil :key ("flow_node") :value ("flow_node"))) 
 ("flow_sequence" (:*unnamed* ("flow_pair" "flow_node"))) 
 ("integer_scalar" (:*unnamed* nil)) 
 ("null_scalar" (:*unnamed* nil)) 
 ("plain_scalar" (:*unnamed* ("null_scalar" "boolean_scalar" "integer_scalar" "string_scalar" "float_scalar"))) 
 ("reserved_directive" (:*unnamed* ("directive_name" "directive_parameter"))) 
 ("single_quote_scalar" (:*unnamed* ("escape_sequence"))) 
 ("stream" (:*unnamed* ("document"))) 
 ("string_scalar" (:*unnamed* nil)) 
 ("tag" (:*unnamed* nil)) 
 ("tag_directive" (:*unnamed* ("tag_handle" "tag_prefix"))) 
 ("tag_handle" (:*unnamed* nil)) 
 ("tag_prefix" (:*unnamed* nil)) 
 ("yaml_directive" (:*unnamed* ("yaml_version"))) 
 ("yaml_version" (:*unnamed* nil)) 
))
;; END Production rules for yaml
;; START Inverse production rules for yaml
(defconst combobulate-rules-yaml-inverse 
 '(("alias" ("flow_node"))
   ("alias_name" ("alias"))
   ("anchor" ("block_node" "flow_node"))
   ("anchor_name" ("anchor"))
   ("block_mapping" ("block_node"))
   ("block_mapping_pair" ("block_mapping"))
   ("block_node" ("document" "block_mapping_pair" "block_sequence_item"))
   ("block_scalar" ("block_node"))
   ("block_sequence" ("block_node"))
   ("block_sequence_item" ("block_sequence"))
   ("boolean_scalar" ("plain_scalar"))
   ("directive_name" ("reserved_directive"))
   ("directive_parameter" ("reserved_directive"))
   ("document" ("stream"))
   ("double_quote_scalar" ("flow_node"))
   ("escape_sequence" ("single_quote_scalar" "double_quote_scalar"))
   ("float_scalar" ("plain_scalar"))
   ("flow_mapping" ("flow_node"))
   ("flow_node" ("block_mapping_pair" "block_sequence_item" "flow_sequence" "flow_mapping" "document" "flow_pair"))
   ("flow_pair" ("flow_mapping" "flow_sequence"))
   ("flow_sequence" ("flow_node"))
   ("integer_scalar" ("plain_scalar"))
   ("null_scalar" ("plain_scalar"))
   ("plain_scalar" ("flow_node"))
   ("reserved_directive" ("document"))
   ("single_quote_scalar" ("flow_node"))
   ("string_scalar" ("plain_scalar"))
   ("tag" ("block_node" "flow_node"))
   ("tag_directive" ("document"))
   ("tag_handle" ("tag_directive"))
   ("tag_prefix" ("tag_directive"))
   ("yaml_directive" ("document"))
   ("yaml_version" ("yaml_directive"))
  ) 
)
;; END Inverse production rules for yaml
;; START All node types in yaml
(defconst combobulate-rules-yaml-types 
 '("alias" "alias_name" "anchor" "anchor_name" "block_mapping" "block_mapping_pair" "block_node" "block_scalar" "block_sequence" "block_sequence_item" "boolean_scalar" "comment" "directive_name" "directive_parameter" "document" "double_quote_scalar" "escape_sequence" "float_scalar" "flow_mapping" "flow_node" "flow_pair" "flow_sequence" "integer_scalar" "null_scalar" "plain_scalar" "reserved_directive" "single_quote_scalar" "stream" "string_scalar" "tag" "tag_directive" "tag_handle" "tag_prefix" "yaml_directive" "yaml_version") 
)
;; END All node types in yaml
;; START All supertypes in yaml
(defconst combobulate-rules-yaml-supertypes 
 nil 
)
;; END All supertypes in yaml

;; START Production rules for tsx
(defconst combobulate-rules-tsx 
 '(("_primary_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "tuple_type" "predefined_type" "union_type" "intersection_type" "type_query"))) 
 ("abstract_class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("abstract_method_signature" (:*unnamed* ("accessibility_modifier") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("accessibility_modifier" (:*unnamed* nil)) 
 ("ambient_declaration" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "declaration" "property_identifier" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type" "statement_block"))) 
 ("arguments" (:*unnamed* ("expression" "spread_element"))) 
 ("array" (:*unnamed* ("expression" "spread_element"))) 
 ("array_pattern" (:*unnamed* ("assignment_pattern" "pattern"))) 
 ("array_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "tuple_type" "predefined_type" "union_type" "intersection_type" "type_query"))) 
 ("arrow_function" (:*unnamed* nil :body ("expression" "statement_block") :parameter ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("as_expression" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "expression" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("asserts" (:*unnamed* ("type_predicate" "this" "identifier"))) 
 ("asserts_annotation" (:*unnamed* ("asserts"))) 
 ("assignment_expression" (:*unnamed* nil :left ("undefined" "array_pattern" "member_expression" "non_null_expression" "subscript_expression" "identifier" "parenthesized_expression" "object_pattern") :right ("expression"))) 
 ("assignment_pattern" (:*unnamed* nil :left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:*unnamed* nil :left ("subscript_expression" "identifier" "member_expression" "parenthesized_expression" "non_null_expression") :operator nil :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:*unnamed* nil :left ("expression") :operator nil :right ("expression"))) 
 ("break_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("call_expression" (:*unnamed* nil :arguments ("template_string" "arguments") :function ("expression") :type_arguments ("type_arguments"))) 
 ("call_signature" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("catch_clause" (:*unnamed* nil :body ("statement_block") :parameter ("array_pattern" "identifier" "object_pattern") :type ("type_annotation"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_body" (:*unnamed* ("method_signature" "abstract_method_signature" "decorator" "class_static_block" "method_definition" "index_signature" "public_field_definition"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_heritage" (:*unnamed* ("extends_clause" "implements_clause"))) 
 ("class_static_block" (:*unnamed* nil :body ("statement_block"))) 
 ("comment" (:*unnamed* nil)) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("conditional_type" (:*unnamed* nil :alternative ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :consequence ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :left ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :right ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("constraint" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("construct_signature" (:*unnamed* nil :parameters ("formal_parameters") :type ("type_annotation") :type_parameters ("type_parameters"))) 
 ("constructor_type" (:*unnamed* nil :parameters ("formal_parameters") :type ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :type_parameters ("type_parameters"))) 
 ("continue_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("debugger_statement" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("function_declaration" "interface_declaration" "class_declaration" "abstract_class_declaration" "internal_module" "lexical_declaration" "ambient_declaration" "enum_declaration" "type_alias_declaration" "generator_function_declaration" "import_alias" "module" "variable_declaration" "function_signature"))) 
 ("decorator" (:*unnamed* ("call_expression" "identifier" "member_expression"))) 
 ("default_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("empty_statement" (:*unnamed* nil)) 
 ("enum_assignment" (:*unnamed* nil :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :value ("expression"))) 
 ("enum_body" (:*unnamed* ("enum_assignment") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string"))) 
 ("enum_declaration" (:*unnamed* nil :body ("enum_body") :name ("identifier"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("existential_type" (:*unnamed* nil)) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:*unnamed* nil :alias ("string" "identifier") :name ("string" "identifier"))) 
 ("export_statement" (:*unnamed* ("expression" "namespace_export" "export_clause" "identifier") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression" (:*unnamed* ("glimmer_template" "instantiation_expression" "as_expression" "jsx_self_closing_element" "yield_expression" "primary_expression" "update_expression" "assignment_expression" "binary_expression" "internal_module" "unary_expression" "augmented_assignment_expression" "await_expression" "ternary_expression" "new_expression" "satisfies_expression" "jsx_element"))) 
 ("expression_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("extends_clause" (:*unnamed* nil :type_arguments ("type_arguments") :value ("expression"))) 
 ("extends_type_clause" (:*unnamed* nil :type ("nested_type_identifier" "type_identifier" "generic_type"))) 
 ("false" (:*unnamed* nil)) 
 ("finally_clause" (:*unnamed* nil :body ("statement_block"))) 
 ("flow_maybe_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "tuple_type" "predefined_type" "union_type" "intersection_type" "type_query"))) 
 ("for_in_statement" (:*unnamed* nil :body ("statement") :kind nil :left ("undefined" "array_pattern" "member_expression" "non_null_expression" "subscript_expression" "identifier" "parenthesized_expression" "object_pattern") :operator nil :right ("expression" "sequence_expression") :value ("expression"))) 
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("empty_statement" "expression_statement") :increment ("expression" "sequence_expression") :initializer ("variable_declaration" "empty_statement" "expression_statement" "lexical_declaration"))) 
 ("formal_parameters" (:*unnamed* ("optional_parameter" "required_parameter"))) 
 ("function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("function_signature" (:*unnamed* nil :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("function_type" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("type_predicate" "lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "asserts" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :type_parameters ("type_parameters"))) 
 ("generator_function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("generator_function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("generic_type" (:*unnamed* nil :name ("type_identifier" "nested_type_identifier") :type_arguments ("type_arguments"))) 
 ("glimmer_closing_tag" (:*unnamed* nil)) 
 ("glimmer_opening_tag" (:*unnamed* nil)) 
 ("glimmer_template" (:*unnamed* nil :close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("hash_bang_line" (:*unnamed* nil)) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("implements_clause" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("import" (:*unnamed* nil)) 
 ("import_alias" (:*unnamed* ("nested_identifier" "identifier"))) 
 ("import_clause" (:*unnamed* ("namespace_import" "named_imports" "identifier"))) 
 ("import_require_clause" (:*unnamed* ("identifier") :source ("string"))) 
 ("import_specifier" (:*unnamed* nil :alias ("identifier") :name ("string" "identifier"))) 
 ("import_statement" (:*unnamed* ("import_require_clause" "import_clause") :source ("string"))) 
 ("index_signature" (:*unnamed* ("mapped_type_clause") :index_type ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :name ("identifier") :sign nil :type ("type_annotation" "omitting_type_annotation" "opting_type_annotation"))) 
 ("index_type_query" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "tuple_type" "predefined_type" "union_type" "intersection_type" "type_query"))) 
 ("infer_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("instantiation_expression" (:*unnamed* ("expression") :function ("subscript_expression" "import" "identifier" "member_expression") :type_arguments ("type_arguments"))) 
 ("interface_declaration" (:*unnamed* ("extends_type_clause") :body ("object_type") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("internal_module" (:*unnamed* nil :body ("statement_block") :name ("nested_identifier" "string" "identifier"))) 
 ("intersection_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("jsx_attribute" (:*unnamed* ("jsx_namespace_name" "jsx_expression" "property_identifier" "jsx_self_closing_element" "string" "jsx_element"))) 
 ("jsx_closing_element" (:*unnamed* nil :name ("identifier" "jsx_namespace_name" "member_expression"))) 
 ("jsx_element" (:*unnamed* ("jsx_expression" "jsx_self_closing_element" "jsx_text" "jsx_element") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("expression" "spread_element" "sequence_expression"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression") :type_arguments ("type_arguments"))) 
 ("jsx_self_closing_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression") :type_arguments ("type_arguments"))) 
 ("jsx_text" (:*unnamed* nil)) 
 ("labeled_statement" (:*unnamed* nil :body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil)) 
 ("literal_type" (:*unnamed* ("undefined" "null" "false" "number" "true" "string" "unary_expression"))) 
 ("lookup_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("mapped_type_clause" (:*unnamed* nil :alias ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :name ("type_identifier") :type ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("member_expression" (:*unnamed* ("property_identifier" "identifier" "member_expression") :object ("expression") :optional_chain ("optional_chain") :property ("private_property_identifier" "property_identifier"))) 
 ("meta_property" (:*unnamed* nil)) 
 ("method_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :body ("statement_block") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("method_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("module" (:*unnamed* nil :body ("statement_block") :name ("nested_identifier" "string" "identifier"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("string" "identifier"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("nested_identifier" (:*unnamed* ("property_identifier" "identifier" "member_expression"))) 
 ("nested_type_identifier" (:*unnamed* nil :module ("nested_identifier" "identifier") :name ("type_identifier"))) 
 ("new_expression" (:*unnamed* nil :arguments ("arguments") :constructor ("primary_expression") :type_arguments ("type_arguments"))) 
 ("non_null_expression" (:*unnamed* ("expression"))) 
 ("null" (:*unnamed* nil)) 
 ("number" (:*unnamed* nil)) 
 ("object" (:*unnamed* ("method_definition" "shorthand_property_identifier" "pair" "spread_element"))) 
 ("object_assignment_pattern" (:*unnamed* nil :left ("array_pattern" "shorthand_property_identifier_pattern" "object_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("rest_pattern" "pair_pattern" "shorthand_property_identifier_pattern" "object_assignment_pattern"))) 
 ("object_type" (:*unnamed* ("method_signature" "construct_signature" "property_signature" "index_signature" "export_statement" "call_signature"))) 
 ("omitting_type_annotation" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("opting_type_annotation" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("optional_chain" (:*unnamed* nil)) 
 ("optional_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("identifier") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("optional_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("override_modifier" (:*unnamed* nil)) 
 ("pair" (:*unnamed* nil :key ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :value ("expression"))) 
 ("pair_pattern" (:*unnamed* nil :key ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :value ("assignment_pattern" "pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("expression" "sequence_expression") :type ("type_annotation"))) 
 ("parenthesized_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("pattern" (:*unnamed* ("undefined" "array_pattern" "rest_pattern" "member_expression" "non_null_expression" "subscript_expression" "identifier" "object_pattern"))) 
 ("predefined_type" (:*unnamed* nil)) 
 ("primary_expression" (:*unnamed* ("undefined" "meta_property" "call_expression" "import" "function" "number" "string" "non_null_expression" "this" "class" "array" "false" "regex" "parenthesized_expression" "template_string" "true" "object" "generator_function" "member_expression" "super" "subscript_expression" "identifier" "null" "arrow_function"))) 
 ("private_property_identifier" (:*unnamed* nil)) 
 ("program" (:*unnamed* ("statement" "hash_bang_line"))) 
 ("property_identifier" (:*unnamed* nil)) 
 ("property_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :type ("type_annotation"))) 
 ("public_field_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :type ("type_annotation") :value ("expression"))) 
 ("readonly_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("regex" (:*unnamed* nil :flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("regex_flags" (:*unnamed* nil)) 
 ("regex_pattern" (:*unnamed* nil)) 
 ("required_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("rest_pattern" "identifier") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("rest_pattern" (:*unnamed* ("undefined" "array_pattern" "subscript_expression" "identifier" "member_expression" "object_pattern" "non_null_expression"))) 
 ("rest_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("return_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("satisfies_expression" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "expression" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("sequence_expression" (:*unnamed* nil :left ("expression") :right ("expression" "sequence_expression"))) 
 ("shorthand_property_identifier" (:*unnamed* nil)) 
 ("shorthand_property_identifier_pattern" (:*unnamed* nil)) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement" (:*unnamed* ("with_statement" "for_statement" "switch_statement" "debugger_statement" "expression_statement" "do_statement" "labeled_statement" "try_statement" "while_statement" "declaration" "import_statement" "if_statement" "return_statement" "throw_statement" "break_statement" "for_in_statement" "export_statement" "empty_statement" "continue_statement" "statement_block"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("statement_identifier" (:*unnamed* nil)) 
 ("string" (:*unnamed* ("string_fragment" "escape_sequence"))) 
 ("string_fragment" (:*unnamed* nil)) 
 ("subscript_expression" (:*unnamed* nil :index ("expression" "predefined_type" "number" "string" "sequence_expression") :object ("expression") :optional_chain ("optional_chain"))) 
 ("super" (:*unnamed* nil)) 
 ("switch_body" (:*unnamed* ("switch_case" "switch_default"))) 
 ("switch_case" (:*unnamed* nil :body ("statement") :value ("expression" "sequence_expression"))) 
 ("switch_default" (:*unnamed* nil :body ("statement"))) 
 ("switch_statement" (:*unnamed* nil :body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_literal_type" (:*unnamed* ("template_type"))) 
 ("template_string" (:*unnamed* ("template_substitution" "escape_sequence"))) 
 ("template_substitution" (:*unnamed* ("expression" "sequence_expression"))) 
 ("template_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "predefined_type" "union_type" "intersection_type" "type_query"))) 
 ("ternary_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("this" (:*unnamed* nil)) 
 ("this_type" (:*unnamed* nil)) 
 ("throw_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("true" (:*unnamed* nil)) 
 ("try_statement" (:*unnamed* nil :body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("tuple_type" (:*unnamed* ("lookup_type" "optional_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "rest_type" "optional_parameter" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "required_parameter" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("type_alias_declaration" (:*unnamed* nil :name ("type_identifier") :type_parameters ("type_parameters") :value ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("type_annotation" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("type_arguments" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("type_identifier" (:*unnamed* nil)) 
 ("type_parameter" (:*unnamed* nil :constraint ("constraint") :name ("type_identifier") :value ("default_type"))) 
 ("type_parameters" (:*unnamed* ("type_parameter"))) 
 ("type_predicate" (:*unnamed* nil :name ("this" "identifier") :type ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("type_predicate_annotation" (:*unnamed* ("type_predicate"))) 
 ("type_query" (:*unnamed* ("subscript_expression" "instantiation_expression" "identifier" "member_expression" "call_expression"))) 
 ("unary_expression" (:*unnamed* nil :argument ("expression" "number") :operator nil)) 
 ("undefined" (:*unnamed* nil)) 
 ("union_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:*unnamed* nil :name ("array_pattern" "identifier" "object_pattern") :type ("type_annotation") :value ("expression"))) 
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:*unnamed* nil :body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))
;; END Production rules for tsx
;; START Inverse production rules for tsx
(defconst combobulate-rules-tsx-inverse 
 '(("abstract_class_declaration" ("declaration"))
   ("abstract_method_signature" ("class_body"))
   ("accessibility_modifier" ("method_signature" "abstract_method_signature" "optional_parameter" "public_field_definition" "property_signature" "required_parameter" "method_definition"))
   ("ambient_declaration" ("declaration"))
   ("arguments" ("call_expression" "new_expression"))
   ("array" ("primary_expression"))
   ("array_pattern" ("rest_pattern" "variable_declarator" "object_assignment_pattern" "catch_clause" "for_in_statement" "pattern" "assignment_expression"))
   ("array_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("arrow_function" ("primary_expression"))
   ("as_expression" ("expression"))
   ("asserts" ("asserts_annotation" "function_type"))
   ("asserts_annotation" ("method_signature" "function_declaration" "abstract_method_signature" "generator_function" "function" "generator_function_declaration" "method_definition" "call_signature" "function_signature" "arrow_function"))
   ("assignment_expression" ("expression"))
   ("assignment_pattern" ("array_pattern" "pair_pattern"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("break_statement" ("statement"))
   ("call_expression" ("decorator" "primary_expression" "type_query"))
   ("call_signature" ("object_type"))
   ("catch_clause" ("try_statement"))
   ("class" ("primary_expression"))
   ("class_body" ("class" "class_declaration" "abstract_class_declaration"))
   ("class_declaration" ("declaration"))
   ("class_heritage" ("class" "class_declaration" "abstract_class_declaration"))
   ("class_static_block" ("class_body"))
   ("computed_property_name" ("method_signature" "abstract_method_signature" "public_field_definition" "enum_body" "pair" "enum_assignment" "property_signature" "method_definition" "pair_pattern"))
   ("conditional_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("constraint" ("type_parameter"))
   ("construct_signature" ("object_type"))
   ("constructor_type" ("type_predicate" "lookup_type" "as_expression" "type_arguments" "implements_clause" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "infer_type" "union_type" "constructor_type"))
   ("continue_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("declaration" ("statement" "export_statement" "ambient_declaration"))
   ("decorator" ("class_declaration" "optional_parameter" "abstract_class_declaration" "class" "class_body" "required_parameter" "export_statement"))
   ("default_type" ("type_parameter"))
   ("do_statement" ("statement"))
   ("else_clause" ("if_statement"))
   ("empty_statement" ("statement" "for_statement"))
   ("enum_assignment" ("enum_body"))
   ("enum_body" ("enum_declaration"))
   ("enum_declaration" ("declaration"))
   ("escape_sequence" ("template_string" "string"))
   ("existential_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("export_clause" ("export_statement"))
   ("export_specifier" ("export_clause"))
   ("export_statement" ("statement" "object_type"))
   ("expression" ("for_statement" "public_field_definition" "as_expression" "expression_statement" "sequence_expression" "non_null_expression" "extends_clause" "update_expression" "binary_expression" "member_expression" "unary_expression" "subscript_expression" "augmented_assignment_expression" "for_in_statement" "await_expression" "switch_case" "assignment_pattern" "export_statement" "satisfies_expression" "variable_declarator" "instantiation_expression" "jsx_expression" "object_assignment_pattern" "call_expression" "pair" "spread_element" "yield_expression" "template_substitution" "array" "parenthesized_expression" "arguments" "assignment_expression" "return_statement" "throw_statement" "computed_property_name" "optional_parameter" "enum_assignment" "required_parameter" "ternary_expression" "arrow_function"))
   ("expression_statement" ("statement" "for_statement"))
   ("extends_clause" ("class_heritage"))
   ("extends_type_clause" ("interface_declaration"))
   ("false" ("primary_expression" "literal_type"))
   ("finally_clause" ("try_statement"))
   ("flow_maybe_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("for_in_statement" ("statement"))
   ("for_statement" ("statement"))
   ("formal_parameters" ("method_signature" "function_declaration" "abstract_method_signature" "generator_function" "function" "function_signature" "construct_signature" "generator_function_declaration" "method_definition" "call_signature" "function_type" "arrow_function" "constructor_type"))
   ("function" ("primary_expression"))
   ("function_declaration" ("declaration"))
   ("function_signature" ("declaration"))
   ("function_type" ("type_predicate" "lookup_type" "as_expression" "type_arguments" "implements_clause" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "infer_type" "union_type" "constructor_type"))
   ("generator_function" ("primary_expression"))
   ("generator_function_declaration" ("declaration"))
   ("generic_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "extends_type_clause" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("glimmer_template" ("expression"))
   ("hash_bang_line" ("program"))
   ("identifier" ("type_predicate" "function" "nested_type_identifier" "primary_expression" "generator_function_declaration" "import_specifier" "import_require_clause" "function_declaration" "rest_pattern" "generator_function" "member_expression" "import_clause" "augmented_assignment_expression" "for_in_statement" "asserts" "namespace_import" "export_statement" "pattern" "jsx_opening_element" "variable_declarator" "instantiation_expression" "jsx_closing_element" "catch_clause" "jsx_self_closing_element" "jsx_namespace_name" "decorator" "index_signature" "module" "assignment_expression" "export_specifier" "optional_parameter" "internal_module" "enum_declaration" "nested_identifier" "required_parameter" "import_alias" "namespace_export" "function_signature" "type_query" "arrow_function"))
   ("if_statement" ("statement"))
   ("implements_clause" ("class_heritage"))
   ("import" ("instantiation_expression" "primary_expression"))
   ("import_alias" ("declaration"))
   ("import_clause" ("import_statement"))
   ("import_require_clause" ("import_statement"))
   ("import_specifier" ("named_imports"))
   ("import_statement" ("statement"))
   ("index_signature" ("object_type" "class_body"))
   ("index_type_query" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("infer_type" ("type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "infer_type" "union_type" "constructor_type"))
   ("instantiation_expression" ("expression" "type_query"))
   ("interface_declaration" ("declaration"))
   ("internal_module" ("expression" "declaration"))
   ("intersection_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_element" ("expression" "jsx_attribute" "jsx_element"))
   ("jsx_expression" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_element"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_closing_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_self_closing_element" ("expression" "jsx_attribute" "jsx_element"))
   ("jsx_text" ("jsx_element"))
   ("labeled_statement" ("statement"))
   ("lexical_declaration" ("for_statement" "declaration"))
   ("literal_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("lookup_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("mapped_type_clause" ("index_signature"))
   ("member_expression" ("rest_pattern" "instantiation_expression" "jsx_closing_element" "member_expression" "jsx_self_closing_element" "augmented_assignment_expression" "primary_expression" "for_in_statement" "nested_identifier" "decorator" "pattern" "jsx_opening_element" "type_query" "assignment_expression"))
   ("meta_property" ("primary_expression"))
   ("method_definition" ("class_body" "object"))
   ("method_signature" ("object_type" "class_body"))
   ("module" ("declaration"))
   ("named_imports" ("import_clause"))
   ("namespace_export" ("export_statement"))
   ("namespace_import" ("import_clause"))
   ("nested_identifier" ("import_alias" "module" "nested_type_identifier" "internal_module"))
   ("nested_type_identifier" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "generic_type" "index_signature" "function_type" "rest_type" "extends_type_clause" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("new_expression" ("expression"))
   ("non_null_expression" ("rest_pattern" "augmented_assignment_expression" "for_in_statement" "primary_expression" "pattern" "assignment_expression"))
   ("null" ("primary_expression" "literal_type"))
   ("number" ("method_signature" "abstract_method_signature" "public_field_definition" "enum_body" "literal_type" "pair" "enum_assignment" "subscript_expression" "unary_expression" "primary_expression" "property_signature" "method_definition" "pair_pattern"))
   ("object" ("primary_expression"))
   ("object_assignment_pattern" ("object_pattern"))
   ("object_pattern" ("rest_pattern" "variable_declarator" "object_assignment_pattern" "catch_clause" "for_in_statement" "pattern" "assignment_expression"))
   ("object_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "interface_declaration" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("omitting_type_annotation" ("index_signature"))
   ("opting_type_annotation" ("index_signature"))
   ("optional_chain" ("subscript_expression" "member_expression"))
   ("optional_parameter" ("tuple_type" "formal_parameters"))
   ("optional_type" ("tuple_type"))
   ("override_modifier" ("method_signature" "optional_parameter" "public_field_definition" "property_signature" "required_parameter" "method_definition"))
   ("pair" ("object"))
   ("pair_pattern" ("object_pattern"))
   ("parenthesized_expression" ("with_statement" "switch_statement" "do_statement" "augmented_assignment_expression" "for_in_statement" "primary_expression" "while_statement" "if_statement" "assignment_expression"))
   ("parenthesized_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("pattern" ("array_pattern" "optional_parameter" "required_parameter" "assignment_pattern" "pair_pattern"))
   ("predefined_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "subscript_expression" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("primary_expression" ("expression" "new_expression"))
   ("private_property_identifier" ("method_signature" "abstract_method_signature" "member_expression" "public_field_definition" "enum_body" "pair" "enum_assignment" "property_signature" "method_definition" "pair_pattern"))
   ("property_identifier" ("method_signature" "abstract_method_signature" "member_expression" "public_field_definition" "enum_body" "pair" "enum_assignment" "ambient_declaration" "nested_identifier" "property_signature" "method_definition" "pair_pattern" "jsx_attribute"))
   ("property_signature" ("object_type"))
   ("public_field_definition" ("class_body"))
   ("readonly_type" ("type_predicate" "lookup_type" "as_expression" "type_arguments" "implements_clause" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "infer_type" "union_type" "constructor_type"))
   ("regex" ("primary_expression"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("required_parameter" ("tuple_type" "formal_parameters"))
   ("rest_pattern" ("pattern" "required_parameter" "object_pattern"))
   ("rest_type" ("tuple_type"))
   ("return_statement" ("statement"))
   ("satisfies_expression" ("expression"))
   ("sequence_expression" ("throw_statement" "for_statement" "jsx_expression" "expression_statement" "sequence_expression" "subscript_expression" "template_substitution" "for_in_statement" "switch_case" "parenthesized_expression" "return_statement"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_pattern" "object_assignment_pattern"))
   ("spread_element" ("object" "array" "arguments" "jsx_expression"))
   ("statement" ("else_clause" "with_statement" "for_statement" "do_statement" "labeled_statement" "for_in_statement" "switch_case" "statement_block" "switch_default" "while_statement" "if_statement" "program"))
   ("statement_block" ("function_declaration" "method_definition" "generator_function" "finally_clause" "internal_module" "catch_clause" "function" "ambient_declaration" "try_statement" "generator_function_declaration" "class_static_block" "statement" "module" "arrow_function"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("string" ("method_signature" "public_field_definition" "enum_body" "literal_type" "primary_expression" "method_definition" "import_statement" "import_specifier" "import_require_clause" "subscript_expression" "pair_pattern" "export_statement" "abstract_method_signature" "pair" "property_signature" "module" "export_specifier" "internal_module" "enum_assignment" "namespace_export" "jsx_attribute"))
   ("string_fragment" ("string"))
   ("subscript_expression" ("rest_pattern" "instantiation_expression" "augmented_assignment_expression" "for_in_statement" "primary_expression" "pattern" "type_query" "assignment_expression"))
   ("super" ("primary_expression"))
   ("switch_body" ("switch_statement"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_statement" ("statement"))
   ("template_literal_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("template_string" ("call_expression" "primary_expression"))
   ("template_substitution" ("template_string"))
   ("template_type" ("template_literal_type"))
   ("ternary_expression" ("expression"))
   ("this" ("type_predicate" "optional_parameter" "primary_expression" "required_parameter" "asserts"))
   ("this_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("throw_statement" ("statement"))
   ("true" ("primary_expression" "literal_type"))
   ("try_statement" ("statement"))
   ("tuple_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("type_alias_declaration" ("declaration"))
   ("type_annotation" ("method_signature" "public_field_definition" "function" "generator_function_declaration" "method_definition" "function_declaration" "generator_function" "variable_declarator" "abstract_method_signature" "catch_clause" "property_signature" "index_signature" "parenthesized_expression" "optional_parameter" "construct_signature" "required_parameter" "call_signature" "function_signature" "arrow_function"))
   ("type_arguments" ("instantiation_expression" "call_expression" "jsx_self_closing_element" "extends_clause" "generic_type" "jsx_opening_element" "new_expression"))
   ("type_identifier" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "nested_type_identifier" "parenthesized_type" "conditional_type" "class_declaration" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "class" "omitting_type_annotation" "generic_type" "index_signature" "function_type" "rest_type" "extends_type_clause" "type_parameter" "interface_declaration" "abstract_class_declaration" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("type_parameter" ("type_parameters"))
   ("type_parameters" ("method_signature" "function_declaration" "interface_declaration" "abstract_method_signature" "class_declaration" "generator_function" "abstract_class_declaration" "function" "constructor_type" "construct_signature" "class" "generator_function_declaration" "type_alias_declaration" "method_definition" "call_signature" "function_type" "function_signature" "arrow_function"))
   ("type_predicate" ("function_type" "type_predicate_annotation" "asserts"))
   ("type_predicate_annotation" ("method_signature" "function_declaration" "abstract_method_signature" "generator_function" "function" "generator_function_declaration" "method_definition" "call_signature" "function_signature" "arrow_function"))
   ("type_query" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("unary_expression" ("expression" "literal_type"))
   ("undefined" ("rest_pattern" "literal_type" "for_in_statement" "primary_expression" "pattern" "assignment_expression"))
   ("union_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("update_expression" ("expression"))
   ("variable_declaration" ("for_statement" "declaration"))
   ("variable_declarator" ("variable_declaration" "lexical_declaration"))
   ("while_statement" ("statement"))
   ("with_statement" ("statement"))
   ("yield_expression" ("expression"))
  ) 
)
;; END Inverse production rules for tsx
;; START All node types in tsx
(defconst combobulate-rules-tsx-types 
 '("_primary_type" "abstract_class_declaration" "abstract_method_signature" "accessibility_modifier" "ambient_declaration" "arguments" "array" "array_pattern" "array_type" "arrow_function" "as_expression" "asserts" "asserts_annotation" "assignment_expression" "assignment_pattern" "augmented_assignment_expression" "await_expression" "binary_expression" "break_statement" "call_expression" "call_signature" "catch_clause" "class" "class_body" "class_declaration" "class_heritage" "class_static_block" "comment" "computed_property_name" "conditional_type" "constraint" "construct_signature" "constructor_type" "continue_statement" "debugger_statement" "declaration" "decorator" "default_type" "do_statement" "else_clause" "empty_statement" "enum_assignment" "enum_body" "enum_declaration" "escape_sequence" "existential_type" "export_clause" "export_specifier" "export_statement" "expression" "expression_statement" "extends_clause" "extends_type_clause" "false" "finally_clause" "flow_maybe_type" "for_in_statement" "for_statement" "formal_parameters" "function" "function_declaration" "function_signature" "function_type" "generator_function" "generator_function_declaration" "generic_type" "glimmer_closing_tag" "glimmer_opening_tag" "glimmer_template" "hash_bang_line" "identifier" "if_statement" "implements_clause" "import" "import_alias" "import_clause" "import_require_clause" "import_specifier" "import_statement" "index_signature" "index_type_query" "infer_type" "instantiation_expression" "interface_declaration" "internal_module" "intersection_type" "jsx_attribute" "jsx_closing_element" "jsx_element" "jsx_expression" "jsx_namespace_name" "jsx_opening_element" "jsx_self_closing_element" "jsx_text" "labeled_statement" "lexical_declaration" "literal_type" "lookup_type" "mapped_type_clause" "member_expression" "meta_property" "method_definition" "method_signature" "module" "named_imports" "namespace_export" "namespace_import" "nested_identifier" "nested_type_identifier" "new_expression" "non_null_expression" "null" "number" "object" "object_assignment_pattern" "object_pattern" "object_type" "omitting_type_annotation" "opting_type_annotation" "optional_chain" "optional_parameter" "optional_type" "override_modifier" "pair" "pair_pattern" "parenthesized_expression" "parenthesized_type" "pattern" "predefined_type" "primary_expression" "private_property_identifier" "program" "property_identifier" "property_signature" "public_field_definition" "readonly_type" "regex" "regex_flags" "regex_pattern" "required_parameter" "rest_pattern" "rest_type" "return_statement" "satisfies_expression" "sequence_expression" "shorthand_property_identifier" "shorthand_property_identifier_pattern" "spread_element" "statement" "statement_block" "statement_identifier" "string" "string_fragment" "subscript_expression" "super" "switch_body" "switch_case" "switch_default" "switch_statement" "template_literal_type" "template_string" "template_substitution" "template_type" "ternary_expression" "this" "this_type" "throw_statement" "true" "try_statement" "tuple_type" "type_alias_declaration" "type_annotation" "type_arguments" "type_identifier" "type_parameter" "type_parameters" "type_predicate" "type_predicate_annotation" "type_query" "unary_expression" "undefined" "union_type" "update_expression" "variable_declaration" "variable_declarator" "while_statement" "with_statement" "yield_expression") 
)
;; END All node types in tsx
;; START All supertypes in tsx
(defconst combobulate-rules-tsx-supertypes 
 '("_primary_type" "declaration" "expression" "pattern" "primary_expression" "statement") 
)
;; END All supertypes in tsx

;; START Production rules for css
(defconst combobulate-rules-css 
 '(("adjacent_sibling_selector" (:*unnamed* ("id_selector" "sibling_selector" "universal_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "tag_name" "nesting_selector" "attribute_selector" "class_selector" "pseudo_class_selector" "string_value" "pseudo_element_selector"))) 
 ("arguments" (:*unnamed* ("parenthesized_value" "sibling_selector" "adjacent_sibling_selector" "call_expression" "descendant_selector" "tag_name" "attribute_selector" "class_selector" "plain_value" "color_value" "integer_value" "pseudo_class_selector" "pseudo_element_selector" "binary_expression" "id_selector" "universal_selector" "float_value" "child_selector" "namespace_selector" "nesting_selector" "string_value" "important" "grid_value"))) 
 ("at_keyword" (:*unnamed* nil)) 
 ("at_rule" (:*unnamed* ("selector_query" "parenthesized_query" "feature_query" "binary_query" "at_keyword" "block" "unary_query" "keyword_query"))) 
 ("attribute_name" (:*unnamed* ("id_selector" "sibling_selector" "universal_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "tag_name" "nesting_selector" "attribute_selector" "class_selector" "pseudo_class_selector" "string_value" "pseudo_element_selector"))) 
 ("attribute_selector" (:*unnamed* ("parenthesized_value" "sibling_selector" "adjacent_sibling_selector" "call_expression" "descendant_selector" "tag_name" "attribute_name" "attribute_selector" "class_selector" "plain_value" "color_value" "integer_value" "pseudo_class_selector" "pseudo_element_selector" "binary_expression" "id_selector" "universal_selector" "float_value" "child_selector" "namespace_selector" "nesting_selector" "string_value" "important" "grid_value"))) 
 ("binary_expression" (:*unnamed* ("binary_expression" "parenthesized_value" "float_value" "call_expression" "color_value" "plain_value" "integer_value" "string_value" "important" "grid_value"))) 
 ("binary_query" (:*unnamed* ("selector_query" "parenthesized_query" "unary_query" "binary_query" "keyword_query" "feature_query"))) 
 ("block" (:*unnamed* ("charset_statement" "media_statement" "postcss_statement" "supports_statement" "namespace_statement" "at_rule" "rule_set" "declaration" "import_statement" "keyframes_statement"))) 
 ("call_expression" (:*unnamed* ("arguments" "function_name"))) 
 ("charset_statement" (:*unnamed* ("binary_expression" "parenthesized_value" "float_value" "call_expression" "color_value" "plain_value" "integer_value" "string_value" "important" "grid_value"))) 
 ("child_selector" (:*unnamed* ("id_selector" "sibling_selector" "universal_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "tag_name" "nesting_selector" "attribute_selector" "class_selector" "pseudo_class_selector" "string_value" "pseudo_element_selector"))) 
 ("class_name" (:*unnamed* nil)) 
 ("class_selector" (:*unnamed* ("id_selector" "sibling_selector" "universal_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "tag_name" "class_name" "nesting_selector" "attribute_selector" "class_selector" "pseudo_class_selector" "string_value" "pseudo_element_selector"))) 
 ("color_value" (:*unnamed* nil)) 
 ("comment" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("binary_expression" "parenthesized_value" "float_value" "call_expression" "color_value" "plain_value" "string_value" "integer_value" "property_name" "important" "grid_value"))) 
 ("descendant_selector" (:*unnamed* ("id_selector" "sibling_selector" "universal_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "tag_name" "nesting_selector" "attribute_selector" "class_selector" "pseudo_class_selector" "string_value" "pseudo_element_selector"))) 
 ("feature_name" (:*unnamed* nil)) 
 ("feature_query" (:*unnamed* ("feature_name" "binary_expression" "parenthesized_value" "float_value" "call_expression" "color_value" "plain_value" "integer_value" "string_value" "important" "grid_value"))) 
 ("float_value" (:*unnamed* ("unit"))) 
 ("from" (:*unnamed* nil)) 
 ("function_name" (:*unnamed* nil)) 
 ("grid_value" (:*unnamed* ("binary_expression" "parenthesized_value" "float_value" "call_expression" "color_value" "plain_value" "integer_value" "string_value" "important" "grid_value"))) 
 ("id_name" (:*unnamed* nil)) 
 ("id_selector" (:*unnamed* ("id_selector" "sibling_selector" "universal_selector" "adjacent_sibling_selector" "child_selector" "id_name" "namespace_selector" "descendant_selector" "tag_name" "nesting_selector" "attribute_selector" "class_selector" "pseudo_class_selector" "string_value" "pseudo_element_selector"))) 
 ("import_statement" (:*unnamed* ("parenthesized_value" "call_expression" "color_value" "plain_value" "integer_value" "unary_query" "keyword_query" "feature_query" "selector_query" "binary_expression" "float_value" "parenthesized_query" "binary_query" "string_value" "important" "grid_value"))) 
 ("important" (:*unnamed* nil)) 
 ("integer_value" (:*unnamed* ("unit"))) 
 ("js_comment" (:*unnamed* nil)) 
 ("keyframe_block" (:*unnamed* ("to" "block" "from" "integer_value"))) 
 ("keyframe_block_list" (:*unnamed* ("keyframe_block"))) 
 ("keyframes_name" (:*unnamed* nil)) 
 ("keyframes_statement" (:*unnamed* ("keyframes_name" "at_keyword" "keyframe_block_list"))) 
 ("keyword_query" (:*unnamed* nil)) 
 ("media_statement" (:*unnamed* ("selector_query" "block" "parenthesized_query" "unary_query" "binary_query" "keyword_query" "feature_query"))) 
 ("namespace_name" (:*unnamed* nil)) 
 ("namespace_selector" (:*unnamed* ("id_selector" "sibling_selector" "universal_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "tag_name" "nesting_selector" "attribute_selector" "class_selector" "pseudo_class_selector" "string_value" "pseudo_element_selector"))) 
 ("namespace_statement" (:*unnamed* ("namespace_name" "call_expression" "string_value"))) 
 ("nesting_selector" (:*unnamed* nil)) 
 ("parenthesized_query" (:*unnamed* ("selector_query" "parenthesized_query" "unary_query" "binary_query" "keyword_query" "feature_query"))) 
 ("parenthesized_value" (:*unnamed* ("binary_expression" "parenthesized_value" "float_value" "call_expression" "color_value" "plain_value" "integer_value" "string_value" "important" "grid_value"))) 
 ("plain_value" (:*unnamed* nil)) 
 ("postcss_statement" (:*unnamed* ("binary_expression" "parenthesized_value" "float_value" "call_expression" "color_value" "at_keyword" "plain_value" "integer_value" "string_value" "important" "grid_value"))) 
 ("property_name" (:*unnamed* nil)) 
 ("pseudo_class_selector" (:*unnamed* ("sibling_selector" "adjacent_sibling_selector" "descendant_selector" "tag_name" "class_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments" "id_selector" "universal_selector" "child_selector" "namespace_selector" "nesting_selector" "string_value"))) 
 ("pseudo_element_selector" (:*unnamed* ("id_selector" "sibling_selector" "universal_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "tag_name" "nesting_selector" "attribute_selector" "class_selector" "pseudo_class_selector" "string_value" "pseudo_element_selector" "arguments"))) 
 ("rule_set" (:*unnamed* ("selectors" "block"))) 
 ("selector_query" (:*unnamed* ("id_selector" "sibling_selector" "universal_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "tag_name" "nesting_selector" "attribute_selector" "class_selector" "pseudo_class_selector" "string_value" "pseudo_element_selector"))) 
 ("selectors" (:*unnamed* ("id_selector" "sibling_selector" "universal_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "tag_name" "nesting_selector" "attribute_selector" "class_selector" "pseudo_class_selector" "string_value" "pseudo_element_selector"))) 
 ("sibling_selector" (:*unnamed* ("id_selector" "sibling_selector" "universal_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "tag_name" "nesting_selector" "attribute_selector" "class_selector" "pseudo_class_selector" "string_value" "pseudo_element_selector"))) 
 ("string_value" (:*unnamed* nil)) 
 ("stylesheet" (:*unnamed* ("charset_statement" "media_statement" "supports_statement" "namespace_statement" "at_rule" "rule_set" "declaration" "import_statement" "keyframes_statement"))) 
 ("supports_statement" (:*unnamed* ("selector_query" "block" "parenthesized_query" "unary_query" "binary_query" "keyword_query" "feature_query"))) 
 ("tag_name" (:*unnamed* nil)) 
 ("to" (:*unnamed* nil)) 
 ("unary_query" (:*unnamed* ("selector_query" "parenthesized_query" "unary_query" "binary_query" "keyword_query" "feature_query"))) 
 ("unit" (:*unnamed* nil)) 
 ("universal_selector" (:*unnamed* nil)) 
))
;; END Production rules for css
;; START Inverse production rules for css
(defconst combobulate-rules-css-inverse 
 '(("adjacent_sibling_selector" ("selector_query" "selectors" "id_selector" "sibling_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "attribute_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments"))
   ("arguments" ("pseudo_class_selector" "call_expression" "pseudo_element_selector"))
   ("at_keyword" ("at_rule" "keyframes_statement" "postcss_statement"))
   ("at_rule" ("stylesheet" "block"))
   ("attribute_name" ("attribute_selector"))
   ("attribute_selector" ("selector_query" "selectors" "id_selector" "sibling_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "attribute_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments"))
   ("binary_expression" ("binary_expression" "parenthesized_value" "charset_statement" "feature_query" "postcss_statement" "attribute_selector" "declaration" "import_statement" "arguments" "grid_value"))
   ("binary_query" ("parenthesized_query" "media_statement" "binary_query" "supports_statement" "at_rule" "unary_query" "import_statement"))
   ("block" ("media_statement" "supports_statement" "keyframe_block" "at_rule" "rule_set"))
   ("call_expression" ("binary_expression" "parenthesized_value" "charset_statement" "feature_query" "postcss_statement" "namespace_statement" "attribute_selector" "declaration" "import_statement" "arguments" "grid_value"))
   ("charset_statement" ("stylesheet" "block"))
   ("child_selector" ("selector_query" "selectors" "id_selector" "sibling_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "attribute_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments"))
   ("class_name" ("pseudo_class_selector" "class_selector"))
   ("class_selector" ("selector_query" "selectors" "id_selector" "sibling_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "attribute_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments"))
   ("color_value" ("binary_expression" "parenthesized_value" "charset_statement" "feature_query" "postcss_statement" "attribute_selector" "declaration" "import_statement" "arguments" "grid_value"))
   ("declaration" ("stylesheet" "block"))
   ("descendant_selector" ("selector_query" "selectors" "id_selector" "sibling_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "attribute_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments"))
   ("feature_name" ("feature_query"))
   ("feature_query" ("parenthesized_query" "media_statement" "binary_query" "supports_statement" "at_rule" "unary_query" "import_statement"))
   ("float_value" ("binary_expression" "parenthesized_value" "charset_statement" "feature_query" "postcss_statement" "attribute_selector" "declaration" "import_statement" "arguments" "grid_value"))
   ("from" ("keyframe_block"))
   ("function_name" ("call_expression"))
   ("grid_value" ("binary_expression" "parenthesized_value" "charset_statement" "feature_query" "postcss_statement" "attribute_selector" "declaration" "import_statement" "arguments" "grid_value"))
   ("id_name" ("id_selector"))
   ("id_selector" ("selector_query" "selectors" "id_selector" "sibling_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "attribute_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments"))
   ("import_statement" ("stylesheet" "block"))
   ("important" ("binary_expression" "parenthesized_value" "charset_statement" "feature_query" "postcss_statement" "attribute_selector" "declaration" "import_statement" "arguments" "grid_value"))
   ("integer_value" ("binary_expression" "parenthesized_value" "charset_statement" "feature_query" "postcss_statement" "keyframe_block" "attribute_selector" "declaration" "import_statement" "arguments" "grid_value"))
   ("keyframe_block" ("keyframe_block_list"))
   ("keyframe_block_list" ("keyframes_statement"))
   ("keyframes_name" ("keyframes_statement"))
   ("keyframes_statement" ("stylesheet" "block"))
   ("keyword_query" ("parenthesized_query" "media_statement" "binary_query" "supports_statement" "at_rule" "unary_query" "import_statement"))
   ("media_statement" ("stylesheet" "block"))
   ("namespace_name" ("namespace_statement"))
   ("namespace_selector" ("selector_query" "selectors" "id_selector" "sibling_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "attribute_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments"))
   ("namespace_statement" ("stylesheet" "block"))
   ("nesting_selector" ("selector_query" "selectors" "id_selector" "sibling_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "attribute_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments"))
   ("parenthesized_query" ("parenthesized_query" "media_statement" "binary_query" "supports_statement" "at_rule" "unary_query" "import_statement"))
   ("parenthesized_value" ("binary_expression" "parenthesized_value" "charset_statement" "feature_query" "postcss_statement" "attribute_selector" "declaration" "import_statement" "arguments" "grid_value"))
   ("plain_value" ("binary_expression" "parenthesized_value" "charset_statement" "feature_query" "postcss_statement" "attribute_selector" "declaration" "import_statement" "arguments" "grid_value"))
   ("postcss_statement" ("block"))
   ("property_name" ("declaration"))
   ("pseudo_class_selector" ("selector_query" "selectors" "id_selector" "sibling_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "attribute_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments"))
   ("pseudo_element_selector" ("selector_query" "selectors" "id_selector" "sibling_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "attribute_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments"))
   ("rule_set" ("stylesheet" "block"))
   ("selector_query" ("parenthesized_query" "media_statement" "binary_query" "supports_statement" "at_rule" "unary_query" "import_statement"))
   ("selectors" ("rule_set"))
   ("sibling_selector" ("selector_query" "selectors" "id_selector" "sibling_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "attribute_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments"))
   ("string_value" ("selectors" "parenthesized_value" "attribute_name" "attribute_selector" "class_selector" "declaration" "import_statement" "selector_query" "binary_expression" "id_selector" "namespace_selector" "grid_value" "sibling_selector" "adjacent_sibling_selector" "descendant_selector" "namespace_statement" "postcss_statement" "pseudo_class_selector" "pseudo_element_selector" "feature_query" "arguments" "charset_statement" "child_selector"))
   ("supports_statement" ("stylesheet" "block"))
   ("tag_name" ("selector_query" "selectors" "id_selector" "sibling_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "attribute_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments"))
   ("to" ("keyframe_block"))
   ("unary_query" ("parenthesized_query" "media_statement" "binary_query" "supports_statement" "at_rule" "unary_query" "import_statement"))
   ("unit" ("float_value" "integer_value"))
   ("universal_selector" ("selector_query" "selectors" "id_selector" "sibling_selector" "adjacent_sibling_selector" "child_selector" "namespace_selector" "descendant_selector" "attribute_name" "attribute_selector" "class_selector" "pseudo_class_selector" "pseudo_element_selector" "arguments"))
  ) 
)
;; END Inverse production rules for css
;; START All node types in css
(defconst combobulate-rules-css-types 
 '("adjacent_sibling_selector" "arguments" "at_keyword" "at_rule" "attribute_name" "attribute_selector" "binary_expression" "binary_query" "block" "call_expression" "charset_statement" "child_selector" "class_name" "class_selector" "color_value" "comment" "declaration" "descendant_selector" "feature_name" "feature_query" "float_value" "from" "function_name" "grid_value" "id_name" "id_selector" "import_statement" "important" "integer_value" "js_comment" "keyframe_block" "keyframe_block_list" "keyframes_name" "keyframes_statement" "keyword_query" "media_statement" "namespace_name" "namespace_selector" "namespace_statement" "nesting_selector" "parenthesized_query" "parenthesized_value" "plain_value" "postcss_statement" "property_name" "pseudo_class_selector" "pseudo_element_selector" "rule_set" "selector_query" "selectors" "sibling_selector" "string_value" "stylesheet" "supports_statement" "tag_name" "to" "unary_query" "unit" "universal_selector") 
)
;; END All node types in css
;; START All supertypes in css
(defconst combobulate-rules-css-supertypes 
 nil 
)
;; END All supertypes in css

;; START Production rules for typescript
(defconst combobulate-rules-typescript 
 '(("_primary_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "tuple_type" "predefined_type" "union_type" "intersection_type" "type_query"))) 
 ("abstract_class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("abstract_method_signature" (:*unnamed* ("accessibility_modifier") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("accessibility_modifier" (:*unnamed* nil)) 
 ("ambient_declaration" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "declaration" "property_identifier" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type" "statement_block"))) 
 ("arguments" (:*unnamed* ("expression" "spread_element"))) 
 ("array" (:*unnamed* ("expression" "spread_element"))) 
 ("array_pattern" (:*unnamed* ("assignment_pattern" "pattern"))) 
 ("array_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "tuple_type" "predefined_type" "union_type" "intersection_type" "type_query"))) 
 ("arrow_function" (:*unnamed* nil :body ("expression" "statement_block") :parameter ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("as_expression" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "expression" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("asserts" (:*unnamed* ("type_predicate" "this" "identifier"))) 
 ("asserts_annotation" (:*unnamed* ("asserts"))) 
 ("assignment_expression" (:*unnamed* nil :left ("undefined" "array_pattern" "member_expression" "non_null_expression" "subscript_expression" "identifier" "parenthesized_expression" "object_pattern") :right ("expression"))) 
 ("assignment_pattern" (:*unnamed* nil :left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:*unnamed* nil :left ("subscript_expression" "identifier" "member_expression" "parenthesized_expression" "non_null_expression") :operator nil :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:*unnamed* nil :left ("expression") :operator nil :right ("expression"))) 
 ("break_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("call_expression" (:*unnamed* nil :arguments ("template_string" "arguments") :function ("expression") :type_arguments ("type_arguments"))) 
 ("call_signature" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("catch_clause" (:*unnamed* nil :body ("statement_block") :parameter ("array_pattern" "identifier" "object_pattern") :type ("type_annotation"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_body" (:*unnamed* ("method_signature" "abstract_method_signature" "decorator" "class_static_block" "method_definition" "index_signature" "public_field_definition"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_heritage" (:*unnamed* ("extends_clause" "implements_clause"))) 
 ("class_static_block" (:*unnamed* nil :body ("statement_block"))) 
 ("comment" (:*unnamed* nil)) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("conditional_type" (:*unnamed* nil :alternative ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :consequence ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :left ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :right ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("constraint" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("construct_signature" (:*unnamed* nil :parameters ("formal_parameters") :type ("type_annotation") :type_parameters ("type_parameters"))) 
 ("constructor_type" (:*unnamed* nil :parameters ("formal_parameters") :type ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :type_parameters ("type_parameters"))) 
 ("continue_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("debugger_statement" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("function_declaration" "interface_declaration" "class_declaration" "abstract_class_declaration" "internal_module" "lexical_declaration" "ambient_declaration" "enum_declaration" "type_alias_declaration" "generator_function_declaration" "import_alias" "module" "variable_declaration" "function_signature"))) 
 ("decorator" (:*unnamed* ("call_expression" "identifier" "member_expression"))) 
 ("default_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("empty_statement" (:*unnamed* nil)) 
 ("enum_assignment" (:*unnamed* nil :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :value ("expression"))) 
 ("enum_body" (:*unnamed* ("enum_assignment") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string"))) 
 ("enum_declaration" (:*unnamed* nil :body ("enum_body") :name ("identifier"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("existential_type" (:*unnamed* nil)) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:*unnamed* nil :alias ("string" "identifier") :name ("string" "identifier"))) 
 ("export_statement" (:*unnamed* ("expression" "namespace_export" "export_clause" "identifier") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression" (:*unnamed* ("glimmer_template" "instantiation_expression" "as_expression" "type_assertion" "yield_expression" "primary_expression" "update_expression" "assignment_expression" "binary_expression" "internal_module" "unary_expression" "augmented_assignment_expression" "await_expression" "ternary_expression" "new_expression" "satisfies_expression"))) 
 ("expression_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("extends_clause" (:*unnamed* nil :type_arguments ("type_arguments") :value ("expression"))) 
 ("extends_type_clause" (:*unnamed* nil :type ("nested_type_identifier" "type_identifier" "generic_type"))) 
 ("false" (:*unnamed* nil)) 
 ("finally_clause" (:*unnamed* nil :body ("statement_block"))) 
 ("flow_maybe_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "tuple_type" "predefined_type" "union_type" "intersection_type" "type_query"))) 
 ("for_in_statement" (:*unnamed* nil :body ("statement") :kind nil :left ("undefined" "array_pattern" "member_expression" "non_null_expression" "subscript_expression" "identifier" "parenthesized_expression" "object_pattern") :operator nil :right ("expression" "sequence_expression") :value ("expression"))) 
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("empty_statement" "expression_statement") :increment ("expression" "sequence_expression") :initializer ("variable_declaration" "empty_statement" "expression_statement" "lexical_declaration"))) 
 ("formal_parameters" (:*unnamed* ("optional_parameter" "required_parameter"))) 
 ("function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("function_signature" (:*unnamed* nil :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("function_type" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("type_predicate" "lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "asserts" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :type_parameters ("type_parameters"))) 
 ("generator_function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("generator_function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("generic_type" (:*unnamed* nil :name ("type_identifier" "nested_type_identifier") :type_arguments ("type_arguments"))) 
 ("glimmer_closing_tag" (:*unnamed* nil)) 
 ("glimmer_opening_tag" (:*unnamed* nil)) 
 ("glimmer_template" (:*unnamed* nil :close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("hash_bang_line" (:*unnamed* nil)) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("implements_clause" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("import" (:*unnamed* nil)) 
 ("import_alias" (:*unnamed* ("nested_identifier" "identifier"))) 
 ("import_clause" (:*unnamed* ("namespace_import" "named_imports" "identifier"))) 
 ("import_require_clause" (:*unnamed* ("identifier") :source ("string"))) 
 ("import_specifier" (:*unnamed* nil :alias ("identifier") :name ("string" "identifier"))) 
 ("import_statement" (:*unnamed* ("import_require_clause" "import_clause") :source ("string"))) 
 ("index_signature" (:*unnamed* ("mapped_type_clause") :index_type ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :name ("identifier") :sign nil :type ("type_annotation" "omitting_type_annotation" "opting_type_annotation"))) 
 ("index_type_query" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "tuple_type" "predefined_type" "union_type" "intersection_type" "type_query"))) 
 ("infer_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("instantiation_expression" (:*unnamed* ("expression") :function ("subscript_expression" "import" "identifier" "member_expression") :type_arguments ("type_arguments"))) 
 ("interface_declaration" (:*unnamed* ("extends_type_clause") :body ("object_type") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("internal_module" (:*unnamed* nil :body ("statement_block") :name ("nested_identifier" "string" "identifier"))) 
 ("intersection_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("jsx_attribute" (:*unnamed* ("jsx_namespace_name" "jsx_expression" "property_identifier" "jsx_self_closing_element" "string" "jsx_element"))) 
 ("jsx_closing_element" (:*unnamed* nil :name ("identifier" "jsx_namespace_name" "member_expression"))) 
 ("jsx_element" (:*unnamed* ("jsx_expression" "jsx_self_closing_element" "jsx_text" "jsx_element") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("expression" "spread_element" "sequence_expression"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression") :type_arguments ("type_arguments"))) 
 ("jsx_self_closing_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression") :type_arguments ("type_arguments"))) 
 ("jsx_text" (:*unnamed* nil)) 
 ("labeled_statement" (:*unnamed* nil :body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil)) 
 ("literal_type" (:*unnamed* ("undefined" "null" "false" "number" "true" "string" "unary_expression"))) 
 ("lookup_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("mapped_type_clause" (:*unnamed* nil :alias ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type") :name ("type_identifier") :type ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("member_expression" (:*unnamed* ("property_identifier" "identifier" "member_expression") :object ("expression") :optional_chain ("optional_chain") :property ("private_property_identifier" "property_identifier"))) 
 ("meta_property" (:*unnamed* nil)) 
 ("method_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :body ("statement_block") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("method_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("module" (:*unnamed* nil :body ("statement_block") :name ("nested_identifier" "string" "identifier"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("string" "identifier"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("nested_identifier" (:*unnamed* ("property_identifier" "identifier" "member_expression"))) 
 ("nested_type_identifier" (:*unnamed* nil :module ("nested_identifier" "identifier") :name ("type_identifier"))) 
 ("new_expression" (:*unnamed* nil :arguments ("arguments") :constructor ("primary_expression") :type_arguments ("type_arguments"))) 
 ("non_null_expression" (:*unnamed* ("expression"))) 
 ("null" (:*unnamed* nil)) 
 ("number" (:*unnamed* nil)) 
 ("object" (:*unnamed* ("method_definition" "shorthand_property_identifier" "pair" "spread_element"))) 
 ("object_assignment_pattern" (:*unnamed* nil :left ("array_pattern" "shorthand_property_identifier_pattern" "object_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("rest_pattern" "pair_pattern" "shorthand_property_identifier_pattern" "object_assignment_pattern"))) 
 ("object_type" (:*unnamed* ("method_signature" "construct_signature" "property_signature" "index_signature" "export_statement" "call_signature"))) 
 ("omitting_type_annotation" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("opting_type_annotation" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("optional_chain" (:*unnamed* nil)) 
 ("optional_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("identifier") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("optional_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("override_modifier" (:*unnamed* nil)) 
 ("pair" (:*unnamed* nil :key ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :value ("expression"))) 
 ("pair_pattern" (:*unnamed* nil :key ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :value ("assignment_pattern" "pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("expression" "sequence_expression") :type ("type_annotation"))) 
 ("parenthesized_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("pattern" (:*unnamed* ("undefined" "array_pattern" "rest_pattern" "member_expression" "non_null_expression" "subscript_expression" "identifier" "object_pattern"))) 
 ("predefined_type" (:*unnamed* nil)) 
 ("primary_expression" (:*unnamed* ("undefined" "meta_property" "call_expression" "import" "function" "number" "string" "non_null_expression" "this" "class" "array" "false" "regex" "parenthesized_expression" "template_string" "true" "object" "generator_function" "member_expression" "super" "subscript_expression" "identifier" "null" "arrow_function"))) 
 ("private_property_identifier" (:*unnamed* nil)) 
 ("program" (:*unnamed* ("statement" "hash_bang_line"))) 
 ("property_identifier" (:*unnamed* nil)) 
 ("property_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :type ("type_annotation"))) 
 ("public_field_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :type ("type_annotation") :value ("expression"))) 
 ("readonly_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("regex" (:*unnamed* nil :flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("regex_flags" (:*unnamed* nil)) 
 ("regex_pattern" (:*unnamed* nil)) 
 ("required_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("rest_pattern" "identifier") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("rest_pattern" (:*unnamed* ("undefined" "array_pattern" "subscript_expression" "identifier" "member_expression" "object_pattern" "non_null_expression"))) 
 ("rest_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("return_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("satisfies_expression" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "expression" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("sequence_expression" (:*unnamed* nil :left ("expression") :right ("expression" "sequence_expression"))) 
 ("shorthand_property_identifier" (:*unnamed* nil)) 
 ("shorthand_property_identifier_pattern" (:*unnamed* nil)) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement" (:*unnamed* ("with_statement" "for_statement" "switch_statement" "debugger_statement" "expression_statement" "do_statement" "labeled_statement" "try_statement" "while_statement" "declaration" "import_statement" "if_statement" "return_statement" "throw_statement" "break_statement" "for_in_statement" "export_statement" "empty_statement" "continue_statement" "statement_block"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("statement_identifier" (:*unnamed* nil)) 
 ("string" (:*unnamed* ("string_fragment" "escape_sequence"))) 
 ("string_fragment" (:*unnamed* nil)) 
 ("subscript_expression" (:*unnamed* nil :index ("expression" "predefined_type" "number" "string" "sequence_expression") :object ("expression") :optional_chain ("optional_chain"))) 
 ("super" (:*unnamed* nil)) 
 ("switch_body" (:*unnamed* ("switch_case" "switch_default"))) 
 ("switch_case" (:*unnamed* nil :body ("statement") :value ("expression" "sequence_expression"))) 
 ("switch_default" (:*unnamed* nil :body ("statement"))) 
 ("switch_statement" (:*unnamed* nil :body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_literal_type" (:*unnamed* ("template_type"))) 
 ("template_string" (:*unnamed* ("template_substitution" "escape_sequence"))) 
 ("template_substitution" (:*unnamed* ("expression" "sequence_expression"))) 
 ("template_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "predefined_type" "union_type" "intersection_type" "type_query"))) 
 ("ternary_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("this" (:*unnamed* nil)) 
 ("this_type" (:*unnamed* nil)) 
 ("throw_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("true" (:*unnamed* nil)) 
 ("try_statement" (:*unnamed* nil :body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("tuple_type" (:*unnamed* ("lookup_type" "optional_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "rest_type" "optional_parameter" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "required_parameter" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("type_alias_declaration" (:*unnamed* nil :name ("type_identifier") :type_parameters ("type_parameters") :value ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("type_annotation" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("type_arguments" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("type_assertion" (:*unnamed* ("expression" "type_arguments"))) 
 ("type_identifier" (:*unnamed* nil)) 
 ("type_parameter" (:*unnamed* nil :constraint ("constraint") :name ("type_identifier") :value ("default_type"))) 
 ("type_parameters" (:*unnamed* ("type_parameter"))) 
 ("type_predicate" (:*unnamed* nil :name ("this" "identifier") :type ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("type_predicate_annotation" (:*unnamed* ("type_predicate"))) 
 ("type_query" (:*unnamed* ("subscript_expression" "instantiation_expression" "identifier" "member_expression" "call_expression"))) 
 ("unary_expression" (:*unnamed* nil :argument ("expression" "number") :operator nil)) 
 ("undefined" (:*unnamed* nil)) 
 ("union_type" (:*unnamed* ("lookup_type" "array_type" "index_type_query" "literal_type" "nested_type_identifier" "parenthesized_type" "generic_type" "template_literal_type" "existential_type" "function_type" "conditional_type" "this_type" "type_identifier" "flow_maybe_type" "object_type" "infer_type" "tuple_type" "readonly_type" "predefined_type" "union_type" "intersection_type" "type_query" "constructor_type"))) 
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:*unnamed* nil :name ("array_pattern" "identifier" "object_pattern") :type ("type_annotation") :value ("expression"))) 
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:*unnamed* nil :body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))
;; END Production rules for typescript
;; START Inverse production rules for typescript
(defconst combobulate-rules-typescript-inverse 
 '(("abstract_class_declaration" ("declaration"))
   ("abstract_method_signature" ("class_body"))
   ("accessibility_modifier" ("method_signature" "abstract_method_signature" "optional_parameter" "public_field_definition" "property_signature" "required_parameter" "method_definition"))
   ("ambient_declaration" ("declaration"))
   ("arguments" ("call_expression" "new_expression"))
   ("array" ("primary_expression"))
   ("array_pattern" ("rest_pattern" "variable_declarator" "object_assignment_pattern" "catch_clause" "for_in_statement" "pattern" "assignment_expression"))
   ("array_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("arrow_function" ("primary_expression"))
   ("as_expression" ("expression"))
   ("asserts" ("asserts_annotation" "function_type"))
   ("asserts_annotation" ("method_signature" "function_declaration" "abstract_method_signature" "generator_function" "function" "generator_function_declaration" "method_definition" "call_signature" "function_signature" "arrow_function"))
   ("assignment_expression" ("expression"))
   ("assignment_pattern" ("array_pattern" "pair_pattern"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("break_statement" ("statement"))
   ("call_expression" ("decorator" "primary_expression" "type_query"))
   ("call_signature" ("object_type"))
   ("catch_clause" ("try_statement"))
   ("class" ("primary_expression"))
   ("class_body" ("class" "class_declaration" "abstract_class_declaration"))
   ("class_declaration" ("declaration"))
   ("class_heritage" ("class" "class_declaration" "abstract_class_declaration"))
   ("class_static_block" ("class_body"))
   ("computed_property_name" ("method_signature" "abstract_method_signature" "public_field_definition" "enum_body" "pair" "enum_assignment" "property_signature" "method_definition" "pair_pattern"))
   ("conditional_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("constraint" ("type_parameter"))
   ("construct_signature" ("object_type"))
   ("constructor_type" ("type_predicate" "lookup_type" "as_expression" "type_arguments" "implements_clause" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "infer_type" "union_type" "constructor_type"))
   ("continue_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("declaration" ("statement" "export_statement" "ambient_declaration"))
   ("decorator" ("class_declaration" "optional_parameter" "abstract_class_declaration" "class" "class_body" "required_parameter" "export_statement"))
   ("default_type" ("type_parameter"))
   ("do_statement" ("statement"))
   ("else_clause" ("if_statement"))
   ("empty_statement" ("statement" "for_statement"))
   ("enum_assignment" ("enum_body"))
   ("enum_body" ("enum_declaration"))
   ("enum_declaration" ("declaration"))
   ("escape_sequence" ("template_string" "string"))
   ("existential_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("export_clause" ("export_statement"))
   ("export_specifier" ("export_clause"))
   ("export_statement" ("statement" "object_type"))
   ("expression" ("for_statement" "public_field_definition" "as_expression" "expression_statement" "sequence_expression" "non_null_expression" "type_assertion" "extends_clause" "update_expression" "binary_expression" "member_expression" "unary_expression" "subscript_expression" "augmented_assignment_expression" "for_in_statement" "await_expression" "switch_case" "assignment_pattern" "export_statement" "satisfies_expression" "variable_declarator" "instantiation_expression" "jsx_expression" "object_assignment_pattern" "call_expression" "pair" "spread_element" "yield_expression" "template_substitution" "array" "parenthesized_expression" "arguments" "assignment_expression" "return_statement" "throw_statement" "computed_property_name" "optional_parameter" "enum_assignment" "required_parameter" "ternary_expression" "arrow_function"))
   ("expression_statement" ("statement" "for_statement"))
   ("extends_clause" ("class_heritage"))
   ("extends_type_clause" ("interface_declaration"))
   ("false" ("primary_expression" "literal_type"))
   ("finally_clause" ("try_statement"))
   ("flow_maybe_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("for_in_statement" ("statement"))
   ("for_statement" ("statement"))
   ("formal_parameters" ("method_signature" "function_declaration" "abstract_method_signature" "generator_function" "function" "function_signature" "construct_signature" "generator_function_declaration" "method_definition" "call_signature" "function_type" "arrow_function" "constructor_type"))
   ("function" ("primary_expression"))
   ("function_declaration" ("declaration"))
   ("function_signature" ("declaration"))
   ("function_type" ("type_predicate" "lookup_type" "as_expression" "type_arguments" "implements_clause" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "infer_type" "union_type" "constructor_type"))
   ("generator_function" ("primary_expression"))
   ("generator_function_declaration" ("declaration"))
   ("generic_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "extends_type_clause" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("glimmer_template" ("expression"))
   ("hash_bang_line" ("program"))
   ("identifier" ("type_predicate" "function" "nested_type_identifier" "primary_expression" "generator_function_declaration" "import_specifier" "import_require_clause" "function_declaration" "rest_pattern" "generator_function" "member_expression" "import_clause" "augmented_assignment_expression" "for_in_statement" "asserts" "namespace_import" "export_statement" "pattern" "jsx_opening_element" "variable_declarator" "instantiation_expression" "jsx_closing_element" "catch_clause" "jsx_self_closing_element" "jsx_namespace_name" "decorator" "index_signature" "module" "assignment_expression" "export_specifier" "optional_parameter" "internal_module" "enum_declaration" "nested_identifier" "required_parameter" "import_alias" "namespace_export" "function_signature" "type_query" "arrow_function"))
   ("if_statement" ("statement"))
   ("implements_clause" ("class_heritage"))
   ("import" ("instantiation_expression" "primary_expression"))
   ("import_alias" ("declaration"))
   ("import_clause" ("import_statement"))
   ("import_require_clause" ("import_statement"))
   ("import_specifier" ("named_imports"))
   ("import_statement" ("statement"))
   ("index_signature" ("object_type" "class_body"))
   ("index_type_query" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("infer_type" ("type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "infer_type" "union_type" "constructor_type"))
   ("instantiation_expression" ("expression" "type_query"))
   ("interface_declaration" ("declaration"))
   ("internal_module" ("expression" "declaration"))
   ("intersection_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_element" ("jsx_attribute" "jsx_element"))
   ("jsx_expression" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_element"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_closing_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_self_closing_element" ("jsx_attribute" "jsx_element"))
   ("jsx_text" ("jsx_element"))
   ("labeled_statement" ("statement"))
   ("lexical_declaration" ("for_statement" "declaration"))
   ("literal_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("lookup_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("mapped_type_clause" ("index_signature"))
   ("member_expression" ("rest_pattern" "instantiation_expression" "jsx_closing_element" "member_expression" "jsx_self_closing_element" "augmented_assignment_expression" "primary_expression" "for_in_statement" "nested_identifier" "decorator" "pattern" "jsx_opening_element" "type_query" "assignment_expression"))
   ("meta_property" ("primary_expression"))
   ("method_definition" ("class_body" "object"))
   ("method_signature" ("object_type" "class_body"))
   ("module" ("declaration"))
   ("named_imports" ("import_clause"))
   ("namespace_export" ("export_statement"))
   ("namespace_import" ("import_clause"))
   ("nested_identifier" ("import_alias" "module" "nested_type_identifier" "internal_module"))
   ("nested_type_identifier" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "generic_type" "index_signature" "function_type" "rest_type" "extends_type_clause" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("new_expression" ("expression"))
   ("non_null_expression" ("rest_pattern" "augmented_assignment_expression" "for_in_statement" "primary_expression" "pattern" "assignment_expression"))
   ("null" ("primary_expression" "literal_type"))
   ("number" ("method_signature" "abstract_method_signature" "public_field_definition" "enum_body" "literal_type" "pair" "enum_assignment" "subscript_expression" "unary_expression" "primary_expression" "property_signature" "method_definition" "pair_pattern"))
   ("object" ("primary_expression"))
   ("object_assignment_pattern" ("object_pattern"))
   ("object_pattern" ("rest_pattern" "variable_declarator" "object_assignment_pattern" "catch_clause" "for_in_statement" "pattern" "assignment_expression"))
   ("object_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "interface_declaration" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("omitting_type_annotation" ("index_signature"))
   ("opting_type_annotation" ("index_signature"))
   ("optional_chain" ("subscript_expression" "member_expression"))
   ("optional_parameter" ("tuple_type" "formal_parameters"))
   ("optional_type" ("tuple_type"))
   ("override_modifier" ("method_signature" "optional_parameter" "public_field_definition" "property_signature" "required_parameter" "method_definition"))
   ("pair" ("object"))
   ("pair_pattern" ("object_pattern"))
   ("parenthesized_expression" ("with_statement" "switch_statement" "do_statement" "augmented_assignment_expression" "for_in_statement" "primary_expression" "while_statement" "if_statement" "assignment_expression"))
   ("parenthesized_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("pattern" ("array_pattern" "optional_parameter" "required_parameter" "assignment_pattern" "pair_pattern"))
   ("predefined_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "subscript_expression" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("primary_expression" ("expression" "new_expression"))
   ("private_property_identifier" ("method_signature" "abstract_method_signature" "member_expression" "public_field_definition" "enum_body" "pair" "enum_assignment" "property_signature" "method_definition" "pair_pattern"))
   ("property_identifier" ("method_signature" "abstract_method_signature" "member_expression" "public_field_definition" "enum_body" "pair" "enum_assignment" "ambient_declaration" "nested_identifier" "property_signature" "method_definition" "pair_pattern" "jsx_attribute"))
   ("property_signature" ("object_type"))
   ("public_field_definition" ("class_body"))
   ("readonly_type" ("type_predicate" "lookup_type" "as_expression" "type_arguments" "implements_clause" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "infer_type" "union_type" "constructor_type"))
   ("regex" ("primary_expression"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("required_parameter" ("tuple_type" "formal_parameters"))
   ("rest_pattern" ("pattern" "required_parameter" "object_pattern"))
   ("rest_type" ("tuple_type"))
   ("return_statement" ("statement"))
   ("satisfies_expression" ("expression"))
   ("sequence_expression" ("throw_statement" "for_statement" "jsx_expression" "expression_statement" "sequence_expression" "subscript_expression" "template_substitution" "for_in_statement" "switch_case" "parenthesized_expression" "return_statement"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_pattern" "object_assignment_pattern"))
   ("spread_element" ("object" "array" "arguments" "jsx_expression"))
   ("statement" ("else_clause" "with_statement" "for_statement" "do_statement" "labeled_statement" "for_in_statement" "switch_case" "statement_block" "switch_default" "while_statement" "if_statement" "program"))
   ("statement_block" ("function_declaration" "method_definition" "generator_function" "finally_clause" "internal_module" "catch_clause" "function" "ambient_declaration" "try_statement" "generator_function_declaration" "class_static_block" "statement" "module" "arrow_function"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("string" ("method_signature" "public_field_definition" "enum_body" "literal_type" "primary_expression" "method_definition" "import_statement" "import_specifier" "import_require_clause" "subscript_expression" "pair_pattern" "export_statement" "abstract_method_signature" "pair" "property_signature" "module" "export_specifier" "internal_module" "enum_assignment" "namespace_export" "jsx_attribute"))
   ("string_fragment" ("string"))
   ("subscript_expression" ("rest_pattern" "instantiation_expression" "augmented_assignment_expression" "for_in_statement" "primary_expression" "pattern" "type_query" "assignment_expression"))
   ("super" ("primary_expression"))
   ("switch_body" ("switch_statement"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_statement" ("statement"))
   ("template_literal_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("template_string" ("call_expression" "primary_expression"))
   ("template_substitution" ("template_string"))
   ("template_type" ("template_literal_type"))
   ("ternary_expression" ("expression"))
   ("this" ("type_predicate" "optional_parameter" "primary_expression" "required_parameter" "asserts"))
   ("this_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("throw_statement" ("statement"))
   ("true" ("primary_expression" "literal_type"))
   ("try_statement" ("statement"))
   ("tuple_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("type_alias_declaration" ("declaration"))
   ("type_annotation" ("method_signature" "public_field_definition" "function" "generator_function_declaration" "method_definition" "function_declaration" "generator_function" "variable_declarator" "abstract_method_signature" "catch_clause" "property_signature" "index_signature" "parenthesized_expression" "optional_parameter" "construct_signature" "required_parameter" "call_signature" "function_signature" "arrow_function"))
   ("type_arguments" ("instantiation_expression" "call_expression" "jsx_self_closing_element" "type_assertion" "extends_clause" "generic_type" "jsx_opening_element" "new_expression"))
   ("type_assertion" ("expression"))
   ("type_identifier" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "nested_type_identifier" "parenthesized_type" "conditional_type" "class_declaration" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "class" "omitting_type_annotation" "generic_type" "index_signature" "function_type" "rest_type" "extends_type_clause" "type_parameter" "interface_declaration" "abstract_class_declaration" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("type_parameter" ("type_parameters"))
   ("type_parameters" ("method_signature" "function_declaration" "interface_declaration" "abstract_method_signature" "class_declaration" "generator_function" "abstract_class_declaration" "function" "constructor_type" "construct_signature" "class" "generator_function_declaration" "type_alias_declaration" "method_definition" "call_signature" "function_type" "function_signature" "arrow_function"))
   ("type_predicate" ("function_type" "type_predicate_annotation" "asserts"))
   ("type_predicate_annotation" ("method_signature" "function_declaration" "abstract_method_signature" "generator_function" "function" "generator_function_declaration" "method_definition" "call_signature" "function_signature" "arrow_function"))
   ("type_query" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("unary_expression" ("expression" "literal_type"))
   ("undefined" ("rest_pattern" "literal_type" "for_in_statement" "primary_expression" "pattern" "assignment_expression"))
   ("union_type" ("_primary_type" "type_predicate" "lookup_type" "as_expression" "template_type" "type_arguments" "implements_clause" "index_type_query" "parenthesized_type" "conditional_type" "default_type" "ambient_declaration" "opting_type_annotation" "readonly_type" "tuple_type" "mapped_type_clause" "intersection_type" "satisfies_expression" "type_annotation" "optional_type" "constraint" "array_type" "type_alias_declaration" "omitting_type_annotation" "index_signature" "function_type" "rest_type" "flow_maybe_type" "infer_type" "union_type" "constructor_type"))
   ("update_expression" ("expression"))
   ("variable_declaration" ("for_statement" "declaration"))
   ("variable_declarator" ("variable_declaration" "lexical_declaration"))
   ("while_statement" ("statement"))
   ("with_statement" ("statement"))
   ("yield_expression" ("expression"))
  ) 
)
;; END Inverse production rules for typescript
;; START All node types in typescript
(defconst combobulate-rules-typescript-types 
 '("_primary_type" "abstract_class_declaration" "abstract_method_signature" "accessibility_modifier" "ambient_declaration" "arguments" "array" "array_pattern" "array_type" "arrow_function" "as_expression" "asserts" "asserts_annotation" "assignment_expression" "assignment_pattern" "augmented_assignment_expression" "await_expression" "binary_expression" "break_statement" "call_expression" "call_signature" "catch_clause" "class" "class_body" "class_declaration" "class_heritage" "class_static_block" "comment" "computed_property_name" "conditional_type" "constraint" "construct_signature" "constructor_type" "continue_statement" "debugger_statement" "declaration" "decorator" "default_type" "do_statement" "else_clause" "empty_statement" "enum_assignment" "enum_body" "enum_declaration" "escape_sequence" "existential_type" "export_clause" "export_specifier" "export_statement" "expression" "expression_statement" "extends_clause" "extends_type_clause" "false" "finally_clause" "flow_maybe_type" "for_in_statement" "for_statement" "formal_parameters" "function" "function_declaration" "function_signature" "function_type" "generator_function" "generator_function_declaration" "generic_type" "glimmer_closing_tag" "glimmer_opening_tag" "glimmer_template" "hash_bang_line" "identifier" "if_statement" "implements_clause" "import" "import_alias" "import_clause" "import_require_clause" "import_specifier" "import_statement" "index_signature" "index_type_query" "infer_type" "instantiation_expression" "interface_declaration" "internal_module" "intersection_type" "jsx_attribute" "jsx_closing_element" "jsx_element" "jsx_expression" "jsx_namespace_name" "jsx_opening_element" "jsx_self_closing_element" "jsx_text" "labeled_statement" "lexical_declaration" "literal_type" "lookup_type" "mapped_type_clause" "member_expression" "meta_property" "method_definition" "method_signature" "module" "named_imports" "namespace_export" "namespace_import" "nested_identifier" "nested_type_identifier" "new_expression" "non_null_expression" "null" "number" "object" "object_assignment_pattern" "object_pattern" "object_type" "omitting_type_annotation" "opting_type_annotation" "optional_chain" "optional_parameter" "optional_type" "override_modifier" "pair" "pair_pattern" "parenthesized_expression" "parenthesized_type" "pattern" "predefined_type" "primary_expression" "private_property_identifier" "program" "property_identifier" "property_signature" "public_field_definition" "readonly_type" "regex" "regex_flags" "regex_pattern" "required_parameter" "rest_pattern" "rest_type" "return_statement" "satisfies_expression" "sequence_expression" "shorthand_property_identifier" "shorthand_property_identifier_pattern" "spread_element" "statement" "statement_block" "statement_identifier" "string" "string_fragment" "subscript_expression" "super" "switch_body" "switch_case" "switch_default" "switch_statement" "template_literal_type" "template_string" "template_substitution" "template_type" "ternary_expression" "this" "this_type" "throw_statement" "true" "try_statement" "tuple_type" "type_alias_declaration" "type_annotation" "type_arguments" "type_assertion" "type_identifier" "type_parameter" "type_parameters" "type_predicate" "type_predicate_annotation" "type_query" "unary_expression" "undefined" "union_type" "update_expression" "variable_declaration" "variable_declarator" "while_statement" "with_statement" "yield_expression") 
)
;; END All node types in typescript
;; START All supertypes in typescript
(defconst combobulate-rules-typescript-supertypes 
 '("_primary_type" "declaration" "expression" "pattern" "primary_expression" "statement") 
)
;; END All supertypes in typescript

;; START Production rules for javascript
(defconst combobulate-rules-javascript 
 '(("arguments" (:*unnamed* ("expression" "spread_element"))) 
 ("array" (:*unnamed* ("expression" "spread_element"))) 
 ("array_pattern" (:*unnamed* ("assignment_pattern" "pattern"))) 
 ("arrow_function" (:*unnamed* nil :body ("expression" "statement_block") :parameter ("identifier") :parameters ("formal_parameters"))) 
 ("assignment_expression" (:*unnamed* nil :left ("undefined" "array_pattern" "subscript_expression" "identifier" "member_expression" "parenthesized_expression" "object_pattern") :right ("expression"))) 
 ("assignment_pattern" (:*unnamed* nil :left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:*unnamed* nil :left ("subscript_expression" "parenthesized_expression" "identifier" "member_expression") :operator nil :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:*unnamed* nil :left ("expression" "private_property_identifier") :operator nil :right ("expression"))) 
 ("break_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("call_expression" (:*unnamed* nil :arguments ("template_string" "arguments") :function ("expression" "import") :optional_chain ("optional_chain"))) 
 ("catch_clause" (:*unnamed* nil :body ("statement_block") :parameter ("array_pattern" "identifier" "object_pattern"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_body" (:*unnamed* nil :member ("method_definition" "field_definition" "class_static_block") :template ("glimmer_template"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_heritage" (:*unnamed* ("expression"))) 
 ("class_static_block" (:*unnamed* nil :body ("statement_block"))) 
 ("comment" (:*unnamed* nil)) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("continue_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("debugger_statement" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("function_declaration" "class_declaration" "generator_function_declaration" "variable_declaration" "lexical_declaration"))) 
 ("decorator" (:*unnamed* ("call_expression" "identifier" "member_expression"))) 
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("empty_statement" (:*unnamed* nil)) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:*unnamed* nil :alias ("string" "identifier") :name ("string" "identifier"))) 
 ("export_statement" (:*unnamed* ("namespace_export" "export_clause") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression" (:*unnamed* ("glimmer_template" "binary_expression" "jsx_self_closing_element" "unary_expression" "yield_expression" "augmented_assignment_expression" "primary_expression" "await_expression" "update_expression" "ternary_expression" "jsx_element" "new_expression" "assignment_expression"))) 
 ("expression_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("false" (:*unnamed* nil)) 
 ("field_definition" (:*unnamed* nil :decorator ("decorator") :property ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :value ("expression"))) 
 ("finally_clause" (:*unnamed* nil :body ("statement_block"))) 
 ("for_in_statement" (:*unnamed* nil :body ("statement") :kind nil :left ("undefined" "array_pattern" "subscript_expression" "identifier" "member_expression" "parenthesized_expression" "object_pattern") :operator nil :right ("expression" "sequence_expression") :value ("expression"))) 
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("empty_statement" "expression_statement") :increment ("expression" "sequence_expression") :initializer ("variable_declaration" "empty_statement" "expression_statement" "lexical_declaration"))) 
 ("formal_parameters" (:*unnamed* ("assignment_pattern" "pattern"))) 
 ("function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("function_expression" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("glimmer_closing_tag" (:*unnamed* nil)) 
 ("glimmer_opening_tag" (:*unnamed* nil)) 
 ("glimmer_template" (:*unnamed* nil :close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("hash_bang_line" (:*unnamed* nil)) 
 ("html_character_reference" (:*unnamed* nil)) 
 ("html_comment" (:*unnamed* nil)) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("import" (:*unnamed* nil)) 
 ("import_attribute" (:*unnamed* ("object"))) 
 ("import_clause" (:*unnamed* ("namespace_import" "named_imports" "identifier"))) 
 ("import_specifier" (:*unnamed* nil :alias ("identifier") :name ("string" "identifier"))) 
 ("import_statement" (:*unnamed* ("import_attribute" "import_clause") :source ("string"))) 
 ("jsx_attribute" (:*unnamed* ("jsx_namespace_name" "jsx_expression" "property_identifier" "jsx_self_closing_element" "string" "jsx_element"))) 
 ("jsx_closing_element" (:*unnamed* nil :name ("identifier" "jsx_namespace_name" "member_expression"))) 
 ("jsx_element" (:*unnamed* ("jsx_expression" "jsx_self_closing_element" "html_character_reference" "jsx_text" "jsx_element") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("expression" "spread_element" "sequence_expression"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression"))) 
 ("jsx_self_closing_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression"))) 
 ("jsx_text" (:*unnamed* nil)) 
 ("labeled_statement" (:*unnamed* nil :body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil)) 
 ("member_expression" (:*unnamed* nil :object ("expression" "import") :optional_chain ("optional_chain") :property ("private_property_identifier" "property_identifier"))) 
 ("meta_property" (:*unnamed* nil)) 
 ("method_definition" (:*unnamed* nil :body ("statement_block") :decorator ("decorator") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :parameters ("formal_parameters"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("string" "identifier"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("new_expression" (:*unnamed* nil :arguments ("arguments") :constructor ("primary_expression" "new_expression"))) 
 ("null" (:*unnamed* nil)) 
 ("number" (:*unnamed* nil)) 
 ("object" (:*unnamed* ("method_definition" "shorthand_property_identifier" "pair" "spread_element"))) 
 ("object_assignment_pattern" (:*unnamed* nil :left ("array_pattern" "shorthand_property_identifier_pattern" "object_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("rest_pattern" "pair_pattern" "shorthand_property_identifier_pattern" "object_assignment_pattern"))) 
 ("optional_chain" (:*unnamed* nil)) 
 ("pair" (:*unnamed* nil :key ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :value ("expression"))) 
 ("pair_pattern" (:*unnamed* nil :key ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :value ("assignment_pattern" "pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("expression" "sequence_expression"))) 
 ("pattern" (:*unnamed* ("undefined" "array_pattern" "rest_pattern" "subscript_expression" "identifier" "member_expression" "object_pattern"))) 
 ("primary_expression" (:*unnamed* ("undefined" "meta_property" "call_expression" "number" "string" "this" "class" "array" "false" "regex" "parenthesized_expression" "template_string" "true" "object" "generator_function" "function_expression" "member_expression" "super" "subscript_expression" "identifier" "null" "arrow_function"))) 
 ("private_property_identifier" (:*unnamed* nil)) 
 ("program" (:*unnamed* ("statement" "hash_bang_line"))) 
 ("property_identifier" (:*unnamed* nil)) 
 ("regex" (:*unnamed* nil :flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("regex_flags" (:*unnamed* nil)) 
 ("regex_pattern" (:*unnamed* nil)) 
 ("rest_pattern" (:*unnamed* ("undefined" "array_pattern" "subscript_expression" "identifier" "member_expression" "object_pattern"))) 
 ("return_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("sequence_expression" (:*unnamed* ("expression"))) 
 ("shorthand_property_identifier" (:*unnamed* nil)) 
 ("shorthand_property_identifier_pattern" (:*unnamed* nil)) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement" (:*unnamed* ("with_statement" "for_statement" "switch_statement" "debugger_statement" "expression_statement" "do_statement" "labeled_statement" "try_statement" "while_statement" "declaration" "import_statement" "if_statement" "return_statement" "throw_statement" "break_statement" "for_in_statement" "export_statement" "empty_statement" "continue_statement" "statement_block"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("statement_identifier" (:*unnamed* nil)) 
 ("string" (:*unnamed* ("string_fragment" "html_character_reference" "escape_sequence"))) 
 ("string_fragment" (:*unnamed* nil)) 
 ("subscript_expression" (:*unnamed* nil :index ("expression" "sequence_expression") :object ("expression") :optional_chain ("optional_chain"))) 
 ("super" (:*unnamed* nil)) 
 ("switch_body" (:*unnamed* ("switch_case" "switch_default"))) 
 ("switch_case" (:*unnamed* nil :body ("statement") :value ("expression" "sequence_expression"))) 
 ("switch_default" (:*unnamed* nil :body ("statement"))) 
 ("switch_statement" (:*unnamed* nil :body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_string" (:*unnamed* ("template_substitution" "string_fragment" "escape_sequence"))) 
 ("template_substitution" (:*unnamed* ("expression" "sequence_expression"))) 
 ("ternary_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("this" (:*unnamed* nil)) 
 ("throw_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("true" (:*unnamed* nil)) 
 ("try_statement" (:*unnamed* nil :body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("unary_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("undefined" (:*unnamed* nil)) 
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:*unnamed* nil :name ("array_pattern" "identifier" "object_pattern") :value ("expression"))) 
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:*unnamed* nil :body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))
;; END Production rules for javascript
;; START Inverse production rules for javascript
(defconst combobulate-rules-javascript-inverse 
 '(("arguments" ("call_expression" "new_expression"))
   ("array" ("primary_expression"))
   ("array_pattern" ("rest_pattern" "variable_declarator" "object_assignment_pattern" "catch_clause" "for_in_statement" "pattern" "assignment_expression"))
   ("arrow_function" ("primary_expression"))
   ("assignment_expression" ("expression"))
   ("assignment_pattern" ("array_pattern" "pair_pattern" "formal_parameters"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("break_statement" ("statement"))
   ("call_expression" ("decorator" "primary_expression"))
   ("catch_clause" ("try_statement"))
   ("class" ("primary_expression"))
   ("class_body" ("class" "class_declaration"))
   ("class_declaration" ("declaration"))
   ("class_heritage" ("class" "class_declaration"))
   ("class_static_block" ("class_body"))
   ("computed_property_name" ("method_definition" "field_definition" "pair_pattern" "pair"))
   ("continue_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("declaration" ("statement" "export_statement"))
   ("decorator" ("field_definition" "class_declaration" "class" "method_definition" "export_statement"))
   ("do_statement" ("statement"))
   ("else_clause" ("if_statement"))
   ("empty_statement" ("statement" "for_statement"))
   ("escape_sequence" ("template_string" "string"))
   ("export_clause" ("export_statement"))
   ("export_specifier" ("export_clause"))
   ("export_statement" ("statement"))
   ("expression" ("for_statement" "expression_statement" "sequence_expression" "update_expression" "binary_expression" "member_expression" "unary_expression" "subscript_expression" "augmented_assignment_expression" "for_in_statement" "await_expression" "switch_case" "assignment_pattern" "export_statement" "field_definition" "variable_declarator" "class_heritage" "jsx_expression" "object_assignment_pattern" "call_expression" "pair" "spread_element" "yield_expression" "template_substitution" "array" "parenthesized_expression" "arguments" "assignment_expression" "return_statement" "throw_statement" "computed_property_name" "ternary_expression" "arrow_function"))
   ("expression_statement" ("statement" "for_statement"))
   ("false" ("primary_expression"))
   ("field_definition" ("class_body"))
   ("finally_clause" ("try_statement"))
   ("for_in_statement" ("statement"))
   ("for_statement" ("statement"))
   ("formal_parameters" ("function_declaration" "generator_function" "function_expression" "generator_function_declaration" "method_definition" "arrow_function"))
   ("function_declaration" ("declaration"))
   ("function_expression" ("primary_expression"))
   ("generator_function" ("primary_expression"))
   ("generator_function_declaration" ("declaration"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("glimmer_template" ("expression" "class_body"))
   ("hash_bang_line" ("program"))
   ("html_character_reference" ("string" "jsx_element"))
   ("identifier" ("primary_expression" "generator_function_declaration" "import_specifier" "function_declaration" "rest_pattern" "class_declaration" "generator_function" "import_clause" "augmented_assignment_expression" "for_in_statement" "namespace_import" "pattern" "jsx_opening_element" "variable_declarator" "jsx_closing_element" "catch_clause" "jsx_self_closing_element" "class" "jsx_namespace_name" "decorator" "assignment_expression" "export_specifier" "function_expression" "namespace_export" "arrow_function"))
   ("if_statement" ("statement"))
   ("import" ("call_expression" "member_expression"))
   ("import_attribute" ("import_statement"))
   ("import_clause" ("import_statement"))
   ("import_specifier" ("named_imports"))
   ("import_statement" ("statement"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_element" ("expression" "jsx_attribute" "jsx_element"))
   ("jsx_expression" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_element"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_closing_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_self_closing_element" ("expression" "jsx_attribute" "jsx_element"))
   ("jsx_text" ("jsx_element"))
   ("labeled_statement" ("statement"))
   ("lexical_declaration" ("for_statement" "declaration"))
   ("member_expression" ("rest_pattern" "jsx_closing_element" "jsx_self_closing_element" "augmented_assignment_expression" "primary_expression" "for_in_statement" "decorator" "pattern" "jsx_opening_element" "assignment_expression"))
   ("meta_property" ("primary_expression"))
   ("method_definition" ("class_body" "object"))
   ("named_imports" ("import_clause"))
   ("namespace_export" ("export_statement"))
   ("namespace_import" ("import_clause"))
   ("new_expression" ("expression" "new_expression"))
   ("null" ("primary_expression"))
   ("number" ("field_definition" "pair" "primary_expression" "method_definition" "pair_pattern"))
   ("object" ("primary_expression" "import_attribute"))
   ("object_assignment_pattern" ("object_pattern"))
   ("object_pattern" ("rest_pattern" "variable_declarator" "object_assignment_pattern" "catch_clause" "for_in_statement" "pattern" "assignment_expression"))
   ("optional_chain" ("subscript_expression" "call_expression" "member_expression"))
   ("pair" ("object"))
   ("pair_pattern" ("object_pattern"))
   ("parenthesized_expression" ("with_statement" "switch_statement" "do_statement" "augmented_assignment_expression" "for_in_statement" "primary_expression" "while_statement" "if_statement" "assignment_expression"))
   ("pattern" ("array_pattern" "pair_pattern" "formal_parameters" "assignment_pattern"))
   ("primary_expression" ("expression" "new_expression"))
   ("private_property_identifier" ("binary_expression" "field_definition" "member_expression" "pair" "method_definition" "pair_pattern"))
   ("property_identifier" ("field_definition" "member_expression" "pair" "method_definition" "pair_pattern" "jsx_attribute"))
   ("regex" ("primary_expression"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("rest_pattern" ("pattern" "object_pattern"))
   ("return_statement" ("statement"))
   ("sequence_expression" ("throw_statement" "for_statement" "jsx_expression" "expression_statement" "subscript_expression" "template_substitution" "for_in_statement" "switch_case" "parenthesized_expression" "return_statement"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_pattern" "object_assignment_pattern"))
   ("spread_element" ("object" "array" "arguments" "jsx_expression"))
   ("statement" ("else_clause" "with_statement" "for_statement" "do_statement" "labeled_statement" "for_in_statement" "switch_case" "statement_block" "switch_default" "while_statement" "if_statement" "program"))
   ("statement_block" ("function_declaration" "method_definition" "generator_function" "function_expression" "finally_clause" "catch_clause" "try_statement" "generator_function_declaration" "class_static_block" "statement" "arrow_function"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("string" ("field_definition" "export_specifier" "pair_pattern" "pair" "namespace_export" "primary_expression" "import_specifier" "method_definition" "import_statement" "export_statement" "jsx_attribute"))
   ("string_fragment" ("template_string" "string"))
   ("subscript_expression" ("rest_pattern" "augmented_assignment_expression" "for_in_statement" "primary_expression" "pattern" "assignment_expression"))
   ("super" ("primary_expression"))
   ("switch_body" ("switch_statement"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_statement" ("statement"))
   ("template_string" ("call_expression" "primary_expression"))
   ("template_substitution" ("template_string"))
   ("ternary_expression" ("expression"))
   ("this" ("primary_expression"))
   ("throw_statement" ("statement"))
   ("true" ("primary_expression"))
   ("try_statement" ("statement"))
   ("unary_expression" ("expression"))
   ("undefined" ("rest_pattern" "for_in_statement" "primary_expression" "pattern" "assignment_expression"))
   ("update_expression" ("expression"))
   ("variable_declaration" ("for_statement" "declaration"))
   ("variable_declarator" ("variable_declaration" "lexical_declaration"))
   ("while_statement" ("statement"))
   ("with_statement" ("statement"))
   ("yield_expression" ("expression"))
  ) 
)
;; END Inverse production rules for javascript
;; START All node types in javascript
(defconst combobulate-rules-javascript-types 
 '("arguments" "array" "array_pattern" "arrow_function" "assignment_expression" "assignment_pattern" "augmented_assignment_expression" "await_expression" "binary_expression" "break_statement" "call_expression" "catch_clause" "class" "class_body" "class_declaration" "class_heritage" "class_static_block" "comment" "computed_property_name" "continue_statement" "debugger_statement" "declaration" "decorator" "do_statement" "else_clause" "empty_statement" "escape_sequence" "export_clause" "export_specifier" "export_statement" "expression" "expression_statement" "false" "field_definition" "finally_clause" "for_in_statement" "for_statement" "formal_parameters" "function_declaration" "function_expression" "generator_function" "generator_function_declaration" "glimmer_closing_tag" "glimmer_opening_tag" "glimmer_template" "hash_bang_line" "html_character_reference" "html_comment" "identifier" "if_statement" "import" "import_attribute" "import_clause" "import_specifier" "import_statement" "jsx_attribute" "jsx_closing_element" "jsx_element" "jsx_expression" "jsx_namespace_name" "jsx_opening_element" "jsx_self_closing_element" "jsx_text" "labeled_statement" "lexical_declaration" "member_expression" "meta_property" "method_definition" "named_imports" "namespace_export" "namespace_import" "new_expression" "null" "number" "object" "object_assignment_pattern" "object_pattern" "optional_chain" "pair" "pair_pattern" "parenthesized_expression" "pattern" "primary_expression" "private_property_identifier" "program" "property_identifier" "regex" "regex_flags" "regex_pattern" "rest_pattern" "return_statement" "sequence_expression" "shorthand_property_identifier" "shorthand_property_identifier_pattern" "spread_element" "statement" "statement_block" "statement_identifier" "string" "string_fragment" "subscript_expression" "super" "switch_body" "switch_case" "switch_default" "switch_statement" "template_string" "template_substitution" "ternary_expression" "this" "throw_statement" "true" "try_statement" "unary_expression" "undefined" "update_expression" "variable_declaration" "variable_declarator" "while_statement" "with_statement" "yield_expression") 
)
;; END All node types in javascript
;; START All supertypes in javascript
(defconst combobulate-rules-javascript-supertypes 
 '("declaration" "expression" "pattern" "primary_expression" "statement") 
)
;; END All supertypes in javascript

;; START Production rules for jsx
(defconst combobulate-rules-jsx 
 '(("arguments" (:*unnamed* ("expression" "spread_element"))) 
 ("array" (:*unnamed* ("expression" "spread_element"))) 
 ("array_pattern" (:*unnamed* ("assignment_pattern" "pattern"))) 
 ("arrow_function" (:*unnamed* nil :body ("expression" "statement_block") :parameter ("identifier") :parameters ("formal_parameters"))) 
 ("assignment_expression" (:*unnamed* nil :left ("undefined" "array_pattern" "subscript_expression" "identifier" "member_expression" "parenthesized_expression" "object_pattern") :right ("expression"))) 
 ("assignment_pattern" (:*unnamed* nil :left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:*unnamed* nil :left ("subscript_expression" "parenthesized_expression" "identifier" "member_expression") :operator nil :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:*unnamed* nil :left ("expression" "private_property_identifier") :operator nil :right ("expression"))) 
 ("break_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("call_expression" (:*unnamed* nil :arguments ("template_string" "arguments") :function ("expression" "import") :optional_chain ("optional_chain"))) 
 ("catch_clause" (:*unnamed* nil :body ("statement_block") :parameter ("array_pattern" "identifier" "object_pattern"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_body" (:*unnamed* nil :member ("method_definition" "field_definition" "class_static_block") :template ("glimmer_template"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_heritage" (:*unnamed* ("expression"))) 
 ("class_static_block" (:*unnamed* nil :body ("statement_block"))) 
 ("comment" (:*unnamed* nil)) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("continue_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("debugger_statement" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("function_declaration" "class_declaration" "generator_function_declaration" "variable_declaration" "lexical_declaration"))) 
 ("decorator" (:*unnamed* ("call_expression" "identifier" "member_expression"))) 
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("empty_statement" (:*unnamed* nil)) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:*unnamed* nil :alias ("string" "identifier") :name ("string" "identifier"))) 
 ("export_statement" (:*unnamed* ("namespace_export" "export_clause") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression" (:*unnamed* ("glimmer_template" "binary_expression" "jsx_self_closing_element" "unary_expression" "yield_expression" "augmented_assignment_expression" "primary_expression" "await_expression" "update_expression" "ternary_expression" "jsx_element" "new_expression" "assignment_expression"))) 
 ("expression_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("false" (:*unnamed* nil)) 
 ("field_definition" (:*unnamed* nil :decorator ("decorator") :property ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :value ("expression"))) 
 ("finally_clause" (:*unnamed* nil :body ("statement_block"))) 
 ("for_in_statement" (:*unnamed* nil :body ("statement") :kind nil :left ("undefined" "array_pattern" "subscript_expression" "identifier" "member_expression" "parenthesized_expression" "object_pattern") :operator nil :right ("expression" "sequence_expression") :value ("expression"))) 
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("empty_statement" "expression_statement") :increment ("expression" "sequence_expression") :initializer ("variable_declaration" "empty_statement" "expression_statement" "lexical_declaration"))) 
 ("formal_parameters" (:*unnamed* ("assignment_pattern" "pattern"))) 
 ("function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("function_expression" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("glimmer_closing_tag" (:*unnamed* nil)) 
 ("glimmer_opening_tag" (:*unnamed* nil)) 
 ("glimmer_template" (:*unnamed* nil :close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("hash_bang_line" (:*unnamed* nil)) 
 ("html_character_reference" (:*unnamed* nil)) 
 ("html_comment" (:*unnamed* nil)) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("import" (:*unnamed* nil)) 
 ("import_attribute" (:*unnamed* ("object"))) 
 ("import_clause" (:*unnamed* ("namespace_import" "named_imports" "identifier"))) 
 ("import_specifier" (:*unnamed* nil :alias ("identifier") :name ("string" "identifier"))) 
 ("import_statement" (:*unnamed* ("import_attribute" "import_clause") :source ("string"))) 
 ("jsx_attribute" (:*unnamed* ("jsx_namespace_name" "jsx_expression" "property_identifier" "jsx_self_closing_element" "string" "jsx_element"))) 
 ("jsx_closing_element" (:*unnamed* nil :name ("identifier" "jsx_namespace_name" "member_expression"))) 
 ("jsx_element" (:*unnamed* ("jsx_expression" "jsx_self_closing_element" "html_character_reference" "jsx_text" "jsx_element") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("expression" "spread_element" "sequence_expression"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression"))) 
 ("jsx_self_closing_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression"))) 
 ("jsx_text" (:*unnamed* nil)) 
 ("labeled_statement" (:*unnamed* nil :body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil)) 
 ("member_expression" (:*unnamed* nil :object ("expression" "import") :optional_chain ("optional_chain") :property ("private_property_identifier" "property_identifier"))) 
 ("meta_property" (:*unnamed* nil)) 
 ("method_definition" (:*unnamed* nil :body ("statement_block") :decorator ("decorator") :name ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :parameters ("formal_parameters"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("string" "identifier"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("new_expression" (:*unnamed* nil :arguments ("arguments") :constructor ("primary_expression" "new_expression"))) 
 ("null" (:*unnamed* nil)) 
 ("number" (:*unnamed* nil)) 
 ("object" (:*unnamed* ("method_definition" "shorthand_property_identifier" "pair" "spread_element"))) 
 ("object_assignment_pattern" (:*unnamed* nil :left ("array_pattern" "shorthand_property_identifier_pattern" "object_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("rest_pattern" "pair_pattern" "shorthand_property_identifier_pattern" "object_assignment_pattern"))) 
 ("optional_chain" (:*unnamed* nil)) 
 ("pair" (:*unnamed* nil :key ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :value ("expression"))) 
 ("pair_pattern" (:*unnamed* nil :key ("private_property_identifier" "computed_property_name" "property_identifier" "number" "string") :value ("assignment_pattern" "pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("expression" "sequence_expression"))) 
 ("pattern" (:*unnamed* ("undefined" "array_pattern" "rest_pattern" "subscript_expression" "identifier" "member_expression" "object_pattern"))) 
 ("primary_expression" (:*unnamed* ("undefined" "meta_property" "call_expression" "number" "string" "this" "class" "array" "false" "regex" "parenthesized_expression" "template_string" "true" "object" "generator_function" "function_expression" "member_expression" "super" "subscript_expression" "identifier" "null" "arrow_function"))) 
 ("private_property_identifier" (:*unnamed* nil)) 
 ("program" (:*unnamed* ("statement" "hash_bang_line"))) 
 ("property_identifier" (:*unnamed* nil)) 
 ("regex" (:*unnamed* nil :flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("regex_flags" (:*unnamed* nil)) 
 ("regex_pattern" (:*unnamed* nil)) 
 ("rest_pattern" (:*unnamed* ("undefined" "array_pattern" "subscript_expression" "identifier" "member_expression" "object_pattern"))) 
 ("return_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("sequence_expression" (:*unnamed* ("expression"))) 
 ("shorthand_property_identifier" (:*unnamed* nil)) 
 ("shorthand_property_identifier_pattern" (:*unnamed* nil)) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement" (:*unnamed* ("with_statement" "for_statement" "switch_statement" "debugger_statement" "expression_statement" "do_statement" "labeled_statement" "try_statement" "while_statement" "declaration" "import_statement" "if_statement" "return_statement" "throw_statement" "break_statement" "for_in_statement" "export_statement" "empty_statement" "continue_statement" "statement_block"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("statement_identifier" (:*unnamed* nil)) 
 ("string" (:*unnamed* ("string_fragment" "html_character_reference" "escape_sequence"))) 
 ("string_fragment" (:*unnamed* nil)) 
 ("subscript_expression" (:*unnamed* nil :index ("expression" "sequence_expression") :object ("expression") :optional_chain ("optional_chain"))) 
 ("super" (:*unnamed* nil)) 
 ("switch_body" (:*unnamed* ("switch_case" "switch_default"))) 
 ("switch_case" (:*unnamed* nil :body ("statement") :value ("expression" "sequence_expression"))) 
 ("switch_default" (:*unnamed* nil :body ("statement"))) 
 ("switch_statement" (:*unnamed* nil :body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_string" (:*unnamed* ("template_substitution" "string_fragment" "escape_sequence"))) 
 ("template_substitution" (:*unnamed* ("expression" "sequence_expression"))) 
 ("ternary_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("this" (:*unnamed* nil)) 
 ("throw_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("true" (:*unnamed* nil)) 
 ("try_statement" (:*unnamed* nil :body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("unary_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("undefined" (:*unnamed* nil)) 
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:*unnamed* nil :name ("array_pattern" "identifier" "object_pattern") :value ("expression"))) 
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:*unnamed* nil :body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))
;; END Production rules for jsx
;; START Inverse production rules for jsx
(defconst combobulate-rules-jsx-inverse 
 '(("arguments" ("call_expression" "new_expression"))
   ("array" ("primary_expression"))
   ("array_pattern" ("rest_pattern" "variable_declarator" "object_assignment_pattern" "catch_clause" "for_in_statement" "pattern" "assignment_expression"))
   ("arrow_function" ("primary_expression"))
   ("assignment_expression" ("expression"))
   ("assignment_pattern" ("array_pattern" "pair_pattern" "formal_parameters"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("break_statement" ("statement"))
   ("call_expression" ("decorator" "primary_expression"))
   ("catch_clause" ("try_statement"))
   ("class" ("primary_expression"))
   ("class_body" ("class" "class_declaration"))
   ("class_declaration" ("declaration"))
   ("class_heritage" ("class" "class_declaration"))
   ("class_static_block" ("class_body"))
   ("computed_property_name" ("method_definition" "field_definition" "pair_pattern" "pair"))
   ("continue_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("declaration" ("statement" "export_statement"))
   ("decorator" ("field_definition" "class_declaration" "class" "method_definition" "export_statement"))
   ("do_statement" ("statement"))
   ("else_clause" ("if_statement"))
   ("empty_statement" ("statement" "for_statement"))
   ("escape_sequence" ("template_string" "string"))
   ("export_clause" ("export_statement"))
   ("export_specifier" ("export_clause"))
   ("export_statement" ("statement"))
   ("expression" ("for_statement" "expression_statement" "sequence_expression" "update_expression" "binary_expression" "member_expression" "unary_expression" "subscript_expression" "augmented_assignment_expression" "for_in_statement" "await_expression" "switch_case" "assignment_pattern" "export_statement" "field_definition" "variable_declarator" "class_heritage" "jsx_expression" "object_assignment_pattern" "call_expression" "pair" "spread_element" "yield_expression" "template_substitution" "array" "parenthesized_expression" "arguments" "assignment_expression" "return_statement" "throw_statement" "computed_property_name" "ternary_expression" "arrow_function"))
   ("expression_statement" ("statement" "for_statement"))
   ("false" ("primary_expression"))
   ("field_definition" ("class_body"))
   ("finally_clause" ("try_statement"))
   ("for_in_statement" ("statement"))
   ("for_statement" ("statement"))
   ("formal_parameters" ("function_declaration" "generator_function" "function_expression" "generator_function_declaration" "method_definition" "arrow_function"))
   ("function_declaration" ("declaration"))
   ("function_expression" ("primary_expression"))
   ("generator_function" ("primary_expression"))
   ("generator_function_declaration" ("declaration"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("glimmer_template" ("expression" "class_body"))
   ("hash_bang_line" ("program"))
   ("html_character_reference" ("string" "jsx_element"))
   ("identifier" ("primary_expression" "generator_function_declaration" "import_specifier" "function_declaration" "rest_pattern" "class_declaration" "generator_function" "import_clause" "augmented_assignment_expression" "for_in_statement" "namespace_import" "pattern" "jsx_opening_element" "variable_declarator" "jsx_closing_element" "catch_clause" "jsx_self_closing_element" "class" "jsx_namespace_name" "decorator" "assignment_expression" "export_specifier" "function_expression" "namespace_export" "arrow_function"))
   ("if_statement" ("statement"))
   ("import" ("call_expression" "member_expression"))
   ("import_attribute" ("import_statement"))
   ("import_clause" ("import_statement"))
   ("import_specifier" ("named_imports"))
   ("import_statement" ("statement"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_element" ("expression" "jsx_attribute" "jsx_element"))
   ("jsx_expression" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_element"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_closing_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_self_closing_element" ("expression" "jsx_attribute" "jsx_element"))
   ("jsx_text" ("jsx_element"))
   ("labeled_statement" ("statement"))
   ("lexical_declaration" ("for_statement" "declaration"))
   ("member_expression" ("rest_pattern" "jsx_closing_element" "jsx_self_closing_element" "augmented_assignment_expression" "primary_expression" "for_in_statement" "decorator" "pattern" "jsx_opening_element" "assignment_expression"))
   ("meta_property" ("primary_expression"))
   ("method_definition" ("class_body" "object"))
   ("named_imports" ("import_clause"))
   ("namespace_export" ("export_statement"))
   ("namespace_import" ("import_clause"))
   ("new_expression" ("expression" "new_expression"))
   ("null" ("primary_expression"))
   ("number" ("field_definition" "pair" "primary_expression" "method_definition" "pair_pattern"))
   ("object" ("primary_expression" "import_attribute"))
   ("object_assignment_pattern" ("object_pattern"))
   ("object_pattern" ("rest_pattern" "variable_declarator" "object_assignment_pattern" "catch_clause" "for_in_statement" "pattern" "assignment_expression"))
   ("optional_chain" ("subscript_expression" "call_expression" "member_expression"))
   ("pair" ("object"))
   ("pair_pattern" ("object_pattern"))
   ("parenthesized_expression" ("with_statement" "switch_statement" "do_statement" "augmented_assignment_expression" "for_in_statement" "primary_expression" "while_statement" "if_statement" "assignment_expression"))
   ("pattern" ("array_pattern" "pair_pattern" "formal_parameters" "assignment_pattern"))
   ("primary_expression" ("expression" "new_expression"))
   ("private_property_identifier" ("binary_expression" "field_definition" "member_expression" "pair" "method_definition" "pair_pattern"))
   ("property_identifier" ("field_definition" "member_expression" "pair" "method_definition" "pair_pattern" "jsx_attribute"))
   ("regex" ("primary_expression"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("rest_pattern" ("pattern" "object_pattern"))
   ("return_statement" ("statement"))
   ("sequence_expression" ("throw_statement" "for_statement" "jsx_expression" "expression_statement" "subscript_expression" "template_substitution" "for_in_statement" "switch_case" "parenthesized_expression" "return_statement"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_pattern" "object_assignment_pattern"))
   ("spread_element" ("object" "array" "arguments" "jsx_expression"))
   ("statement" ("else_clause" "with_statement" "for_statement" "do_statement" "labeled_statement" "for_in_statement" "switch_case" "statement_block" "switch_default" "while_statement" "if_statement" "program"))
   ("statement_block" ("function_declaration" "method_definition" "generator_function" "function_expression" "finally_clause" "catch_clause" "try_statement" "generator_function_declaration" "class_static_block" "statement" "arrow_function"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("string" ("field_definition" "export_specifier" "pair_pattern" "pair" "namespace_export" "primary_expression" "import_specifier" "method_definition" "import_statement" "export_statement" "jsx_attribute"))
   ("string_fragment" ("template_string" "string"))
   ("subscript_expression" ("rest_pattern" "augmented_assignment_expression" "for_in_statement" "primary_expression" "pattern" "assignment_expression"))
   ("super" ("primary_expression"))
   ("switch_body" ("switch_statement"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_statement" ("statement"))
   ("template_string" ("call_expression" "primary_expression"))
   ("template_substitution" ("template_string"))
   ("ternary_expression" ("expression"))
   ("this" ("primary_expression"))
   ("throw_statement" ("statement"))
   ("true" ("primary_expression"))
   ("try_statement" ("statement"))
   ("unary_expression" ("expression"))
   ("undefined" ("rest_pattern" "for_in_statement" "primary_expression" "pattern" "assignment_expression"))
   ("update_expression" ("expression"))
   ("variable_declaration" ("for_statement" "declaration"))
   ("variable_declarator" ("variable_declaration" "lexical_declaration"))
   ("while_statement" ("statement"))
   ("with_statement" ("statement"))
   ("yield_expression" ("expression"))
  ) 
)
;; END Inverse production rules for jsx
;; START All node types in jsx
(defconst combobulate-rules-jsx-types 
 '("arguments" "array" "array_pattern" "arrow_function" "assignment_expression" "assignment_pattern" "augmented_assignment_expression" "await_expression" "binary_expression" "break_statement" "call_expression" "catch_clause" "class" "class_body" "class_declaration" "class_heritage" "class_static_block" "comment" "computed_property_name" "continue_statement" "debugger_statement" "declaration" "decorator" "do_statement" "else_clause" "empty_statement" "escape_sequence" "export_clause" "export_specifier" "export_statement" "expression" "expression_statement" "false" "field_definition" "finally_clause" "for_in_statement" "for_statement" "formal_parameters" "function_declaration" "function_expression" "generator_function" "generator_function_declaration" "glimmer_closing_tag" "glimmer_opening_tag" "glimmer_template" "hash_bang_line" "html_character_reference" "html_comment" "identifier" "if_statement" "import" "import_attribute" "import_clause" "import_specifier" "import_statement" "jsx_attribute" "jsx_closing_element" "jsx_element" "jsx_expression" "jsx_namespace_name" "jsx_opening_element" "jsx_self_closing_element" "jsx_text" "labeled_statement" "lexical_declaration" "member_expression" "meta_property" "method_definition" "named_imports" "namespace_export" "namespace_import" "new_expression" "null" "number" "object" "object_assignment_pattern" "object_pattern" "optional_chain" "pair" "pair_pattern" "parenthesized_expression" "pattern" "primary_expression" "private_property_identifier" "program" "property_identifier" "regex" "regex_flags" "regex_pattern" "rest_pattern" "return_statement" "sequence_expression" "shorthand_property_identifier" "shorthand_property_identifier_pattern" "spread_element" "statement" "statement_block" "statement_identifier" "string" "string_fragment" "subscript_expression" "super" "switch_body" "switch_case" "switch_default" "switch_statement" "template_string" "template_substitution" "ternary_expression" "this" "throw_statement" "true" "try_statement" "unary_expression" "undefined" "update_expression" "variable_declaration" "variable_declarator" "while_statement" "with_statement" "yield_expression") 
)
;; END All node types in jsx
;; START All supertypes in jsx
(defconst combobulate-rules-jsx-supertypes 
 '("declaration" "expression" "pattern" "primary_expression" "statement") 
)
;; END All supertypes in jsx

;; START Production rules for go
(defconst combobulate-rules-go 
 '(("_expression" (:*unnamed* ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("_simple_statement" (:*unnamed* ("inc_statement" "short_var_declaration" "assignment_statement" "dec_statement" "expression_statement" "send_statement"))) 
 ("_simple_type" (:*unnamed* ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("_statement" (:*unnamed* ("goto_statement" "short_var_declaration" "for_statement" "type_declaration" "expression_statement" "labeled_statement" "const_declaration" "type_switch_statement" "go_statement" "if_statement" "assignment_statement" "send_statement" "return_statement" "fallthrough_statement" "break_statement" "expression_switch_statement" "var_declaration" "dec_statement" "defer_statement" "block" "select_statement" "inc_statement" "empty_statement" "continue_statement"))) 
 ("_type" (:*unnamed* ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("argument_list" (:*unnamed* ("interpreted_string_literal" "func_literal" "slice_expression" "parenthesized_type" "selector_expression" "index_expression" "false" "negated_type" "binary_expression" "int_literal" "pointer_type" "type_identifier" "unary_expression" "identifier" "slice_type" "interface_type" "nil" "iota" "raw_string_literal" "channel_type" "type_assertion_expression" "qualified_type" "call_expression" "array_type" "float_literal" "type_conversion_expression" "generic_type" "imaginary_literal" "parenthesized_expression" "function_type" "true" "rune_literal" "map_type" "composite_literal" "union_type" "variadic_argument" "struct_type"))) 
 ("array_type" (:*unnamed* nil :element ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type") :length ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("assignment_statement" (:*unnamed* nil :left ("expression_list") :operator nil :right ("expression_list"))) 
 ("binary_expression" (:*unnamed* nil :left ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota") :operator nil :right ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("blank_identifier" (:*unnamed* nil)) 
 ("block" (:*unnamed* ("goto_statement" "short_var_declaration" "for_statement" "type_declaration" "expression_statement" "labeled_statement" "const_declaration" "type_switch_statement" "go_statement" "if_statement" "assignment_statement" "send_statement" "return_statement" "fallthrough_statement" "break_statement" "expression_switch_statement" "var_declaration" "dec_statement" "defer_statement" "block" "select_statement" "inc_statement" "empty_statement" "continue_statement"))) 
 ("break_statement" (:*unnamed* ("label_name"))) 
 ("call_expression" (:*unnamed* nil :arguments ("argument_list") :function ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota") :type_arguments ("type_arguments"))) 
 ("channel_type" (:*unnamed* nil :value ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("comment" (:*unnamed* nil)) 
 ("communication_case" (:*unnamed* ("goto_statement" "short_var_declaration" "for_statement" "type_declaration" "expression_statement" "labeled_statement" "const_declaration" "type_switch_statement" "go_statement" "if_statement" "assignment_statement" "send_statement" "return_statement" "fallthrough_statement" "break_statement" "expression_switch_statement" "var_declaration" "dec_statement" "defer_statement" "block" "select_statement" "inc_statement" "empty_statement" "continue_statement") :communication ("receive_statement" "send_statement"))) 
 ("composite_literal" (:*unnamed* nil :body ("literal_value") :type ("qualified_type" "map_type" "array_type" "type_identifier" "implicit_length_array_type" "generic_type" "slice_type" "struct_type"))) 
 ("const_declaration" (:*unnamed* ("const_spec"))) 
 ("const_spec" (:*unnamed* nil :name ("identifier") :type ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type") :value ("expression_list"))) 
 ("continue_statement" (:*unnamed* ("label_name"))) 
 ("dec_statement" (:*unnamed* ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("default_case" (:*unnamed* ("goto_statement" "short_var_declaration" "for_statement" "type_declaration" "expression_statement" "labeled_statement" "const_declaration" "type_switch_statement" "go_statement" "if_statement" "assignment_statement" "send_statement" "return_statement" "fallthrough_statement" "break_statement" "expression_switch_statement" "var_declaration" "dec_statement" "defer_statement" "block" "select_statement" "inc_statement" "empty_statement" "continue_statement"))) 
 ("defer_statement" (:*unnamed* ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("dot" (:*unnamed* nil)) 
 ("empty_statement" (:*unnamed* nil)) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("expression_case" (:*unnamed* ("goto_statement" "short_var_declaration" "for_statement" "type_declaration" "expression_statement" "labeled_statement" "const_declaration" "type_switch_statement" "go_statement" "if_statement" "assignment_statement" "send_statement" "return_statement" "fallthrough_statement" "break_statement" "expression_switch_statement" "var_declaration" "dec_statement" "defer_statement" "block" "select_statement" "inc_statement" "empty_statement" "continue_statement") :value ("expression_list"))) 
 ("expression_list" (:*unnamed* ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("expression_statement" (:*unnamed* ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("expression_switch_statement" (:*unnamed* ("expression_case" "default_case") :initializer ("inc_statement" "short_var_declaration" "assignment_statement" "dec_statement" "expression_statement" "send_statement") :value ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("fallthrough_statement" (:*unnamed* nil)) 
 ("false" (:*unnamed* nil)) 
 ("field_declaration" (:*unnamed* nil :name ("field_identifier") :tag ("raw_string_literal" "interpreted_string_literal") :type ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("field_declaration_list" (:*unnamed* ("field_declaration"))) 
 ("field_identifier" (:*unnamed* nil)) 
 ("float_literal" (:*unnamed* nil)) 
 ("for_clause" (:*unnamed* nil :condition ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota") :initializer ("inc_statement" "short_var_declaration" "assignment_statement" "dec_statement" "expression_statement" "send_statement") :update ("inc_statement" "short_var_declaration" "assignment_statement" "dec_statement" "expression_statement" "send_statement"))) 
 ("for_statement" (:*unnamed* ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "range_clause" "unary_expression" "for_clause" "identifier" "composite_literal" "nil" "iota") :body ("block"))) 
 ("func_literal" (:*unnamed* nil :body ("block") :parameters ("parameter_list") :result ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parameter_list" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("function_declaration" (:*unnamed* nil :body ("block") :name ("identifier") :parameters ("parameter_list") :result ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parameter_list" "generic_type" "interface_type" "union_type" "function_type" "negated_type") :type_parameters ("type_parameter_list"))) 
 ("function_type" (:*unnamed* nil :parameters ("parameter_list") :result ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parameter_list" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("generic_type" (:*unnamed* nil :type ("union_type" "negated_type" "qualified_type" "type_identifier") :type_arguments ("type_arguments"))) 
 ("go_statement" (:*unnamed* ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("goto_statement" (:*unnamed* ("label_name"))) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("if_statement" "block") :condition ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota") :consequence ("block") :initializer ("inc_statement" "short_var_declaration" "assignment_statement" "dec_statement" "expression_statement" "send_statement"))) 
 ("imaginary_literal" (:*unnamed* nil)) 
 ("implicit_length_array_type" (:*unnamed* nil :element ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("import_declaration" (:*unnamed* ("import_spec_list" "import_spec"))) 
 ("import_spec" (:*unnamed* nil :name ("package_identifier" "dot" "blank_identifier") :path ("raw_string_literal" "interpreted_string_literal"))) 
 ("import_spec_list" (:*unnamed* ("import_spec"))) 
 ("inc_statement" (:*unnamed* ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("index_expression" (:*unnamed* nil :index ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota") :operand ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("int_literal" (:*unnamed* nil)) 
 ("interface_type" (:*unnamed* ("struct_elem" "method_spec" "constraint_elem"))) 
 ("interpreted_string_literal" (:*unnamed* ("escape_sequence"))) 
 ("iota" (:*unnamed* nil)) 
 ("keyed_element" (:*unnamed* ("literal_element"))) 
 ("label_name" (:*unnamed* nil)) 
 ("labeled_statement" (:*unnamed* ("goto_statement" "short_var_declaration" "for_statement" "type_declaration" "expression_statement" "labeled_statement" "const_declaration" "type_switch_statement" "go_statement" "if_statement" "assignment_statement" "send_statement" "return_statement" "fallthrough_statement" "break_statement" "expression_switch_statement" "var_declaration" "dec_statement" "defer_statement" "block" "select_statement" "inc_statement" "empty_statement" "continue_statement") :label ("label_name"))) 
 ("literal_element" (:*unnamed* ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "literal_value" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("literal_value" (:*unnamed* ("literal_element" "keyed_element"))) 
 ("map_type" (:*unnamed* nil :key ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type") :value ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("method_declaration" (:*unnamed* nil :body ("block") :name ("field_identifier") :parameters ("parameter_list") :receiver ("parameter_list") :result ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parameter_list" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("method_spec" (:*unnamed* nil :name ("field_identifier") :parameters ("parameter_list") :result ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parameter_list" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("negated_type" (:*unnamed* ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("nil" (:*unnamed* nil)) 
 ("package_clause" (:*unnamed* ("package_identifier"))) 
 ("package_identifier" (:*unnamed* nil)) 
 ("parameter_declaration" (:*unnamed* nil :name ("identifier") :type ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("parameter_list" (:*unnamed* ("parameter_declaration" "variadic_parameter_declaration"))) 
 ("parenthesized_expression" (:*unnamed* ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("parenthesized_type" (:*unnamed* ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("pointer_type" (:*unnamed* ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("qualified_type" (:*unnamed* nil :name ("type_identifier") :package ("package_identifier"))) 
 ("range_clause" (:*unnamed* nil :left ("expression_list") :right ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("raw_string_literal" (:*unnamed* nil)) 
 ("receive_statement" (:*unnamed* nil :left ("expression_list") :right ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("return_statement" (:*unnamed* ("expression_list"))) 
 ("rune_literal" (:*unnamed* nil)) 
 ("select_statement" (:*unnamed* ("communication_case" "default_case"))) 
 ("selector_expression" (:*unnamed* nil :field ("field_identifier") :operand ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("send_statement" (:*unnamed* nil :channel ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota") :value ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("short_var_declaration" (:*unnamed* nil :left ("expression_list") :right ("expression_list"))) 
 ("slice_expression" (:*unnamed* nil :capacity ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota") :end ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota") :operand ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota") :start ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("slice_type" (:*unnamed* nil :element ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("source_file" (:*unnamed* ("goto_statement" "short_var_declaration" "for_statement" "type_declaration" "expression_statement" "labeled_statement" "const_declaration" "type_switch_statement" "go_statement" "if_statement" "assignment_statement" "send_statement" "return_statement" "function_declaration" "fallthrough_statement" "break_statement" "expression_switch_statement" "var_declaration" "dec_statement" "method_declaration" "package_clause" "defer_statement" "block" "select_statement" "import_declaration" "inc_statement" "empty_statement" "continue_statement"))) 
 ("struct_elem" (:*unnamed* ("struct_term"))) 
 ("struct_term" (:*unnamed* ("struct_type"))) 
 ("struct_type" (:*unnamed* ("field_declaration_list"))) 
 ("true" (:*unnamed* nil)) 
 ("type_alias" (:*unnamed* nil :name ("type_identifier") :type ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("type_arguments" (:*unnamed* ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("type_assertion_expression" (:*unnamed* nil :operand ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota") :type ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("type_case" (:*unnamed* ("goto_statement" "short_var_declaration" "for_statement" "type_declaration" "expression_statement" "labeled_statement" "const_declaration" "type_switch_statement" "go_statement" "if_statement" "assignment_statement" "send_statement" "return_statement" "fallthrough_statement" "break_statement" "expression_switch_statement" "var_declaration" "dec_statement" "defer_statement" "block" "select_statement" "inc_statement" "empty_statement" "continue_statement") :type ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("type_conversion_expression" (:*unnamed* nil :operand ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota") :type ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("type_declaration" (:*unnamed* ("type_spec" "type_alias"))) 
 ("type_identifier" (:*unnamed* nil)) 
 ("type_parameter_list" (:*unnamed* ("parameter_declaration"))) 
 ("type_spec" (:*unnamed* nil :name ("type_identifier") :type ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type") :type_parameters ("type_parameter_list"))) 
 ("type_switch_statement" (:*unnamed* ("type_case" "default_case") :alias ("expression_list") :initializer ("inc_statement" "short_var_declaration" "assignment_statement" "dec_statement" "expression_statement" "send_statement") :value ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("unary_expression" (:*unnamed* nil :operand ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota") :operator nil)) 
 ("union_type" (:*unnamed* ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
 ("var_declaration" (:*unnamed* ("var_spec"))) 
 ("var_spec" (:*unnamed* nil :name ("identifier") :type ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type") :value ("expression_list"))) 
 ("variadic_argument" (:*unnamed* ("raw_string_literal" "type_assertion_expression" "call_expression" "float_literal" "interpreted_string_literal" "func_literal" "slice_expression" "type_conversion_expression" "selector_expression" "index_expression" "false" "imaginary_literal" "parenthesized_expression" "true" "binary_expression" "rune_literal" "int_literal" "unary_expression" "identifier" "composite_literal" "nil" "iota"))) 
 ("variadic_parameter_declaration" (:*unnamed* nil :name ("identifier") :type ("channel_type" "qualified_type" "struct_type" "map_type" "array_type" "pointer_type" "slice_type" "type_identifier" "parenthesized_type" "generic_type" "interface_type" "union_type" "function_type" "negated_type"))) 
))
;; END Production rules for go
;; START Inverse production rules for go
(defconst combobulate-rules-go-inverse 
 '(("argument_list" ("call_expression"))
   ("array_type" ("var_spec" "const_spec" "variadic_parameter_declaration" "_simple_type" "type_alias" "type_arguments" "parenthesized_type" "func_literal" "implicit_length_array_type" "type_spec" "method_spec" "argument_list" "function_declaration" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "type_assertion_expression" "union_type" "_type" "array_type" "type_conversion_expression" "function_type" "method_declaration" "map_type" "composite_literal" "parameter_declaration" "negated_type"))
   ("assignment_statement" ("type_case" "source_file" "expression_switch_statement" "_simple_statement" "if_statement" "labeled_statement" "expression_case" "default_case" "block" "for_clause" "_statement" "type_switch_statement" "communication_case"))
   ("binary_expression" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("blank_identifier" ("import_spec"))
   ("block" ("function_declaration" "type_case" "for_statement" "source_file" "method_declaration" "func_literal" "if_statement" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("break_statement" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("call_expression" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("channel_type" ("var_spec" "const_spec" "variadic_parameter_declaration" "_simple_type" "type_alias" "type_arguments" "parenthesized_type" "func_literal" "implicit_length_array_type" "type_spec" "method_spec" "argument_list" "function_declaration" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "type_assertion_expression" "union_type" "_type" "array_type" "type_conversion_expression" "function_type" "method_declaration" "map_type" "parameter_declaration" "negated_type"))
   ("communication_case" ("select_statement"))
   ("composite_literal" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("const_declaration" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("const_spec" ("const_declaration"))
   ("constraint_elem" ("interface_type"))
   ("continue_statement" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("dec_statement" ("type_case" "source_file" "expression_switch_statement" "_simple_statement" "if_statement" "labeled_statement" "expression_case" "default_case" "block" "for_clause" "_statement" "type_switch_statement" "communication_case"))
   ("default_case" ("expression_switch_statement" "type_switch_statement" "select_statement"))
   ("defer_statement" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("dot" ("import_spec"))
   ("empty_statement" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("escape_sequence" ("interpreted_string_literal"))
   ("expression_case" ("expression_switch_statement"))
   ("expression_list" ("var_spec" "short_var_declaration" "const_spec" "range_clause" "type_switch_statement" "expression_case" "receive_statement" "assignment_statement" "return_statement"))
   ("expression_statement" ("type_case" "source_file" "expression_switch_statement" "_simple_statement" "if_statement" "labeled_statement" "expression_case" "default_case" "block" "for_clause" "_statement" "type_switch_statement" "communication_case"))
   ("expression_switch_statement" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("fallthrough_statement" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("false" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("field_declaration" ("field_declaration_list"))
   ("field_declaration_list" ("struct_type"))
   ("field_identifier" ("method_spec" "selector_expression" "field_declaration" "method_declaration"))
   ("float_literal" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("for_clause" ("for_statement"))
   ("for_statement" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("func_literal" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("function_declaration" ("source_file"))
   ("function_type" ("var_spec" "const_spec" "variadic_parameter_declaration" "_simple_type" "type_alias" "type_arguments" "parenthesized_type" "func_literal" "implicit_length_array_type" "type_spec" "method_spec" "argument_list" "function_declaration" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "type_assertion_expression" "union_type" "_type" "array_type" "type_conversion_expression" "function_type" "method_declaration" "map_type" "parameter_declaration" "negated_type"))
   ("generic_type" ("var_spec" "const_spec" "variadic_parameter_declaration" "_simple_type" "type_alias" "type_arguments" "parenthesized_type" "func_literal" "implicit_length_array_type" "type_spec" "method_spec" "argument_list" "function_declaration" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "type_assertion_expression" "union_type" "_type" "array_type" "type_conversion_expression" "function_type" "method_declaration" "map_type" "composite_literal" "parameter_declaration" "negated_type"))
   ("go_statement" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("goto_statement" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("identifier" ("var_spec" "for_statement" "const_spec" "variadic_parameter_declaration" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "function_declaration" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "parameter_declaration" "variadic_argument"))
   ("if_statement" ("type_case" "source_file" "if_statement" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("imaginary_literal" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("implicit_length_array_type" ("composite_literal"))
   ("import_declaration" ("source_file"))
   ("import_spec" ("import_declaration" "import_spec_list"))
   ("import_spec_list" ("import_declaration"))
   ("inc_statement" ("type_case" "source_file" "expression_switch_statement" "_simple_statement" "if_statement" "labeled_statement" "expression_case" "default_case" "block" "for_clause" "_statement" "type_switch_statement" "communication_case"))
   ("index_expression" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("int_literal" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("interface_type" ("var_spec" "const_spec" "variadic_parameter_declaration" "_simple_type" "type_alias" "type_arguments" "parenthesized_type" "func_literal" "implicit_length_array_type" "type_spec" "method_spec" "argument_list" "function_declaration" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "type_assertion_expression" "union_type" "_type" "array_type" "type_conversion_expression" "function_type" "method_declaration" "map_type" "parameter_declaration" "negated_type"))
   ("interpreted_string_literal" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "field_declaration" "type_assertion_expression" "import_spec" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("iota" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("keyed_element" ("literal_value"))
   ("label_name" ("goto_statement" "labeled_statement" "continue_statement" "break_statement"))
   ("labeled_statement" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("literal_element" ("literal_value" "keyed_element"))
   ("literal_value" ("literal_element" "composite_literal"))
   ("map_type" ("var_spec" "const_spec" "variadic_parameter_declaration" "_simple_type" "type_alias" "type_arguments" "parenthesized_type" "func_literal" "implicit_length_array_type" "type_spec" "method_spec" "argument_list" "function_declaration" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "type_assertion_expression" "union_type" "_type" "array_type" "type_conversion_expression" "function_type" "method_declaration" "map_type" "composite_literal" "parameter_declaration" "negated_type"))
   ("method_declaration" ("source_file"))
   ("method_spec" ("interface_type"))
   ("negated_type" ("var_spec" "const_spec" "variadic_parameter_declaration" "_simple_type" "type_alias" "type_arguments" "parenthesized_type" "func_literal" "implicit_length_array_type" "type_spec" "method_spec" "argument_list" "function_declaration" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "type_assertion_expression" "union_type" "_type" "array_type" "type_conversion_expression" "generic_type" "function_type" "method_declaration" "map_type" "parameter_declaration" "negated_type"))
   ("nil" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("package_clause" ("source_file"))
   ("package_identifier" ("package_clause" "qualified_type" "import_spec"))
   ("parameter_declaration" ("parameter_list" "type_parameter_list"))
   ("parameter_list" ("function_declaration" "method_declaration" "func_literal" "method_spec" "function_type"))
   ("parenthesized_expression" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("parenthesized_type" ("var_spec" "const_spec" "variadic_parameter_declaration" "type_arguments" "type_alias" "parenthesized_type" "implicit_length_array_type" "type_spec" "argument_list" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "type_assertion_expression" "union_type" "_type" "array_type" "type_conversion_expression" "map_type" "parameter_declaration" "negated_type"))
   ("pointer_type" ("var_spec" "const_spec" "variadic_parameter_declaration" "_simple_type" "type_alias" "type_arguments" "parenthesized_type" "func_literal" "implicit_length_array_type" "type_spec" "method_spec" "argument_list" "function_declaration" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "type_assertion_expression" "union_type" "_type" "array_type" "type_conversion_expression" "function_type" "method_declaration" "map_type" "parameter_declaration" "negated_type"))
   ("qualified_type" ("var_spec" "const_spec" "variadic_parameter_declaration" "_simple_type" "type_alias" "type_arguments" "parenthesized_type" "func_literal" "implicit_length_array_type" "type_spec" "method_spec" "argument_list" "function_declaration" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "type_assertion_expression" "union_type" "_type" "array_type" "type_conversion_expression" "generic_type" "function_type" "method_declaration" "map_type" "composite_literal" "parameter_declaration" "negated_type"))
   ("range_clause" ("for_statement"))
   ("raw_string_literal" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "field_declaration" "type_assertion_expression" "import_spec" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("receive_statement" ("communication_case"))
   ("return_statement" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("rune_literal" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("select_statement" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("selector_expression" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("send_statement" ("type_case" "source_file" "expression_switch_statement" "_simple_statement" "if_statement" "labeled_statement" "expression_case" "default_case" "block" "for_clause" "_statement" "type_switch_statement" "communication_case"))
   ("short_var_declaration" ("type_case" "source_file" "expression_switch_statement" "_simple_statement" "if_statement" "labeled_statement" "expression_case" "default_case" "block" "for_clause" "_statement" "type_switch_statement" "communication_case"))
   ("slice_expression" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("slice_type" ("var_spec" "const_spec" "variadic_parameter_declaration" "_simple_type" "type_alias" "type_arguments" "parenthesized_type" "func_literal" "implicit_length_array_type" "type_spec" "method_spec" "argument_list" "function_declaration" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "type_assertion_expression" "union_type" "_type" "array_type" "type_conversion_expression" "function_type" "method_declaration" "map_type" "composite_literal" "parameter_declaration" "negated_type"))
   ("struct_elem" ("interface_type"))
   ("struct_term" ("struct_elem"))
   ("struct_type" ("var_spec" "const_spec" "variadic_parameter_declaration" "_simple_type" "type_alias" "type_arguments" "parenthesized_type" "func_literal" "implicit_length_array_type" "type_spec" "method_spec" "argument_list" "function_declaration" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "type_assertion_expression" "struct_term" "union_type" "_type" "array_type" "type_conversion_expression" "function_type" "method_declaration" "map_type" "composite_literal" "parameter_declaration" "negated_type"))
   ("true" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("type_alias" ("type_declaration"))
   ("type_arguments" ("call_expression" "generic_type"))
   ("type_assertion_expression" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("type_case" ("type_switch_statement"))
   ("type_conversion_expression" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("type_declaration" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("type_identifier" ("var_spec" "const_spec" "variadic_parameter_declaration" "_simple_type" "type_alias" "type_arguments" "parenthesized_type" "func_literal" "implicit_length_array_type" "type_spec" "method_spec" "argument_list" "function_declaration" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "qualified_type" "type_assertion_expression" "union_type" "_type" "array_type" "type_conversion_expression" "generic_type" "function_type" "method_declaration" "map_type" "composite_literal" "parameter_declaration" "negated_type"))
   ("type_parameter_list" ("type_spec" "function_declaration"))
   ("type_spec" ("type_declaration"))
   ("type_switch_statement" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("unary_expression" ("for_statement" "expression_statement" "slice_expression" "type_switch_statement" "argument_list" "selector_expression" "index_expression" "_expression" "binary_expression" "range_clause" "literal_element" "unary_expression" "inc_statement" "type_assertion_expression" "call_expression" "array_type" "type_conversion_expression" "receive_statement" "expression_list" "go_statement" "if_statement" "parenthesized_expression" "send_statement" "expression_switch_statement" "dec_statement" "defer_statement" "for_clause" "variadic_argument"))
   ("union_type" ("var_spec" "const_spec" "variadic_parameter_declaration" "_simple_type" "type_alias" "type_arguments" "parenthesized_type" "func_literal" "implicit_length_array_type" "type_spec" "method_spec" "argument_list" "function_declaration" "type_case" "pointer_type" "slice_type" "field_declaration" "channel_type" "type_assertion_expression" "union_type" "_type" "array_type" "type_conversion_expression" "generic_type" "function_type" "method_declaration" "map_type" "parameter_declaration" "negated_type"))
   ("var_declaration" ("type_case" "source_file" "labeled_statement" "expression_case" "default_case" "block" "_statement" "communication_case"))
   ("var_spec" ("var_declaration"))
   ("variadic_argument" ("argument_list"))
   ("variadic_parameter_declaration" ("parameter_list"))
  ) 
)
;; END Inverse production rules for go
;; START All node types in go
(defconst combobulate-rules-go-types 
 '("_expression" "_simple_statement" "_simple_type" "_statement" "_type" "argument_list" "array_type" "assignment_statement" "binary_expression" "blank_identifier" "block" "break_statement" "call_expression" "channel_type" "comment" "communication_case" "composite_literal" "const_declaration" "const_spec" "constraint_elem" "continue_statement" "dec_statement" "default_case" "defer_statement" "dot" "empty_statement" "escape_sequence" "expression_case" "expression_list" "expression_statement" "expression_switch_statement" "fallthrough_statement" "false" "field_declaration" "field_declaration_list" "field_identifier" "float_literal" "for_clause" "for_statement" "func_literal" "function_declaration" "function_type" "generic_type" "go_statement" "goto_statement" "identifier" "if_statement" "imaginary_literal" "implicit_length_array_type" "import_declaration" "import_spec" "import_spec_list" "inc_statement" "index_expression" "int_literal" "interface_type" "interpreted_string_literal" "iota" "keyed_element" "label_name" "labeled_statement" "literal_element" "literal_value" "map_type" "method_declaration" "method_spec" "negated_type" "nil" "package_clause" "package_identifier" "parameter_declaration" "parameter_list" "parenthesized_expression" "parenthesized_type" "pointer_type" "qualified_type" "range_clause" "raw_string_literal" "receive_statement" "return_statement" "rune_literal" "select_statement" "selector_expression" "send_statement" "short_var_declaration" "slice_expression" "slice_type" "source_file" "struct_elem" "struct_term" "struct_type" "true" "type_alias" "type_arguments" "type_assertion_expression" "type_case" "type_conversion_expression" "type_declaration" "type_identifier" "type_parameter_list" "type_spec" "type_switch_statement" "unary_expression" "union_type" "var_declaration" "var_spec" "variadic_argument" "variadic_parameter_declaration") 
)
;; END All node types in go
;; START All supertypes in go
(defconst combobulate-rules-go-supertypes 
 '("_expression" "_simple_statement" "_simple_type" "_statement" "_type") 
)
;; END All supertypes in go

;; START Production rules for python
(defconst combobulate-rules-python 
 '(("_compound_statement" (:*unnamed* ("with_statement" "for_statement" "function_definition" "decorated_definition" "match_statement" "try_statement" "class_definition" "while_statement" "if_statement"))) 
 ("_simple_statement" (:*unnamed* ("import_from_statement" "assert_statement" "exec_statement" "type_alias_statement" "print_statement" "expression_statement" "nonlocal_statement" "import_statement" "return_statement" "raise_statement" "break_statement" "delete_statement" "global_statement" "future_import_statement" "pass_statement" "continue_statement"))) 
 ("aliased_import" (:*unnamed* nil :alias ("identifier") :name ("dotted_name"))) 
 ("argument_list" (:*unnamed* ("list_splat" "expression" "keyword_argument" "parenthesized_expression" "dictionary_splat"))) 
 ("as_pattern" (:*unnamed* ("expression" "identifier" "case_pattern") :alias ("as_pattern_target"))) 
 ("assert_statement" (:*unnamed* ("expression"))) 
 ("assignment" (:*unnamed* nil :left ("pattern" "pattern_list") :right ("expression" "pattern_list" "augmented_assignment" "yield" "expression_list" "assignment") :type ("type"))) 
 ("attribute" (:*unnamed* nil :attribute ("identifier") :object ("primary_expression"))) 
 ("augmented_assignment" (:*unnamed* nil :left ("pattern" "pattern_list") :operator nil :right ("expression" "pattern_list" "augmented_assignment" "yield" "expression_list" "assignment"))) 
 ("await" (:*unnamed* ("primary_expression"))) 
 ("binary_operator" (:*unnamed* nil :left ("primary_expression") :operator nil :right ("primary_expression"))) 
 ("block" (:*unnamed* ("with_statement" "import_from_statement" "for_statement" "assert_statement" "exec_statement" "type_alias_statement" "print_statement" "expression_statement" "nonlocal_statement" "try_statement" "while_statement" "if_statement" "import_statement" "return_statement" "raise_statement" "function_definition" "decorated_definition" "match_statement" "break_statement" "delete_statement" "global_statement" "class_definition" "future_import_statement" "pass_statement" "continue_statement") :alternative ("case_clause"))) 
 ("boolean_operator" (:*unnamed* nil :left ("expression") :operator nil :right ("expression"))) 
 ("break_statement" (:*unnamed* nil)) 
 ("call" (:*unnamed* nil :arguments ("argument_list" "generator_expression") :function ("primary_expression"))) 
 ("case_clause" (:*unnamed* ("case_pattern") :consequence ("block") :guard ("if_clause"))) 
 ("case_pattern" (:*unnamed* ("keyword_pattern" "as_pattern" "string" "concatenated_string" "complex_pattern" "list_pattern" "splat_pattern" "tuple_pattern" "false" "true" "none" "dict_pattern" "dotted_name" "class_pattern" "float" "union_pattern" "integer"))) 
 ("chevron" (:*unnamed* ("expression"))) 
 ("class_definition" (:*unnamed* nil :body ("block") :name ("identifier") :superclasses ("argument_list") :type_parameters ("type_parameter"))) 
 ("class_pattern" (:*unnamed* ("dotted_name" "case_pattern"))) 
 ("comment" (:*unnamed* nil)) 
 ("comparison_operator" (:*unnamed* ("primary_expression") :operators nil)) 
 ("complex_pattern" (:*unnamed* ("float" "integer"))) 
 ("concatenated_string" (:*unnamed* ("string"))) 
 ("conditional_expression" (:*unnamed* ("expression"))) 
 ("constrained_type" (:*unnamed* ("type"))) 
 ("continue_statement" (:*unnamed* nil)) 
 ("decorated_definition" (:*unnamed* ("decorator") :definition ("function_definition" "class_definition"))) 
 ("decorator" (:*unnamed* ("expression"))) 
 ("default_parameter" (:*unnamed* nil :name ("tuple_pattern" "identifier") :value ("expression"))) 
 ("delete_statement" (:*unnamed* ("expression" "expression_list"))) 
 ("dict_pattern" (:*unnamed* ("splat_pattern") :key ("dotted_name" "true" "class_pattern" "string" "concatenated_string" "complex_pattern" "float" "list_pattern" "splat_pattern" "tuple_pattern" "false" "union_pattern" "none" "dict_pattern" "integer") :value ("case_pattern"))) 
 ("dictionary" (:*unnamed* ("dictionary_splat" "pair"))) 
 ("dictionary_comprehension" (:*unnamed* ("for_in_clause" "if_clause") :body ("pair"))) 
 ("dictionary_splat" (:*unnamed* ("expression"))) 
 ("dictionary_splat_pattern" (:*unnamed* ("subscript" "identifier" "attribute"))) 
 ("dotted_name" (:*unnamed* ("identifier"))) 
 ("elif_clause" (:*unnamed* nil :condition ("expression") :consequence ("block"))) 
 ("ellipsis" (:*unnamed* nil)) 
 ("else_clause" (:*unnamed* nil :body ("block"))) 
 ("escape_interpolation" (:*unnamed* nil)) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("except_clause" (:*unnamed* ("expression" "block"))) 
 ("except_group_clause" (:*unnamed* ("expression" "block"))) 
 ("exec_statement" (:*unnamed* ("expression") :code ("string" "identifier"))) 
 ("expression" (:*unnamed* ("lambda" "boolean_operator" "as_pattern" "comparison_operator" "named_expression" "not_operator" "primary_expression" "conditional_expression"))) 
 ("expression_list" (:*unnamed* ("expression"))) 
 ("expression_statement" (:*unnamed* ("expression" "augmented_assignment" "yield" "assignment"))) 
 ("false" (:*unnamed* nil)) 
 ("finally_clause" (:*unnamed* ("block"))) 
 ("float" (:*unnamed* nil)) 
 ("for_in_clause" (:*unnamed* nil :left ("pattern" "pattern_list") :right ("expression"))) 
 ("for_statement" (:*unnamed* nil :alternative ("else_clause") :body ("block") :left ("pattern" "pattern_list") :right ("expression" "expression_list"))) 
 ("format_expression" (:*unnamed* nil :expression ("expression" "pattern_list" "yield" "expression_list") :format_specifier ("format_specifier") :type_conversion ("type_conversion"))) 
 ("format_specifier" (:*unnamed* ("format_expression"))) 
 ("function_definition" (:*unnamed* nil :body ("block") :name ("identifier") :parameters ("parameters") :return_type ("type") :type_parameters ("type_parameter"))) 
 ("future_import_statement" (:*unnamed* nil :name ("aliased_import" "dotted_name"))) 
 ("generator_expression" (:*unnamed* ("for_in_clause" "if_clause") :body ("expression"))) 
 ("generic_type" (:*unnamed* ("type_parameter" "identifier"))) 
 ("global_statement" (:*unnamed* ("identifier"))) 
 ("identifier" (:*unnamed* nil)) 
 ("if_clause" (:*unnamed* ("expression"))) 
 ("if_statement" (:*unnamed* nil :alternative ("elif_clause" "else_clause") :condition ("expression") :consequence ("block"))) 
 ("import_from_statement" (:*unnamed* ("wildcard_import") :module_name ("dotted_name" "relative_import") :name ("aliased_import" "dotted_name"))) 
 ("import_prefix" (:*unnamed* nil)) 
 ("import_statement" (:*unnamed* nil :name ("aliased_import" "dotted_name"))) 
 ("integer" (:*unnamed* nil)) 
 ("interpolation" (:*unnamed* nil :expression ("expression" "pattern_list" "yield" "expression_list") :format_specifier ("format_specifier") :type_conversion ("type_conversion"))) 
 ("keyword_argument" (:*unnamed* nil :name ("identifier") :value ("expression"))) 
 ("keyword_pattern" (:*unnamed* ("string" "concatenated_string" "complex_pattern" "list_pattern" "splat_pattern" "tuple_pattern" "false" "true" "none" "dict_pattern" "dotted_name" "class_pattern" "float" "identifier" "union_pattern" "integer"))) 
 ("keyword_separator" (:*unnamed* nil)) 
 ("lambda" (:*unnamed* nil :body ("expression") :parameters ("lambda_parameters"))) 
 ("lambda_parameters" (:*unnamed* ("parameter"))) 
 ("line_continuation" (:*unnamed* nil)) 
 ("list" (:*unnamed* ("list_splat" "expression" "yield" "parenthesized_list_splat"))) 
 ("list_comprehension" (:*unnamed* ("for_in_clause" "if_clause") :body ("expression"))) 
 ("list_pattern" (:*unnamed* ("pattern" "case_pattern"))) 
 ("list_splat" (:*unnamed* ("subscript" "expression" "identifier" "attribute"))) 
 ("list_splat_pattern" (:*unnamed* ("subscript" "identifier" "attribute"))) 
 ("match_statement" (:*unnamed* nil :body ("block") :subject ("expression"))) 
 ("member_type" (:*unnamed* ("type" "identifier"))) 
 ("module" (:*unnamed* ("with_statement" "import_from_statement" "for_statement" "assert_statement" "exec_statement" "type_alias_statement" "print_statement" "expression_statement" "nonlocal_statement" "try_statement" "while_statement" "if_statement" "import_statement" "return_statement" "raise_statement" "function_definition" "decorated_definition" "match_statement" "break_statement" "delete_statement" "global_statement" "class_definition" "future_import_statement" "pass_statement" "continue_statement"))) 
 ("named_expression" (:*unnamed* nil :name ("identifier") :value ("expression"))) 
 ("none" (:*unnamed* nil)) 
 ("nonlocal_statement" (:*unnamed* ("identifier"))) 
 ("not_operator" (:*unnamed* nil :argument ("expression"))) 
 ("pair" (:*unnamed* nil :key ("expression") :value ("expression"))) 
 ("parameter" (:*unnamed* ("default_parameter" "dictionary_splat_pattern" "keyword_separator" "identifier" "tuple_pattern" "typed_parameter" "list_splat_pattern" "typed_default_parameter" "positional_separator"))) 
 ("parameters" (:*unnamed* ("parameter"))) 
 ("parenthesized_expression" (:*unnamed* ("list_splat" "expression" "parenthesized_expression" "yield"))) 
 ("parenthesized_list_splat" (:*unnamed* ("list_splat" "parenthesized_expression"))) 
 ("pass_statement" (:*unnamed* nil)) 
 ("pattern" (:*unnamed* ("list_pattern" "identifier" "attribute" "tuple_pattern" "list_splat_pattern" "subscript"))) 
 ("pattern_list" (:*unnamed* ("pattern"))) 
 ("positional_separator" (:*unnamed* nil)) 
 ("primary_expression" (:*unnamed* ("list" "dictionary_comprehension" "string" "subscript" "concatenated_string" "attribute" "false" "list_comprehension" "parenthesized_expression" "none" "binary_operator" "true" "await" "generator_expression" "set" "dictionary" "list_splat" "ellipsis" "float" "call" "identifier" "tuple" "set_comprehension" "integer" "unary_operator"))) 
 ("print_statement" (:*unnamed* ("chevron") :argument ("expression"))) 
 ("raise_statement" (:*unnamed* ("expression" "expression_list") :cause ("expression"))) 
 ("relative_import" (:*unnamed* ("import_prefix" "dotted_name"))) 
 ("return_statement" (:*unnamed* ("expression" "expression_list"))) 
 ("set" (:*unnamed* ("list_splat" "expression" "yield" "parenthesized_list_splat"))) 
 ("set_comprehension" (:*unnamed* ("for_in_clause" "if_clause") :body ("expression"))) 
 ("slice" (:*unnamed* ("expression"))) 
 ("splat_pattern" (:*unnamed* ("identifier"))) 
 ("splat_type" (:*unnamed* ("identifier"))) 
 ("string" (:*unnamed* ("string_end" "string_start" "interpolation" "string_content"))) 
 ("string_content" (:*unnamed* ("escape_interpolation" "escape_sequence"))) 
 ("string_end" (:*unnamed* nil)) 
 ("string_start" (:*unnamed* nil)) 
 ("subscript" (:*unnamed* nil :subscript ("slice" "expression") :value ("primary_expression"))) 
 ("true" (:*unnamed* nil)) 
 ("try_statement" (:*unnamed* ("else_clause" "finally_clause" "except_clause" "except_group_clause") :body ("block"))) 
 ("tuple" (:*unnamed* ("list_splat" "expression" "yield" "parenthesized_list_splat"))) 
 ("tuple_pattern" (:*unnamed* ("pattern" "case_pattern"))) 
 ("type" (:*unnamed* ("constrained_type" "expression" "generic_type" "splat_type" "union_type" "member_type"))) 
 ("type_alias_statement" (:*unnamed* ("type"))) 
 ("type_conversion" (:*unnamed* nil)) 
 ("type_parameter" (:*unnamed* ("type"))) 
 ("typed_default_parameter" (:*unnamed* nil :name ("identifier") :type ("type") :value ("expression"))) 
 ("typed_parameter" (:*unnamed* ("list_splat_pattern" "identifier" "dictionary_splat_pattern") :type ("type"))) 
 ("unary_operator" (:*unnamed* nil :argument ("primary_expression") :operator nil)) 
 ("union_pattern" (:*unnamed* ("dotted_name" "true" "class_pattern" "string" "concatenated_string" "complex_pattern" "float" "list_pattern" "splat_pattern" "tuple_pattern" "false" "union_pattern" "none" "dict_pattern" "integer"))) 
 ("union_type" (:*unnamed* ("type"))) 
 ("while_statement" (:*unnamed* nil :alternative ("else_clause") :body ("block") :condition ("expression"))) 
 ("wildcard_import" (:*unnamed* nil)) 
 ("with_clause" (:*unnamed* ("with_item"))) 
 ("with_item" (:*unnamed* nil :value ("expression"))) 
 ("with_statement" (:*unnamed* ("with_clause") :body ("block"))) 
 ("yield" (:*unnamed* ("expression" "expression_list"))) 
))
;; END Production rules for python
;; START Inverse production rules for python
(defconst combobulate-rules-python-inverse 
 '(("aliased_import" ("import_from_statement" "future_import_statement" "import_statement"))
   ("argument_list" ("call" "class_definition"))
   ("as_pattern" ("expression" "case_pattern"))
   ("as_pattern_target" ("as_pattern"))
   ("assert_statement" ("_simple_statement" "module" "block"))
   ("assignment" ("expression_statement" "augmented_assignment" "assignment"))
   ("attribute" ("list_splat_pattern" "dictionary_splat_pattern" "list_splat" "primary_expression" "pattern"))
   ("augmented_assignment" ("expression_statement" "augmented_assignment" "assignment"))
   ("await" ("primary_expression"))
   ("binary_operator" ("primary_expression"))
   ("block" ("case_clause" "else_clause" "with_statement" "for_statement" "function_definition" "finally_clause" "match_statement" "except_group_clause" "elif_clause" "try_statement" "class_definition" "while_statement" "except_clause" "if_statement"))
   ("boolean_operator" ("expression"))
   ("break_statement" ("_simple_statement" "module" "block"))
   ("call" ("primary_expression"))
   ("case_clause" ("block"))
   ("case_pattern" ("case_clause" "as_pattern" "class_pattern" "list_pattern" "tuple_pattern" "dict_pattern"))
   ("chevron" ("print_statement"))
   ("class_definition" ("module" "_compound_statement" "block" "decorated_definition"))
   ("class_pattern" ("union_pattern" "dict_pattern" "case_pattern" "keyword_pattern"))
   ("comparison_operator" ("expression"))
   ("complex_pattern" ("union_pattern" "dict_pattern" "case_pattern" "keyword_pattern"))
   ("concatenated_string" ("keyword_pattern" "primary_expression" "case_pattern" "union_pattern" "dict_pattern"))
   ("conditional_expression" ("expression"))
   ("constrained_type" ("type"))
   ("continue_statement" ("_simple_statement" "module" "block"))
   ("decorated_definition" ("module" "_compound_statement" "block"))
   ("decorator" ("decorated_definition"))
   ("default_parameter" ("parameter"))
   ("delete_statement" ("_simple_statement" "module" "block"))
   ("dict_pattern" ("union_pattern" "dict_pattern" "case_pattern" "keyword_pattern"))
   ("dictionary" ("primary_expression"))
   ("dictionary_comprehension" ("primary_expression"))
   ("dictionary_splat" ("argument_list" "dictionary"))
   ("dictionary_splat_pattern" ("typed_parameter" "parameter"))
   ("dotted_name" ("import_from_statement" "aliased_import" "keyword_pattern" "class_pattern" "import_statement" "case_pattern" "union_pattern" "future_import_statement" "dict_pattern" "relative_import"))
   ("elif_clause" ("if_statement"))
   ("ellipsis" ("primary_expression"))
   ("else_clause" ("if_statement" "for_statement" "while_statement" "try_statement"))
   ("escape_interpolation" ("string_content"))
   ("escape_sequence" ("string_content"))
   ("except_clause" ("try_statement"))
   ("except_group_clause" ("try_statement"))
   ("exec_statement" ("_simple_statement" "module" "block"))
   ("expression" ("lambda" "assert_statement" "for_statement" "as_pattern" "print_statement" "expression_statement" "named_expression" "format_expression" "argument_list" "yield" "while_statement" "chevron" "with_item" "type" "raise_statement" "generator_expression" "dictionary_splat" "except_group_clause" "elif_clause" "assignment" "except_clause" "set_comprehension" "slice" "default_parameter" "keyword_argument" "exec_statement" "for_in_clause" "list" "pair" "subscript" "expression_list" "decorator" "if_statement" "list_comprehension" "parenthesized_expression" "typed_default_parameter" "return_statement" "boolean_operator" "augmented_assignment" "match_statement" "set" "delete_statement" "if_clause" "list_splat" "not_operator" "tuple" "conditional_expression" "interpolation"))
   ("expression_list" ("for_statement" "augmented_assignment" "return_statement" "delete_statement" "format_expression" "yield" "assignment" "interpolation" "raise_statement"))
   ("expression_statement" ("_simple_statement" "module" "block"))
   ("false" ("keyword_pattern" "primary_expression" "case_pattern" "union_pattern" "dict_pattern"))
   ("finally_clause" ("try_statement"))
   ("float" ("keyword_pattern" "complex_pattern" "primary_expression" "case_pattern" "union_pattern" "dict_pattern"))
   ("for_in_clause" ("list_comprehension" "set_comprehension" "dictionary_comprehension" "generator_expression"))
   ("for_statement" ("module" "_compound_statement" "block"))
   ("format_expression" ("format_specifier"))
   ("format_specifier" ("format_expression" "interpolation"))
   ("function_definition" ("module" "_compound_statement" "block" "decorated_definition"))
   ("future_import_statement" ("_simple_statement" "module" "block"))
   ("generator_expression" ("primary_expression" "call"))
   ("generic_type" ("type"))
   ("global_statement" ("_simple_statement" "module" "block"))
   ("identifier" ("splat_type" "as_pattern" "named_expression" "primary_expression" "splat_pattern" "attribute" "function_definition" "class_definition" "list_splat_pattern" "pattern" "aliased_import" "default_parameter" "keyword_argument" "parameter" "exec_statement" "keyword_pattern" "member_type" "dictionary_splat_pattern" "nonlocal_statement" "generic_type" "typed_default_parameter" "dotted_name" "global_statement" "list_splat" "typed_parameter"))
   ("if_clause" ("case_clause" "generator_expression" "dictionary_comprehension" "list_comprehension" "set_comprehension"))
   ("if_statement" ("module" "_compound_statement" "block"))
   ("import_from_statement" ("_simple_statement" "module" "block"))
   ("import_prefix" ("relative_import"))
   ("import_statement" ("_simple_statement" "module" "block"))
   ("integer" ("keyword_pattern" "complex_pattern" "primary_expression" "case_pattern" "union_pattern" "dict_pattern"))
   ("interpolation" ("string"))
   ("keyword_argument" ("argument_list"))
   ("keyword_pattern" ("case_pattern"))
   ("keyword_separator" ("parameter"))
   ("lambda" ("expression"))
   ("lambda_parameters" ("lambda"))
   ("list" ("primary_expression"))
   ("list_comprehension" ("primary_expression"))
   ("list_pattern" ("keyword_pattern" "case_pattern" "union_pattern" "pattern" "dict_pattern"))
   ("list_splat" ("parenthesized_list_splat" "set" "list" "primary_expression" "argument_list" "tuple" "parenthesized_expression"))
   ("list_splat_pattern" ("typed_parameter" "pattern" "parameter"))
   ("match_statement" ("module" "_compound_statement" "block"))
   ("member_type" ("type"))
   ("named_expression" ("expression"))
   ("none" ("keyword_pattern" "primary_expression" "case_pattern" "union_pattern" "dict_pattern"))
   ("nonlocal_statement" ("_simple_statement" "module" "block"))
   ("not_operator" ("expression"))
   ("pair" ("dictionary_comprehension" "dictionary"))
   ("parameter" ("parameters" "lambda_parameters"))
   ("parameters" ("function_definition"))
   ("parenthesized_expression" ("parenthesized_list_splat" "primary_expression" "argument_list" "parenthesized_expression"))
   ("parenthesized_list_splat" ("list" "tuple" "set"))
   ("pass_statement" ("_simple_statement" "module" "block"))
   ("pattern" ("pattern_list" "for_statement" "augmented_assignment" "for_in_clause" "list_pattern" "tuple_pattern" "assignment"))
   ("pattern_list" ("for_statement" "augmented_assignment" "for_in_clause" "format_expression" "assignment" "interpolation"))
   ("positional_separator" ("parameter"))
   ("primary_expression" ("expression" "await" "subscript" "comparison_operator" "call" "attribute" "binary_operator" "unary_operator"))
   ("print_statement" ("_simple_statement" "module" "block"))
   ("raise_statement" ("_simple_statement" "module" "block"))
   ("relative_import" ("import_from_statement"))
   ("return_statement" ("_simple_statement" "module" "block"))
   ("set" ("primary_expression"))
   ("set_comprehension" ("primary_expression"))
   ("slice" ("subscript"))
   ("splat_pattern" ("union_pattern" "dict_pattern" "case_pattern" "keyword_pattern"))
   ("splat_type" ("type"))
   ("string" ("exec_statement" "keyword_pattern" "concatenated_string" "primary_expression" "case_pattern" "union_pattern" "dict_pattern"))
   ("string_content" ("string"))
   ("string_end" ("string"))
   ("string_start" ("string"))
   ("subscript" ("list_splat_pattern" "dictionary_splat_pattern" "list_splat" "primary_expression" "pattern"))
   ("true" ("keyword_pattern" "primary_expression" "case_pattern" "union_pattern" "dict_pattern"))
   ("try_statement" ("module" "_compound_statement" "block"))
   ("tuple" ("primary_expression"))
   ("tuple_pattern" ("default_parameter" "parameter" "keyword_pattern" "case_pattern" "union_pattern" "pattern" "dict_pattern"))
   ("type" ("constrained_type" "function_definition" "type_alias_statement" "member_type" "typed_parameter" "assignment" "union_type" "typed_default_parameter" "type_parameter"))
   ("type_alias_statement" ("_simple_statement" "module" "block"))
   ("type_conversion" ("format_expression" "interpolation"))
   ("type_parameter" ("function_definition" "generic_type" "class_definition"))
   ("typed_default_parameter" ("parameter"))
   ("typed_parameter" ("parameter"))
   ("unary_operator" ("primary_expression"))
   ("union_pattern" ("union_pattern" "dict_pattern" "case_pattern" "keyword_pattern"))
   ("union_type" ("type"))
   ("while_statement" ("module" "_compound_statement" "block"))
   ("wildcard_import" ("import_from_statement"))
   ("with_clause" ("with_statement"))
   ("with_item" ("with_clause"))
   ("with_statement" ("module" "_compound_statement" "block"))
   ("yield" ("augmented_assignment" "set" "list" "expression_statement" "tuple" "format_expression" "assignment" "parenthesized_expression" "interpolation"))
  ) 
)
;; END Inverse production rules for python
;; START All node types in python
(defconst combobulate-rules-python-types 
 '("_compound_statement" "_simple_statement" "aliased_import" "argument_list" "as_pattern" "as_pattern_target" "assert_statement" "assignment" "attribute" "augmented_assignment" "await" "binary_operator" "block" "boolean_operator" "break_statement" "call" "case_clause" "case_pattern" "chevron" "class_definition" "class_pattern" "comment" "comparison_operator" "complex_pattern" "concatenated_string" "conditional_expression" "constrained_type" "continue_statement" "decorated_definition" "decorator" "default_parameter" "delete_statement" "dict_pattern" "dictionary" "dictionary_comprehension" "dictionary_splat" "dictionary_splat_pattern" "dotted_name" "elif_clause" "ellipsis" "else_clause" "escape_interpolation" "escape_sequence" "except_clause" "except_group_clause" "exec_statement" "expression" "expression_list" "expression_statement" "false" "finally_clause" "float" "for_in_clause" "for_statement" "format_expression" "format_specifier" "function_definition" "future_import_statement" "generator_expression" "generic_type" "global_statement" "identifier" "if_clause" "if_statement" "import_from_statement" "import_prefix" "import_statement" "integer" "interpolation" "keyword_argument" "keyword_pattern" "keyword_separator" "lambda" "lambda_parameters" "line_continuation" "list" "list_comprehension" "list_pattern" "list_splat" "list_splat_pattern" "match_statement" "member_type" "module" "named_expression" "none" "nonlocal_statement" "not_operator" "pair" "parameter" "parameters" "parenthesized_expression" "parenthesized_list_splat" "pass_statement" "pattern" "pattern_list" "positional_separator" "primary_expression" "print_statement" "raise_statement" "relative_import" "return_statement" "set" "set_comprehension" "slice" "splat_pattern" "splat_type" "string" "string_content" "string_end" "string_start" "subscript" "true" "try_statement" "tuple" "tuple_pattern" "type" "type_alias_statement" "type_conversion" "type_parameter" "typed_default_parameter" "typed_parameter" "unary_operator" "union_pattern" "union_type" "while_statement" "wildcard_import" "with_clause" "with_item" "with_statement" "yield") 
)
;; END All node types in python
;; START All supertypes in python
(defconst combobulate-rules-python-supertypes 
 '("_compound_statement" "_simple_statement" "expression" "parameter" "pattern" "primary_expression") 
)
;; END All supertypes in python

;; START Production rules for c
(defconst combobulate-rules-c 
 '(("_abstract_declarator" (:*unnamed* ("abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator"))) 
 ("_declarator" (:*unnamed* ("attributed_declarator" "array_declarator" "identifier" "pointer_declarator" "parenthesized_declarator" "function_declarator"))) 
 ("_expression" (:*unnamed* ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("_field_declarator" (:*unnamed* ("attributed_declarator" "array_declarator" "pointer_declarator" "parenthesized_declarator" "function_declarator" "field_identifier"))) 
 ("_statement" (:*unnamed* ("compound_statement" "goto_statement" "for_statement" "switch_statement" "expression_statement" "do_statement" "labeled_statement" "while_statement" "if_statement" "seh_try_statement" "return_statement" "case_statement" "attributed_statement" "break_statement" "seh_leave_statement" "continue_statement"))) 
 ("_type_declarator" (:*unnamed* ("attributed_declarator" "array_declarator" "primitive_type" "pointer_declarator" "parenthesized_declarator" "type_identifier" "function_declarator"))) 
 ("_type_specifier" (:*unnamed* ("struct_specifier" "primitive_type" "sized_type_specifier" "enum_specifier" "macro_type_specifier" "type_identifier" "union_specifier"))) 
 ("abstract_array_declarator" (:*unnamed* ("type_qualifier") :declarator ("abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator") :size ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("abstract_function_declarator" (:*unnamed* nil :declarator ("abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator") :parameters ("parameter_list"))) 
 ("abstract_parenthesized_declarator" (:*unnamed* ("abstract_array_declarator" "abstract_function_declarator" "ms_call_modifier" "abstract_parenthesized_declarator" "abstract_pointer_declarator"))) 
 ("abstract_pointer_declarator" (:*unnamed* ("type_qualifier" "ms_pointer_modifier") :declarator ("abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator"))) 
 ("alignof_expression" (:*unnamed* nil :type ("type_descriptor"))) 
 ("argument_list" (:*unnamed* ("compound_statement" "call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "preproc_defined" "compound_literal_expression" "alignof_expression"))) 
 ("array_declarator" (:*unnamed* ("type_qualifier") :declarator ("array_declarator" "primitive_type" "type_identifier" "function_declarator" "attributed_declarator" "identifier" "pointer_declarator" "parenthesized_declarator" "field_identifier") :size ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("assignment_expression" (:*unnamed* nil :left ("subscript_expression" "identifier" "call_expression" "parenthesized_expression" "field_expression" "pointer_expression") :operator nil :right ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("attribute" (:*unnamed* ("argument_list") :name ("identifier") :prefix ("identifier"))) 
 ("attribute_declaration" (:*unnamed* ("attribute"))) 
 ("attribute_specifier" (:*unnamed* ("argument_list"))) 
 ("attributed_declarator" (:*unnamed* ("array_declarator" "primitive_type" "type_identifier" "function_declarator" "attribute_declaration" "attributed_declarator" "identifier" "pointer_declarator" "parenthesized_declarator" "field_identifier"))) 
 ("attributed_statement" (:*unnamed* ("compound_statement" "goto_statement" "for_statement" "switch_statement" "expression_statement" "do_statement" "attribute_declaration" "labeled_statement" "while_statement" "if_statement" "seh_try_statement" "return_statement" "case_statement" "attributed_statement" "break_statement" "seh_leave_statement" "continue_statement"))) 
 ("binary_expression" (:*unnamed* nil :left ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "preproc_defined" "compound_literal_expression" "alignof_expression") :operator nil :right ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "preproc_defined" "compound_literal_expression" "alignof_expression"))) 
 ("bitfield_clause" (:*unnamed* ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("break_statement" (:*unnamed* nil)) 
 ("call_expression" (:*unnamed* nil :arguments ("argument_list") :function ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("case_statement" (:*unnamed* ("compound_statement" "goto_statement" "for_statement" "switch_statement" "expression_statement" "do_statement" "labeled_statement" "while_statement" "declaration" "if_statement" "seh_try_statement" "type_definition" "return_statement" "attributed_statement" "break_statement" "seh_leave_statement" "continue_statement") :value ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("cast_expression" (:*unnamed* nil :type ("type_descriptor") :value ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("char_literal" (:*unnamed* ("character" "escape_sequence"))) 
 ("character" (:*unnamed* nil)) 
 ("comma_expression" (:*unnamed* nil :left ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression") :right ("call_expression" "comma_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("comment" (:*unnamed* nil)) 
 ("compound_literal_expression" (:*unnamed* nil :type ("type_descriptor") :value ("initializer_list"))) 
 ("compound_statement" (:*unnamed* ("goto_statement" "for_statement" "switch_statement" "primitive_type" "expression_statement" "preproc_if" "while_statement" "declaration" "preproc_call" "seh_try_statement" "case_statement" "attributed_statement" "function_definition" "sized_type_specifier" "break_statement" "type_identifier" "union_specifier" "struct_specifier" "linkage_specification" "compound_statement" "enum_specifier" "do_statement" "labeled_statement" "preproc_function_def" "preproc_include" "if_statement" "type_definition" "preproc_ifdef" "return_statement" "preproc_def" "seh_leave_statement" "macro_type_specifier" "continue_statement"))) 
 ("concatenated_string" (:*unnamed* ("identifier" "string_literal"))) 
 ("conditional_expression" (:*unnamed* nil :alternative ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression") :condition ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression") :consequence ("call_expression" "comma_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("continue_statement" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("attribute_declaration" "storage_class_specifier" "attribute_specifier" "type_qualifier" "ms_declspec_modifier") :declarator ("array_declarator" "init_declarator" "ms_call_modifier" "function_declarator" "parenthesized_declarator" "attributed_declarator" "identifier" "pointer_declarator" "gnu_asm_expression") :type ("struct_specifier" "primitive_type" "sized_type_specifier" "enum_specifier" "macro_type_specifier" "type_identifier" "union_specifier"))) 
 ("declaration_list" (:*unnamed* ("goto_statement" "for_statement" "switch_statement" "primitive_type" "expression_statement" "preproc_if" "while_statement" "declaration" "preproc_call" "seh_try_statement" "case_statement" "attributed_statement" "function_definition" "sized_type_specifier" "break_statement" "type_identifier" "union_specifier" "struct_specifier" "linkage_specification" "compound_statement" "enum_specifier" "do_statement" "labeled_statement" "preproc_function_def" "preproc_include" "if_statement" "type_definition" "preproc_ifdef" "return_statement" "preproc_def" "seh_leave_statement" "macro_type_specifier" "continue_statement"))) 
 ("do_statement" (:*unnamed* nil :body ("compound_statement" "goto_statement" "for_statement" "switch_statement" "expression_statement" "do_statement" "labeled_statement" "while_statement" "if_statement" "seh_try_statement" "return_statement" "case_statement" "attributed_statement" "break_statement" "seh_leave_statement" "continue_statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("compound_statement" "goto_statement" "for_statement" "switch_statement" "expression_statement" "do_statement" "labeled_statement" "while_statement" "if_statement" "seh_try_statement" "return_statement" "case_statement" "attributed_statement" "break_statement" "seh_leave_statement" "continue_statement"))) 
 ("enum_specifier" (:*unnamed* ("attribute_specifier") :body ("enumerator_list") :name ("type_identifier") :underlying_type ("primitive_type"))) 
 ("enumerator" (:*unnamed* nil :name ("identifier") :value ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("enumerator_list" (:*unnamed* ("preproc_call" "preproc_if" "enumerator" "preproc_ifdef"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("expression_statement" (:*unnamed* ("call_expression" "comma_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("false" (:*unnamed* nil)) 
 ("field_declaration" (:*unnamed* ("storage_class_specifier" "attribute_specifier" "type_qualifier" "bitfield_clause" "attribute_declaration" "ms_declspec_modifier") :declarator ("attributed_declarator" "array_declarator" "pointer_declarator" "parenthesized_declarator" "function_declarator" "field_identifier") :type ("struct_specifier" "primitive_type" "sized_type_specifier" "enum_specifier" "macro_type_specifier" "type_identifier" "union_specifier"))) 
 ("field_declaration_list" (:*unnamed* ("preproc_if" "preproc_function_def" "preproc_call" "preproc_def" "field_declaration" "preproc_ifdef"))) 
 ("field_designator" (:*unnamed* ("field_identifier"))) 
 ("field_expression" (:*unnamed* nil :argument ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression") :field ("field_identifier") :operator nil)) 
 ("field_identifier" (:*unnamed* nil)) 
 ("for_statement" (:*unnamed* nil :body ("compound_statement" "goto_statement" "for_statement" "switch_statement" "expression_statement" "do_statement" "labeled_statement" "while_statement" "if_statement" "seh_try_statement" "return_statement" "case_statement" "attributed_statement" "break_statement" "seh_leave_statement" "continue_statement") :condition ("call_expression" "comma_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression") :initializer ("call_expression" "comma_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "declaration" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression") :update ("call_expression" "comma_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("function_declarator" (:*unnamed* ("gnu_asm_expression" "call_expression" "identifier" "attribute_specifier") :declarator ("array_declarator" "primitive_type" "type_identifier" "function_declarator" "attributed_declarator" "identifier" "pointer_declarator" "parenthesized_declarator" "field_identifier") :parameters ("parameter_list"))) 
 ("function_definition" (:*unnamed* ("storage_class_specifier" "ms_call_modifier" "attribute_specifier" "declaration" "type_qualifier" "attribute_declaration" "ms_declspec_modifier") :body ("compound_statement") :declarator ("attributed_declarator" "array_declarator" "identifier" "pointer_declarator" "parenthesized_declarator" "function_declarator") :type ("struct_specifier" "primitive_type" "sized_type_specifier" "enum_specifier" "macro_type_specifier" "type_identifier" "union_specifier"))) 
 ("generic_expression" (:*unnamed* ("type_descriptor" "call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("gnu_asm_clobber_list" (:*unnamed* nil :register ("concatenated_string" "string_literal"))) 
 ("gnu_asm_expression" (:*unnamed* ("gnu_asm_qualifier") :assembly_code ("concatenated_string" "string_literal") :clobbers ("gnu_asm_clobber_list") :goto_labels ("gnu_asm_goto_list") :input_operands ("gnu_asm_input_operand_list") :output_operands ("gnu_asm_output_operand_list"))) 
 ("gnu_asm_goto_list" (:*unnamed* nil :label ("identifier"))) 
 ("gnu_asm_input_operand" (:*unnamed* nil :constraint ("string_literal") :symbol ("identifier") :value ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("gnu_asm_input_operand_list" (:*unnamed* nil :operand ("gnu_asm_input_operand"))) 
 ("gnu_asm_output_operand" (:*unnamed* nil :constraint ("string_literal") :symbol ("identifier") :value ("identifier"))) 
 ("gnu_asm_output_operand_list" (:*unnamed* nil :operand ("gnu_asm_output_operand"))) 
 ("gnu_asm_qualifier" (:*unnamed* nil)) 
 ("goto_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("compound_statement" "goto_statement" "for_statement" "switch_statement" "expression_statement" "do_statement" "labeled_statement" "while_statement" "if_statement" "seh_try_statement" "return_statement" "case_statement" "attributed_statement" "break_statement" "seh_leave_statement" "continue_statement"))) 
 ("init_declarator" (:*unnamed* nil :declarator ("attributed_declarator" "array_declarator" "identifier" "pointer_declarator" "parenthesized_declarator" "function_declarator") :value ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "initializer_list" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("initializer_list" (:*unnamed* ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "initializer_list" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "initializer_pair" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("initializer_pair" (:*unnamed* nil :designator ("subscript_designator" "subscript_range_designator" "field_designator" "field_identifier") :value ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "initializer_list" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("labeled_statement" (:*unnamed* ("compound_statement" "goto_statement" "for_statement" "switch_statement" "expression_statement" "do_statement" "labeled_statement" "while_statement" "if_statement" "seh_try_statement" "return_statement" "case_statement" "attributed_statement" "break_statement" "seh_leave_statement" "continue_statement") :label ("statement_identifier"))) 
 ("linkage_specification" (:*unnamed* nil :body ("function_definition" "declaration_list" "declaration") :value ("string_literal"))) 
 ("macro_type_specifier" (:*unnamed* nil :name ("identifier") :type ("type_descriptor"))) 
 ("ms_based_modifier" (:*unnamed* ("argument_list"))) 
 ("ms_call_modifier" (:*unnamed* nil)) 
 ("ms_declspec_modifier" (:*unnamed* ("identifier"))) 
 ("ms_pointer_modifier" (:*unnamed* ("ms_restrict_modifier" "ms_unsigned_ptr_modifier" "ms_unaligned_ptr_modifier" "ms_signed_ptr_modifier"))) 
 ("ms_restrict_modifier" (:*unnamed* nil)) 
 ("ms_signed_ptr_modifier" (:*unnamed* nil)) 
 ("ms_unaligned_ptr_modifier" (:*unnamed* nil)) 
 ("ms_unsigned_ptr_modifier" (:*unnamed* nil)) 
 ("null" (:*unnamed* nil)) 
 ("number_literal" (:*unnamed* nil)) 
 ("offsetof_expression" (:*unnamed* nil :member ("field_identifier") :type ("type_descriptor"))) 
 ("parameter_declaration" (:*unnamed* ("attribute_declaration" "storage_class_specifier" "attribute_specifier" "type_qualifier" "ms_declspec_modifier") :declarator ("array_declarator" "abstract_function_declarator" "function_declarator" "abstract_array_declarator" "attributed_declarator" "identifier" "pointer_declarator" "parenthesized_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator") :type ("struct_specifier" "primitive_type" "sized_type_specifier" "enum_specifier" "macro_type_specifier" "type_identifier" "union_specifier"))) 
 ("parameter_list" (:*unnamed* ("parameter_declaration" "variadic_parameter" "identifier"))) 
 ("parenthesized_declarator" (:*unnamed* ("array_declarator" "ms_call_modifier" "primitive_type" "type_identifier" "function_declarator" "attributed_declarator" "identifier" "pointer_declarator" "parenthesized_declarator" "field_identifier"))) 
 ("parenthesized_expression" (:*unnamed* ("call_expression" "comma_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "preproc_defined" "compound_literal_expression" "alignof_expression"))) 
 ("pointer_declarator" (:*unnamed* ("type_qualifier" "ms_pointer_modifier" "ms_based_modifier") :declarator ("array_declarator" "primitive_type" "type_identifier" "function_declarator" "attributed_declarator" "identifier" "pointer_declarator" "parenthesized_declarator" "field_identifier"))) 
 ("pointer_expression" (:*unnamed* nil :argument ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression") :operator nil)) 
 ("preproc_arg" (:*unnamed* nil)) 
 ("preproc_call" (:*unnamed* nil :argument ("preproc_arg") :directive ("preproc_directive"))) 
 ("preproc_def" (:*unnamed* nil :name ("identifier") :value ("preproc_arg"))) 
 ("preproc_defined" (:*unnamed* ("identifier"))) 
 ("preproc_directive" (:*unnamed* nil)) 
 ("preproc_elif" (:*unnamed* ("goto_statement" "for_statement" "switch_statement" "primitive_type" "expression_statement" "preproc_if" "while_statement" "declaration" "preproc_call" "seh_try_statement" "case_statement" "attributed_statement" "function_definition" "sized_type_specifier" "break_statement" "type_identifier" "union_specifier" "struct_specifier" "linkage_specification" "field_declaration" "compound_statement" "enum_specifier" "do_statement" "labeled_statement" "preproc_function_def" "enumerator" "preproc_include" "if_statement" "type_definition" "preproc_ifdef" "return_statement" "preproc_def" "seh_leave_statement" "macro_type_specifier" "continue_statement") :alternative ("preproc_else" "preproc_elif") :condition ("binary_expression" "call_expression" "unary_expression" "identifier" "number_literal" "parenthesized_expression" "preproc_defined" "char_literal"))) 
 ("preproc_elifdef" (:*unnamed* ("goto_statement" "for_statement" "switch_statement" "primitive_type" "expression_statement" "preproc_if" "while_statement" "declaration" "preproc_call" "seh_try_statement" "case_statement" "attributed_statement" "function_definition" "sized_type_specifier" "break_statement" "type_identifier" "union_specifier" "struct_specifier" "linkage_specification" "field_declaration" "compound_statement" "enum_specifier" "do_statement" "labeled_statement" "preproc_function_def" "enumerator" "preproc_include" "if_statement" "type_definition" "preproc_ifdef" "return_statement" "preproc_def" "seh_leave_statement" "macro_type_specifier" "continue_statement") :alternative ("preproc_else" "preproc_elif") :name ("identifier"))) 
 ("preproc_else" (:*unnamed* ("goto_statement" "for_statement" "switch_statement" "primitive_type" "expression_statement" "preproc_if" "while_statement" "declaration" "preproc_call" "seh_try_statement" "case_statement" "attributed_statement" "function_definition" "sized_type_specifier" "break_statement" "type_identifier" "union_specifier" "struct_specifier" "linkage_specification" "field_declaration" "compound_statement" "enum_specifier" "do_statement" "labeled_statement" "preproc_function_def" "enumerator" "preproc_include" "if_statement" "type_definition" "preproc_ifdef" "return_statement" "preproc_def" "seh_leave_statement" "macro_type_specifier" "continue_statement"))) 
 ("preproc_function_def" (:*unnamed* nil :name ("identifier") :parameters ("preproc_params") :value ("preproc_arg"))) 
 ("preproc_if" (:*unnamed* ("goto_statement" "for_statement" "switch_statement" "primitive_type" "expression_statement" "preproc_if" "while_statement" "declaration" "preproc_call" "seh_try_statement" "case_statement" "attributed_statement" "function_definition" "sized_type_specifier" "break_statement" "type_identifier" "union_specifier" "struct_specifier" "linkage_specification" "field_declaration" "compound_statement" "enum_specifier" "do_statement" "labeled_statement" "preproc_function_def" "enumerator" "preproc_include" "if_statement" "type_definition" "preproc_ifdef" "return_statement" "preproc_def" "seh_leave_statement" "macro_type_specifier" "continue_statement") :alternative ("preproc_else" "preproc_elif") :condition ("binary_expression" "call_expression" "unary_expression" "identifier" "number_literal" "parenthesized_expression" "preproc_defined" "char_literal"))) 
 ("preproc_ifdef" (:*unnamed* ("goto_statement" "for_statement" "switch_statement" "primitive_type" "expression_statement" "preproc_if" "while_statement" "declaration" "preproc_call" "seh_try_statement" "case_statement" "attributed_statement" "function_definition" "sized_type_specifier" "break_statement" "type_identifier" "union_specifier" "struct_specifier" "linkage_specification" "field_declaration" "compound_statement" "enum_specifier" "do_statement" "labeled_statement" "preproc_function_def" "enumerator" "preproc_include" "if_statement" "type_definition" "preproc_ifdef" "return_statement" "preproc_def" "seh_leave_statement" "macro_type_specifier" "continue_statement") :alternative ("preproc_elifdef" "preproc_elif" "preproc_else") :name ("identifier"))) 
 ("preproc_include" (:*unnamed* nil :path ("call_expression" "system_lib_string" "identifier" "string_literal"))) 
 ("preproc_params" (:*unnamed* ("identifier"))) 
 ("primitive_type" (:*unnamed* nil)) 
 ("return_statement" (:*unnamed* ("call_expression" "comma_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("seh_except_clause" (:*unnamed* nil :body ("compound_statement") :filter ("parenthesized_expression"))) 
 ("seh_finally_clause" (:*unnamed* nil :body ("compound_statement"))) 
 ("seh_leave_statement" (:*unnamed* nil)) 
 ("seh_try_statement" (:*unnamed* ("seh_finally_clause" "seh_except_clause") :body ("compound_statement"))) 
 ("sized_type_specifier" (:*unnamed* nil :type ("type_identifier" "primitive_type"))) 
 ("sizeof_expression" (:*unnamed* nil :type ("type_descriptor") :value ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("statement_identifier" (:*unnamed* nil)) 
 ("storage_class_specifier" (:*unnamed* nil)) 
 ("string_content" (:*unnamed* nil)) 
 ("string_literal" (:*unnamed* ("string_content" "escape_sequence"))) 
 ("struct_specifier" (:*unnamed* ("attribute_specifier" "ms_declspec_modifier") :body ("field_declaration_list") :name ("type_identifier"))) 
 ("subscript_designator" (:*unnamed* ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("subscript_expression" (:*unnamed* nil :argument ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression") :index ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("subscript_range_designator" (:*unnamed* nil :end ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression") :start ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression"))) 
 ("switch_statement" (:*unnamed* nil :body ("compound_statement") :condition ("parenthesized_expression"))) 
 ("system_lib_string" (:*unnamed* nil)) 
 ("translation_unit" (:*unnamed* ("compound_statement" "goto_statement" "for_statement" "primitive_type" "enum_specifier" "switch_statement" "expression_statement" "do_statement" "labeled_statement" "preproc_if" "preproc_function_def" "while_statement" "declaration" "preproc_call" "if_statement" "preproc_include" "type_definition" "preproc_ifdef" "return_statement" "case_statement" "attributed_statement" "function_definition" "sized_type_specifier" "break_statement" "type_identifier" "union_specifier" "preproc_def" "struct_specifier" "macro_type_specifier" "linkage_specification" "continue_statement"))) 
 ("true" (:*unnamed* nil)) 
 ("type_definition" (:*unnamed* ("type_qualifier" "attribute_specifier") :declarator ("attributed_declarator" "array_declarator" "primitive_type" "pointer_declarator" "parenthesized_declarator" "type_identifier" "function_declarator") :type ("struct_specifier" "primitive_type" "sized_type_specifier" "enum_specifier" "macro_type_specifier" "type_identifier" "union_specifier"))) 
 ("type_descriptor" (:*unnamed* ("type_qualifier") :declarator ("abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator") :type ("struct_specifier" "primitive_type" "sized_type_specifier" "enum_specifier" "macro_type_specifier" "type_identifier" "union_specifier"))) 
 ("type_identifier" (:*unnamed* nil)) 
 ("type_qualifier" (:*unnamed* nil)) 
 ("unary_expression" (:*unnamed* nil :argument ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "preproc_defined" "compound_literal_expression" "alignof_expression") :operator nil)) 
 ("union_specifier" (:*unnamed* ("attribute_specifier" "ms_declspec_modifier") :body ("field_declaration_list") :name ("type_identifier"))) 
 ("update_expression" (:*unnamed* nil :argument ("call_expression" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "concatenated_string" "string_literal" "false" "gnu_asm_expression" "update_expression" "parenthesized_expression" "offsetof_expression" "true" "char_literal" "assignment_expression" "binary_expression" "unary_expression" "subscript_expression" "cast_expression" "identifier" "number_literal" "conditional_expression" "null" "compound_literal_expression" "alignof_expression") :operator nil)) 
 ("variadic_parameter" (:*unnamed* nil)) 
 ("while_statement" (:*unnamed* nil :body ("compound_statement" "goto_statement" "for_statement" "switch_statement" "expression_statement" "do_statement" "labeled_statement" "while_statement" "if_statement" "seh_try_statement" "return_statement" "case_statement" "attributed_statement" "break_statement" "seh_leave_statement" "continue_statement") :condition ("parenthesized_expression"))) 
))
;; END Production rules for c
;; START Inverse production rules for c
(defconst combobulate-rules-c-inverse 
 '(("abstract_array_declarator" ("type_descriptor" "abstract_function_declarator" "abstract_array_declarator" "_abstract_declarator" "parameter_declaration" "abstract_parenthesized_declarator" "abstract_pointer_declarator"))
   ("abstract_function_declarator" ("type_descriptor" "abstract_function_declarator" "abstract_array_declarator" "_abstract_declarator" "parameter_declaration" "abstract_parenthesized_declarator" "abstract_pointer_declarator"))
   ("abstract_parenthesized_declarator" ("type_descriptor" "abstract_function_declarator" "abstract_array_declarator" "_abstract_declarator" "parameter_declaration" "abstract_parenthesized_declarator" "abstract_pointer_declarator"))
   ("abstract_pointer_declarator" ("type_descriptor" "abstract_function_declarator" "abstract_array_declarator" "_abstract_declarator" "parameter_declaration" "abstract_parenthesized_declarator" "abstract_pointer_declarator"))
   ("alignof_expression" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("argument_list" ("call_expression" "attribute_specifier" "attribute" "ms_based_modifier"))
   ("array_declarator" ("array_declarator" "function_definition" "init_declarator" "type_definition" "function_declarator" "parameter_declaration" "_type_declarator" "_field_declarator" "attributed_declarator" "pointer_declarator" "declaration" "parenthesized_declarator" "_declarator" "field_declaration"))
   ("assignment_expression" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("attribute" ("attribute_declaration"))
   ("attribute_declaration" ("attributed_statement" "function_definition" "attributed_declarator" "declaration" "parameter_declaration" "field_declaration"))
   ("attribute_specifier" ("function_definition" "type_definition" "enum_specifier" "function_declarator" "union_specifier" "struct_specifier" "declaration" "parameter_declaration" "field_declaration"))
   ("attributed_declarator" ("array_declarator" "function_definition" "init_declarator" "type_definition" "function_declarator" "parameter_declaration" "_type_declarator" "_field_declarator" "attributed_declarator" "pointer_declarator" "declaration" "parenthesized_declarator" "_declarator" "field_declaration"))
   ("attributed_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "translation_unit" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("binary_expression" ("preproc_elif" "for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "preproc_if" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("bitfield_clause" ("field_declaration"))
   ("break_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "translation_unit" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("call_expression" ("preproc_elif" "for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "preproc_if" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "preproc_include" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "function_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("case_statement" ("else_clause" "compound_statement" "attributed_statement" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "translation_unit" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("cast_expression" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("char_literal" ("preproc_elif" "for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "preproc_if" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("character" ("char_literal"))
   ("comma_expression" ("for_statement" "expression_statement" "comma_expression" "conditional_expression" "parenthesized_expression" "return_statement"))
   ("compound_literal_expression" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("compound_statement" ("seh_finally_clause" "preproc_elif" "for_statement" "switch_statement" "declaration_list" "preproc_if" "argument_list" "while_statement" "seh_try_statement" "case_statement" "else_clause" "attributed_statement" "function_definition" "seh_except_clause" "_statement" "preproc_elifdef" "compound_statement" "do_statement" "labeled_statement" "if_statement" "preproc_ifdef" "preproc_else" "translation_unit"))
   ("concatenated_string" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "gnu_asm_expression" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_clobber_list" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("conditional_expression" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("continue_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "translation_unit" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("declaration" ("case_statement" "compound_statement" "preproc_elif" "for_statement" "function_definition" "preproc_else" "declaration_list" "preproc_if" "translation_unit" "linkage_specification" "preproc_elifdef" "preproc_ifdef"))
   ("declaration_list" ("linkage_specification"))
   ("do_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "translation_unit" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("else_clause" ("if_statement"))
   ("enum_specifier" ("compound_statement" "_type_specifier" "function_definition" "preproc_elif" "type_definition" "type_descriptor" "preproc_else" "declaration_list" "preproc_if" "translation_unit" "declaration" "parameter_declaration" "preproc_elifdef" "field_declaration" "preproc_ifdef"))
   ("enumerator" ("preproc_elif" "preproc_else" "preproc_ifdef" "preproc_if" "preproc_elifdef" "enumerator_list"))
   ("enumerator_list" ("enum_specifier"))
   ("escape_sequence" ("string_literal" "char_literal"))
   ("expression_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "translation_unit" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("false" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("field_declaration" ("preproc_elif" "preproc_else" "preproc_if" "field_declaration_list" "preproc_elifdef" "preproc_ifdef"))
   ("field_declaration_list" ("struct_specifier" "union_specifier"))
   ("field_designator" ("initializer_pair"))
   ("field_expression" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("field_identifier" ("field_designator" "array_declarator" "function_declarator" "field_expression" "_field_declarator" "attributed_declarator" "initializer_pair" "pointer_declarator" "parenthesized_declarator" "offsetof_expression" "field_declaration"))
   ("for_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "translation_unit" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("function_declarator" ("array_declarator" "function_definition" "init_declarator" "type_definition" "function_declarator" "parameter_declaration" "_type_declarator" "_field_declarator" "attributed_declarator" "pointer_declarator" "declaration" "parenthesized_declarator" "_declarator" "field_declaration"))
   ("function_definition" ("compound_statement" "preproc_elif" "preproc_else" "declaration_list" "preproc_if" "translation_unit" "linkage_specification" "preproc_elifdef" "preproc_ifdef"))
   ("generic_expression" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("gnu_asm_clobber_list" ("gnu_asm_expression"))
   ("gnu_asm_expression" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "declaration" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "function_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("gnu_asm_goto_list" ("gnu_asm_expression"))
   ("gnu_asm_input_operand" ("gnu_asm_input_operand_list"))
   ("gnu_asm_input_operand_list" ("gnu_asm_expression"))
   ("gnu_asm_output_operand" ("gnu_asm_output_operand_list"))
   ("gnu_asm_output_operand_list" ("gnu_asm_expression"))
   ("gnu_asm_qualifier" ("gnu_asm_expression"))
   ("goto_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "translation_unit" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("identifier" ("preproc_elif" "for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "gnu_asm_goto_list" "ms_declspec_modifier" "pointer_expression" "argument_list" "initializer_list" "preproc_if" "attribute" "declaration" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "function_definition" "_declarator" "parameter_declaration" "unary_expression" "parameter_list" "abstract_array_declarator" "subscript_expression" "preproc_elifdef" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "parenthesized_declarator" "concatenated_string" "subscript_designator" "preproc_function_def" "enumerator" "pointer_declarator" "preproc_include" "parenthesized_expression" "preproc_ifdef" "assignment_expression" "return_statement" "array_declarator" "gnu_asm_output_operand" "function_declarator" "preproc_def" "attributed_declarator" "cast_expression" "initializer_pair" "macro_type_specifier" "comma_expression" "conditional_expression" "preproc_params" "preproc_defined"))
   ("if_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "translation_unit" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("init_declarator" ("declaration"))
   ("initializer_list" ("init_declarator" "initializer_list" "compound_literal_expression" "initializer_pair"))
   ("initializer_pair" ("initializer_list"))
   ("labeled_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "translation_unit" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("linkage_specification" ("compound_statement" "preproc_elif" "preproc_else" "declaration_list" "preproc_if" "translation_unit" "preproc_elifdef" "preproc_ifdef"))
   ("macro_type_specifier" ("compound_statement" "_type_specifier" "function_definition" "preproc_elif" "type_definition" "type_descriptor" "preproc_else" "declaration_list" "preproc_if" "translation_unit" "declaration" "parameter_declaration" "preproc_elifdef" "field_declaration" "preproc_ifdef"))
   ("ms_based_modifier" ("pointer_declarator"))
   ("ms_call_modifier" ("parenthesized_declarator" "function_definition" "abstract_parenthesized_declarator" "declaration"))
   ("ms_declspec_modifier" ("function_definition" "union_specifier" "struct_specifier" "declaration" "parameter_declaration" "field_declaration"))
   ("ms_pointer_modifier" ("pointer_declarator" "abstract_pointer_declarator"))
   ("ms_restrict_modifier" ("ms_pointer_modifier"))
   ("ms_signed_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_unaligned_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_unsigned_ptr_modifier" ("ms_pointer_modifier"))
   ("null" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("number_literal" ("preproc_elif" "for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "preproc_if" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("offsetof_expression" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("parameter_declaration" ("parameter_list"))
   ("parameter_list" ("abstract_function_declarator" "function_declarator"))
   ("parenthesized_declarator" ("array_declarator" "function_definition" "init_declarator" "type_definition" "function_declarator" "parameter_declaration" "_type_declarator" "_field_declarator" "attributed_declarator" "pointer_declarator" "declaration" "parenthesized_declarator" "_declarator" "field_declaration"))
   ("parenthesized_expression" ("preproc_elif" "for_statement" "switch_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "preproc_if" "argument_list" "initializer_list" "while_statement" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "seh_except_clause" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "do_statement" "subscript_designator" "enumerator" "if_statement" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("pointer_declarator" ("array_declarator" "function_definition" "init_declarator" "type_definition" "function_declarator" "parameter_declaration" "_type_declarator" "_field_declarator" "attributed_declarator" "pointer_declarator" "declaration" "parenthesized_declarator" "_declarator" "field_declaration"))
   ("pointer_expression" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("preproc_arg" ("preproc_call" "preproc_function_def" "preproc_def"))
   ("preproc_call" ("compound_statement" "preproc_elif" "preproc_else" "preproc_ifdef" "declaration_list" "preproc_if" "field_declaration_list" "translation_unit" "preproc_elifdef" "enumerator_list"))
   ("preproc_def" ("compound_statement" "preproc_elif" "preproc_else" "declaration_list" "preproc_if" "field_declaration_list" "translation_unit" "preproc_elifdef" "preproc_ifdef"))
   ("preproc_defined" ("binary_expression" "preproc_elif" "unary_expression" "preproc_if" "argument_list" "parenthesized_expression"))
   ("preproc_directive" ("preproc_call"))
   ("preproc_elif" ("preproc_elifdef" "preproc_if" "preproc_elif" "preproc_ifdef"))
   ("preproc_elifdef" ("preproc_ifdef"))
   ("preproc_else" ("preproc_elifdef" "preproc_if" "preproc_elif" "preproc_ifdef"))
   ("preproc_function_def" ("compound_statement" "preproc_elif" "preproc_else" "declaration_list" "preproc_if" "field_declaration_list" "translation_unit" "preproc_elifdef" "preproc_ifdef"))
   ("preproc_if" ("compound_statement" "preproc_elif" "preproc_else" "preproc_ifdef" "declaration_list" "preproc_if" "field_declaration_list" "translation_unit" "preproc_elifdef" "enumerator_list"))
   ("preproc_ifdef" ("compound_statement" "preproc_elif" "preproc_else" "preproc_ifdef" "declaration_list" "preproc_if" "field_declaration_list" "translation_unit" "preproc_elifdef" "enumerator_list"))
   ("preproc_include" ("compound_statement" "preproc_elif" "preproc_else" "declaration_list" "preproc_if" "translation_unit" "preproc_elifdef" "preproc_ifdef"))
   ("preproc_params" ("preproc_function_def"))
   ("primitive_type" ("preproc_elif" "declaration_list" "preproc_if" "declaration" "function_definition" "sized_type_specifier" "_type_declarator" "preproc_elifdef" "field_declaration" "compound_statement" "type_descriptor" "enum_specifier" "pointer_declarator" "type_definition" "preproc_ifdef" "_type_specifier" "array_declarator" "preproc_else" "function_declarator" "attributed_declarator" "translation_unit" "parenthesized_declarator" "parameter_declaration"))
   ("return_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "translation_unit" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("seh_except_clause" ("seh_try_statement"))
   ("seh_finally_clause" ("seh_try_statement"))
   ("seh_leave_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("seh_try_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("sized_type_specifier" ("compound_statement" "_type_specifier" "function_definition" "preproc_elif" "type_definition" "type_descriptor" "preproc_else" "declaration_list" "preproc_if" "translation_unit" "declaration" "parameter_declaration" "preproc_elifdef" "field_declaration" "preproc_ifdef"))
   ("sizeof_expression" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("statement_identifier" ("goto_statement" "labeled_statement"))
   ("storage_class_specifier" ("parameter_declaration" "function_definition" "field_declaration" "declaration"))
   ("string_content" ("string_literal"))
   ("string_literal" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "gnu_asm_expression" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_clobber_list" "linkage_specification" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "concatenated_string" "subscript_designator" "enumerator" "preproc_include" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "gnu_asm_output_operand" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("struct_specifier" ("compound_statement" "_type_specifier" "function_definition" "preproc_elif" "type_definition" "type_descriptor" "preproc_else" "declaration_list" "preproc_if" "translation_unit" "declaration" "parameter_declaration" "preproc_elifdef" "field_declaration" "preproc_ifdef"))
   ("subscript_designator" ("initializer_pair"))
   ("subscript_expression" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("subscript_range_designator" ("initializer_pair"))
   ("switch_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "translation_unit" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
   ("system_lib_string" ("preproc_include"))
   ("true" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("type_definition" ("case_statement" "compound_statement" "preproc_elif" "preproc_else" "declaration_list" "preproc_if" "translation_unit" "preproc_elifdef" "preproc_ifdef"))
   ("type_descriptor" ("sizeof_expression" "generic_expression" "cast_expression" "macro_type_specifier" "offsetof_expression" "compound_literal_expression" "alignof_expression"))
   ("type_identifier" ("preproc_elif" "declaration_list" "preproc_if" "declaration" "function_definition" "sized_type_specifier" "union_specifier" "_type_declarator" "struct_specifier" "preproc_elifdef" "field_declaration" "compound_statement" "type_descriptor" "enum_specifier" "pointer_declarator" "type_definition" "preproc_ifdef" "_type_specifier" "array_declarator" "preproc_else" "function_declarator" "attributed_declarator" "translation_unit" "parenthesized_declarator" "parameter_declaration"))
   ("type_qualifier" ("array_declarator" "function_definition" "type_definition" "type_descriptor" "abstract_array_declarator" "pointer_declarator" "declaration" "parameter_declaration" "field_declaration" "abstract_pointer_declarator"))
   ("unary_expression" ("preproc_elif" "for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "preproc_if" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("union_specifier" ("compound_statement" "_type_specifier" "function_definition" "preproc_elif" "type_definition" "type_descriptor" "preproc_else" "declaration_list" "preproc_if" "translation_unit" "declaration" "parameter_declaration" "preproc_elifdef" "field_declaration" "preproc_ifdef"))
   ("update_expression" ("for_statement" "expression_statement" "sizeof_expression" "field_expression" "generic_expression" "pointer_expression" "argument_list" "initializer_list" "update_expression" "bitfield_clause" "_expression" "case_statement" "binary_expression" "unary_expression" "subscript_expression" "abstract_array_declarator" "gnu_asm_input_operand" "init_declarator" "subscript_range_designator" "call_expression" "subscript_designator" "enumerator" "parenthesized_expression" "assignment_expression" "return_statement" "array_declarator" "cast_expression" "initializer_pair" "comma_expression" "conditional_expression"))
   ("variadic_parameter" ("parameter_list"))
   ("while_statement" ("case_statement" "compound_statement" "attributed_statement" "else_clause" "for_statement" "preproc_elif" "preproc_else" "do_statement" "declaration_list" "labeled_statement" "preproc_if" "translation_unit" "while_statement" "_statement" "if_statement" "preproc_elifdef" "preproc_ifdef"))
  ) 
)
;; END Inverse production rules for c
;; START All node types in c
(defconst combobulate-rules-c-types 
 '("_abstract_declarator" "_declarator" "_expression" "_field_declarator" "_statement" "_type_declarator" "_type_specifier" "abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator" "alignof_expression" "argument_list" "array_declarator" "assignment_expression" "attribute" "attribute_declaration" "attribute_specifier" "attributed_declarator" "attributed_statement" "binary_expression" "bitfield_clause" "break_statement" "call_expression" "case_statement" "cast_expression" "char_literal" "character" "comma_expression" "comment" "compound_literal_expression" "compound_statement" "concatenated_string" "conditional_expression" "continue_statement" "declaration" "declaration_list" "do_statement" "else_clause" "enum_specifier" "enumerator" "enumerator_list" "escape_sequence" "expression_statement" "false" "field_declaration" "field_declaration_list" "field_designator" "field_expression" "field_identifier" "for_statement" "function_declarator" "function_definition" "generic_expression" "gnu_asm_clobber_list" "gnu_asm_expression" "gnu_asm_goto_list" "gnu_asm_input_operand" "gnu_asm_input_operand_list" "gnu_asm_output_operand" "gnu_asm_output_operand_list" "gnu_asm_qualifier" "goto_statement" "identifier" "if_statement" "init_declarator" "initializer_list" "initializer_pair" "labeled_statement" "linkage_specification" "macro_type_specifier" "ms_based_modifier" "ms_call_modifier" "ms_declspec_modifier" "ms_pointer_modifier" "ms_restrict_modifier" "ms_signed_ptr_modifier" "ms_unaligned_ptr_modifier" "ms_unsigned_ptr_modifier" "null" "number_literal" "offsetof_expression" "parameter_declaration" "parameter_list" "parenthesized_declarator" "parenthesized_expression" "pointer_declarator" "pointer_expression" "preproc_arg" "preproc_call" "preproc_def" "preproc_defined" "preproc_directive" "preproc_elif" "preproc_elifdef" "preproc_else" "preproc_function_def" "preproc_if" "preproc_ifdef" "preproc_include" "preproc_params" "primitive_type" "return_statement" "seh_except_clause" "seh_finally_clause" "seh_leave_statement" "seh_try_statement" "sized_type_specifier" "sizeof_expression" "statement_identifier" "storage_class_specifier" "string_content" "string_literal" "struct_specifier" "subscript_designator" "subscript_expression" "subscript_range_designator" "switch_statement" "system_lib_string" "translation_unit" "true" "type_definition" "type_descriptor" "type_identifier" "type_qualifier" "unary_expression" "union_specifier" "update_expression" "variadic_parameter" "while_statement") 
)
;; END All node types in c
;; START All supertypes in c
(defconst combobulate-rules-c-supertypes 
 '("_abstract_declarator" "_declarator" "_expression" "_field_declarator" "_statement" "_type_declarator" "_type_specifier") 
)
;; END All supertypes in c

;; START Production rules for html
(defconst combobulate-rules-html 
 '(("attribute" (:*unnamed* ("attribute_name" "quoted_attribute_value" "attribute_value"))) 
 ("attribute_name" (:*unnamed* nil)) 
 ("attribute_value" (:*unnamed* nil)) 
 ("comment" (:*unnamed* nil)) 
 ("doctype" (:*unnamed* nil)) 
 ("document" (:*unnamed* ("element" "entity" "doctype" "erroneous_end_tag" "script_element" "text" "style_element"))) 
 ("element" (:*unnamed* ("end_tag" "doctype" "script_element" "text" "start_tag" "style_element" "self_closing_tag" "entity" "erroneous_end_tag" "element"))) 
 ("end_tag" (:*unnamed* ("tag_name"))) 
 ("entity" (:*unnamed* nil)) 
 ("erroneous_end_tag" (:*unnamed* ("erroneous_end_tag_name"))) 
 ("erroneous_end_tag_name" (:*unnamed* nil)) 
 ("quoted_attribute_value" (:*unnamed* ("attribute_value"))) 
 ("raw_text" (:*unnamed* nil)) 
 ("script_element" (:*unnamed* ("raw_text" "end_tag" "start_tag"))) 
 ("self_closing_tag" (:*unnamed* ("tag_name" "attribute"))) 
 ("start_tag" (:*unnamed* ("tag_name" "attribute"))) 
 ("style_element" (:*unnamed* ("raw_text" "end_tag" "start_tag"))) 
 ("tag_name" (:*unnamed* nil)) 
 ("text" (:*unnamed* nil)) 
))
;; END Production rules for html
;; START Inverse production rules for html
(defconst combobulate-rules-html-inverse 
 '(("attribute" ("self_closing_tag" "start_tag"))
   ("attribute_name" ("attribute"))
   ("attribute_value" ("quoted_attribute_value" "attribute"))
   ("doctype" ("document" "element"))
   ("element" ("document" "element"))
   ("end_tag" ("element" "script_element" "style_element"))
   ("entity" ("document" "element"))
   ("erroneous_end_tag" ("document" "element"))
   ("erroneous_end_tag_name" ("erroneous_end_tag"))
   ("quoted_attribute_value" ("attribute"))
   ("raw_text" ("script_element" "style_element"))
   ("script_element" ("document" "element"))
   ("self_closing_tag" ("element"))
   ("start_tag" ("element" "script_element" "style_element"))
   ("style_element" ("document" "element"))
   ("tag_name" ("self_closing_tag" "end_tag" "start_tag"))
   ("text" ("document" "element"))
  ) 
)
;; END Inverse production rules for html
;; START All node types in html
(defconst combobulate-rules-html-types 
 '("attribute" "attribute_name" "attribute_value" "comment" "doctype" "document" "element" "end_tag" "entity" "erroneous_end_tag" "erroneous_end_tag_name" "quoted_attribute_value" "raw_text" "script_element" "self_closing_tag" "start_tag" "style_element" "tag_name" "text") 
)
;; END All node types in html
;; START All supertypes in html
(defconst combobulate-rules-html-supertypes 
 nil 
)
;; END All supertypes in html

;; START Production rules for toml
(defconst combobulate-rules-toml 
 '(("array" (:*unnamed* ("local_date_time" "boolean" "string" "offset_date_time" "local_time" "float" "array" "local_date" "inline_table" "integer"))) 
 ("bare_key" (:*unnamed* nil)) 
 ("boolean" (:*unnamed* nil)) 
 ("comment" (:*unnamed* nil)) 
 ("document" (:*unnamed* ("table_array_element" "table" "pair"))) 
 ("dotted_key" (:*unnamed* ("quoted_key" "bare_key" "dotted_key"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("float" (:*unnamed* nil)) 
 ("inline_table" (:*unnamed* ("pair"))) 
 ("integer" (:*unnamed* nil)) 
 ("local_date" (:*unnamed* nil)) 
 ("local_date_time" (:*unnamed* nil)) 
 ("local_time" (:*unnamed* nil)) 
 ("offset_date_time" (:*unnamed* nil)) 
 ("pair" (:*unnamed* ("local_date_time" "boolean" "bare_key" "dotted_key" "quoted_key" "string" "offset_date_time" "local_time" "float" "array" "local_date" "inline_table" "integer"))) 
 ("quoted_key" (:*unnamed* ("escape_sequence"))) 
 ("string" (:*unnamed* ("escape_sequence"))) 
 ("table" (:*unnamed* ("quoted_key" "pair" "bare_key" "dotted_key"))) 
 ("table_array_element" (:*unnamed* ("quoted_key" "pair" "bare_key" "dotted_key"))) 
))
;; END Production rules for toml
;; START Inverse production rules for toml
(defconst combobulate-rules-toml-inverse 
 '(("array" ("array" "pair"))
   ("bare_key" ("table_array_element" "table" "pair" "dotted_key"))
   ("boolean" ("array" "pair"))
   ("dotted_key" ("table_array_element" "table" "pair" "dotted_key"))
   ("escape_sequence" ("string" "quoted_key"))
   ("float" ("array" "pair"))
   ("inline_table" ("array" "pair"))
   ("integer" ("array" "pair"))
   ("local_date" ("array" "pair"))
   ("local_date_time" ("array" "pair"))
   ("local_time" ("array" "pair"))
   ("offset_date_time" ("array" "pair"))
   ("pair" ("inline_table" "document" "table" "table_array_element"))
   ("quoted_key" ("table_array_element" "table" "pair" "dotted_key"))
   ("string" ("array" "pair"))
   ("table" ("document"))
   ("table_array_element" ("document"))
  ) 
)
;; END Inverse production rules for toml
;; START All node types in toml
(defconst combobulate-rules-toml-types 
 '("array" "bare_key" "boolean" "comment" "document" "dotted_key" "escape_sequence" "float" "inline_table" "integer" "local_date" "local_date_time" "local_time" "offset_date_time" "pair" "quoted_key" "string" "table" "table_array_element") 
)
;; END All node types in toml
;; START All supertypes in toml
(defconst combobulate-rules-toml-supertypes 
 nil 
)
;; END All supertypes in toml

;; START Production rules for json
(defconst combobulate-rules-json 
 '(("_value" (:*unnamed* ("array" "null" "false" "number" "true" "string" "object"))) 
 ("array" (:*unnamed* ("array" "null" "false" "number" "true" "string" "object"))) 
 ("comment" (:*unnamed* nil)) 
 ("document" (:*unnamed* ("array" "null" "false" "number" "true" "string" "object"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("false" (:*unnamed* nil)) 
 ("null" (:*unnamed* nil)) 
 ("number" (:*unnamed* nil)) 
 ("object" (:*unnamed* ("pair"))) 
 ("pair" (:*unnamed* nil :key ("string") :value ("array" "null" "false" "number" "true" "string" "object"))) 
 ("string" (:*unnamed* ("string_content"))) 
 ("string_content" (:*unnamed* ("escape_sequence"))) 
 ("true" (:*unnamed* nil)) 
))
;; END Production rules for json
;; START Inverse production rules for json
(defconst combobulate-rules-json-inverse 
 '(("array" ("_value" "array" "pair" "document"))
   ("escape_sequence" ("string_content"))
   ("false" ("_value" "array" "pair" "document"))
   ("null" ("_value" "array" "pair" "document"))
   ("number" ("_value" "array" "pair" "document"))
   ("object" ("_value" "array" "pair" "document"))
   ("pair" ("object"))
   ("string" ("_value" "array" "pair" "document"))
   ("string_content" ("string"))
   ("true" ("_value" "array" "pair" "document"))
  ) 
)
;; END Inverse production rules for json
;; START All node types in json
(defconst combobulate-rules-json-types 
 '("_value" "array" "comment" "document" "escape_sequence" "false" "null" "number" "object" "pair" "string" "string_content" "true") 
)
;; END All node types in json
;; START All supertypes in json
(defconst combobulate-rules-json-supertypes 
 '("_value") 
)
;; END All supertypes in json

;; START Auto-generated list of all languages
(defconst combobulate-rules-languages 
 '(c css go html javascript json jsx python toml tsx typescript yaml) 
 "A list of all the languages that have production rules.")
;; END Auto-generated list of all languages
(defconst combobulate-rules-alist 
 `((c ,combobulate-rules-c)
 (css ,combobulate-rules-css)
 (go ,combobulate-rules-go)
 (html ,combobulate-rules-html)
 (javascript ,combobulate-rules-javascript)
 (json ,combobulate-rules-json)
 (jsx ,combobulate-rules-jsx)
 (python ,combobulate-rules-python)
 (toml ,combobulate-rules-toml)
 (tsx ,combobulate-rules-tsx)
 (typescript ,combobulate-rules-typescript)
 (yaml ,combobulate-rules-yaml)
))

(defconst combobulate-rules-inverse-alist 
 `((c ,combobulate-rules-c-inverse)
 (css ,combobulate-rules-css-inverse)
 (go ,combobulate-rules-go-inverse)
 (html ,combobulate-rules-html-inverse)
 (javascript ,combobulate-rules-javascript-inverse)
 (json ,combobulate-rules-json-inverse)
 (jsx ,combobulate-rules-jsx-inverse)
 (python ,combobulate-rules-python-inverse)
 (toml ,combobulate-rules-toml-inverse)
 (tsx ,combobulate-rules-tsx-inverse)
 (typescript ,combobulate-rules-typescript-inverse)
 (yaml ,combobulate-rules-yaml-inverse)
))

(defconst combobulate-rules-types-alist 
 `((c ,combobulate-rules-c-types)
 (css ,combobulate-rules-css-types)
 (go ,combobulate-rules-go-types)
 (html ,combobulate-rules-html-types)
 (javascript ,combobulate-rules-javascript-types)
 (json ,combobulate-rules-json-types)
 (jsx ,combobulate-rules-jsx-types)
 (python ,combobulate-rules-python-types)
 (toml ,combobulate-rules-toml-types)
 (tsx ,combobulate-rules-tsx-types)
 (typescript ,combobulate-rules-typescript-types)
 (yaml ,combobulate-rules-yaml-types)
))

(defconst combobulate-rules-supertypes-alist 
 `((c ,combobulate-rules-c-supertypes)
 (css ,combobulate-rules-css-supertypes)
 (go ,combobulate-rules-go-supertypes)
 (html ,combobulate-rules-html-supertypes)
 (javascript ,combobulate-rules-javascript-supertypes)
 (json ,combobulate-rules-json-supertypes)
 (jsx ,combobulate-rules-jsx-supertypes)
 (python ,combobulate-rules-python-supertypes)
 (toml ,combobulate-rules-toml-supertypes)
 (tsx ,combobulate-rules-tsx-supertypes)
 (typescript ,combobulate-rules-typescript-supertypes)
 (yaml ,combobulate-rules-yaml-supertypes)
))

(provide 'combobulate-rules)
